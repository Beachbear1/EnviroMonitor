
WeatherDesignProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  08009798  08009798  0000a798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b8  0800a3b8  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b8  0800a3b8  0000b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3c0  0800a3c0  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3c0  0800a3c0  0000b3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3c4  0800a3c4  0000b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a3c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  200001dc  0800a5a4  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  0800a5a4  0000c96c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107c2  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ca  00000000  00000000  0001c9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d5b  00000000  00000000  00020b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cae  00000000  00000000  000428d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4cd2  00000000  00000000  00055581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b50  00000000  00000000  0011a298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009780 	.word	0x08009780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009780 	.word	0x08009780

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <AHT20_Init>:
#define AHT20_INIT_CMD 0xBE
#define AHT20_MEASURE_CMD 0xAC

I2C_HandleTypeDef *_hi2c;

void AHT20_Init(I2C_HandleTypeDef *hi2c) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
    _hi2c = hi2c;
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <AHT20_Init+0x44>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
    uint8_t cmd[3] = { AHT20_INIT_CMD, 0x08, 0x00 };
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <AHT20_Init+0x48>)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	8019      	strh	r1, [r3, #0]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	0c12      	lsrs	r2, r2, #16
 8000ff6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(_hi2c, AHT20_ADDRESS, cmd, 3, HAL_MAX_DELAY);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <AHT20_Init+0x44>)
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	f107 020c 	add.w	r2, r7, #12
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2303      	movs	r3, #3
 8001008:	2170      	movs	r1, #112	@ 0x70
 800100a:	f002 fa89 	bl	8003520 <HAL_I2C_Master_Transmit>
    HAL_Delay(40);  // Wait for sensor initialization
 800100e:	2028      	movs	r0, #40	@ 0x28
 8001010:	f001 ff5e 	bl	8002ed0 <HAL_Delay>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200001f8 	.word	0x200001f8
 8001020:	08009798 	.word	0x08009798

08001024 <AHT20_ReadTemperature>:

float AHT20_ReadTemperature(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
    uint8_t cmd[3] = { AHT20_MEASURE_CMD, 0x33, 0x00 };
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <AHT20_ReadTemperature+0xa4>)
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	4611      	mov	r1, r2
 8001034:	8019      	strh	r1, [r3, #0]
 8001036:	3302      	adds	r3, #2
 8001038:	0c12      	lsrs	r2, r2, #16
 800103a:	701a      	strb	r2, [r3, #0]
    uint8_t data[6];

    // Check if AHT20 is connected
    if (HAL_I2C_IsDeviceReady(_hi2c, AHT20_ADDRESS, 1, HAL_MAX_DELAY) != HAL_OK) {
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <AHT20_ReadTemperature+0xa8>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2201      	movs	r2, #1
 8001046:	2170      	movs	r1, #112	@ 0x70
 8001048:	f002 fea6 	bl	8003d98 <HAL_I2C_IsDeviceReady>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <AHT20_ReadTemperature+0x34>
        return -999.0f;  // Return a specific error value
 8001052:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80010d0 <AHT20_ReadTemperature+0xac>
 8001056:	e032      	b.n	80010be <AHT20_ReadTemperature+0x9a>
    }

    HAL_I2C_Master_Transmit(_hi2c, AHT20_ADDRESS, cmd, 3, HAL_MAX_DELAY);
 8001058:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <AHT20_ReadTemperature+0xa8>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f107 0208 	add.w	r2, r7, #8
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2303      	movs	r3, #3
 8001068:	2170      	movs	r1, #112	@ 0x70
 800106a:	f002 fa59 	bl	8003520 <HAL_I2C_Master_Transmit>
    HAL_Delay(80);  // Wait for measurement to complete
 800106e:	2050      	movs	r0, #80	@ 0x50
 8001070:	f001 ff2e 	bl	8002ed0 <HAL_Delay>
    HAL_I2C_Master_Receive(_hi2c, AHT20_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <AHT20_ReadTemperature+0xa8>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	463a      	mov	r2, r7
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2306      	movs	r3, #6
 8001082:	2170      	movs	r1, #112	@ 0x70
 8001084:	f002 fb64 	bl	8003750 <HAL_I2C_Master_Receive>

    uint32_t temp_raw = (data[3] & 0x0F) << 16 | data[4] << 8 | data[5];
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	041b      	lsls	r3, r3, #16
 800108c:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001090:	793b      	ldrb	r3, [r7, #4]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	4313      	orrs	r3, r2
 8001096:	797a      	ldrb	r2, [r7, #5]
 8001098:	4313      	orrs	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
    return ((float)temp_raw / 1048576.0f) * 200.0f - 50.0f;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80010d4 <AHT20_ReadTemperature+0xb0>
 80010aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80010d8 <AHT20_ReadTemperature+0xb4>
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80010dc <AHT20_ReadTemperature+0xb8>
 80010ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80010be:	eeb0 0a67 	vmov.f32	s0, s15
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800979c 	.word	0x0800979c
 80010cc:	200001f8 	.word	0x200001f8
 80010d0:	c479c000 	.word	0xc479c000
 80010d4:	49800000 	.word	0x49800000
 80010d8:	43480000 	.word	0x43480000
 80010dc:	42480000 	.word	0x42480000

080010e0 <AHT20_ReadHumidity>:

float AHT20_ReadHumidity(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
    uint8_t cmd[3] = { AHT20_MEASURE_CMD, 0x33, 0x00 };
 80010e6:	4a25      	ldr	r2, [pc, #148]	@ (800117c <AHT20_ReadHumidity+0x9c>)
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	4611      	mov	r1, r2
 80010f0:	8019      	strh	r1, [r3, #0]
 80010f2:	3302      	adds	r3, #2
 80010f4:	0c12      	lsrs	r2, r2, #16
 80010f6:	701a      	strb	r2, [r3, #0]
    uint8_t data[6];

    // Check if AHT20 is connected
    if (HAL_I2C_IsDeviceReady(_hi2c, AHT20_ADDRESS, 1, HAL_MAX_DELAY) != HAL_OK) {
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <AHT20_ReadHumidity+0xa0>)
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	2201      	movs	r2, #1
 8001102:	2170      	movs	r1, #112	@ 0x70
 8001104:	f002 fe48 	bl	8003d98 <HAL_I2C_IsDeviceReady>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <AHT20_ReadHumidity+0x34>
        return -999.0f;  // Return a specific error value
 800110e:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8001184 <AHT20_ReadHumidity+0xa4>
 8001112:	e02e      	b.n	8001172 <AHT20_ReadHumidity+0x92>
    }

    HAL_I2C_Master_Transmit(_hi2c, AHT20_ADDRESS, cmd, 3, HAL_MAX_DELAY);
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <AHT20_ReadHumidity+0xa0>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f107 0208 	add.w	r2, r7, #8
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2303      	movs	r3, #3
 8001124:	2170      	movs	r1, #112	@ 0x70
 8001126:	f002 f9fb 	bl	8003520 <HAL_I2C_Master_Transmit>
    HAL_Delay(80);  // Wait for measurement to complete
 800112a:	2050      	movs	r0, #80	@ 0x50
 800112c:	f001 fed0 	bl	8002ed0 <HAL_Delay>
    HAL_I2C_Master_Receive(_hi2c, AHT20_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <AHT20_ReadHumidity+0xa0>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	463a      	mov	r2, r7
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2306      	movs	r3, #6
 800113e:	2170      	movs	r1, #112	@ 0x70
 8001140:	f002 fb06 	bl	8003750 <HAL_I2C_Master_Receive>

    uint32_t hum_raw = data[1] << 12 | data[2] << 4 | (data[3] >> 4);
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	031a      	lsls	r2, r3, #12
 8001148:	78bb      	ldrb	r3, [r7, #2]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4313      	orrs	r3, r2
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	0912      	lsrs	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	4313      	orrs	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
    return ((float)hum_raw / 1048576.0f) * 100.0f;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001162:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001188 <AHT20_ReadHumidity+0xa8>
 8001166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800118c <AHT20_ReadHumidity+0xac>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0800979c 	.word	0x0800979c
 8001180:	200001f8 	.word	0x200001f8
 8001184:	c479c000 	.word	0xc479c000
 8001188:	49800000 	.word	0x49800000
 800118c:	42c80000 	.word	0x42c80000

08001190 <bmp280_writemem>:
// Variables for temperature and pressure
int32_t _bmp280_temp = 0;  // Temperature in hundredths of degree Celsius
uint32_t _bmp280_pres = 0; // Pressure in Pa

// Write to BMP280 register
void bmp280_writemem(uint8_t reg, uint8_t value) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {reg, value};
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	733b      	strb	r3, [r7, #12]
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(_hi2c_bmp280, BMP280_ADDRESS, data, 2, HAL_MAX_DELAY);
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <bmp280_writemem+0x38>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f107 020c 	add.w	r2, r7, #12
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2302      	movs	r3, #2
 80011b8:	21ec      	movs	r1, #236	@ 0xec
 80011ba:	f002 f9b1 	bl	8003520 <HAL_I2C_Master_Transmit>
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001fc 	.word	0x200001fc

080011cc <bmp280_readmem>:

// Read from BMP280 register
void bmp280_readmem(uint8_t reg, uint8_t *buff, uint16_t size) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(_hi2c_bmp280, BMP280_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buff, size, HAL_MAX_DELAY);
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <bmp280_readmem+0x38>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	88bb      	ldrh	r3, [r7, #4]
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	21ec      	movs	r1, #236	@ 0xec
 80011f6:	f002 fcb5 	bl	8003b64 <HAL_I2C_Mem_Read>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200001fc 	.word	0x200001fc

08001208 <bmp280_getcalibration>:

// Read calibration data
void bmp280_getcalibration(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
    uint8_t calib_data[24];
    bmp280_readmem(BMP280_REG_CALIB, calib_data, 24);
 800120e:	463b      	mov	r3, r7
 8001210:	2218      	movs	r2, #24
 8001212:	4619      	mov	r1, r3
 8001214:	2088      	movs	r0, #136	@ 0x88
 8001216:	f7ff ffd9 	bl	80011cc <bmp280_readmem>

    dig_T1 = (calib_data[1] << 8) | calib_data[0];
 800121a:	787b      	ldrb	r3, [r7, #1]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21a      	sxth	r2, r3
 8001220:	783b      	ldrb	r3, [r7, #0]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b35      	ldr	r3, [pc, #212]	@ (8001300 <bmp280_getcalibration+0xf8>)
 800122c:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calib_data[3] << 8) | calib_data[2];
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b31      	ldr	r3, [pc, #196]	@ (8001304 <bmp280_getcalibration+0xfc>)
 800123e:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calib_data[5] << 8) | calib_data[4];
 8001240:	797b      	ldrb	r3, [r7, #5]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	793b      	ldrb	r3, [r7, #4]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <bmp280_getcalibration+0x100>)
 8001250:	801a      	strh	r2, [r3, #0]
    dig_P1 = (calib_data[7] << 8) | calib_data[6];
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <bmp280_getcalibration+0x104>)
 8001264:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calib_data[9] << 8) | calib_data[8];
 8001266:	7a7b      	ldrb	r3, [r7, #9]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	7a3b      	ldrb	r3, [r7, #8]
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <bmp280_getcalibration+0x108>)
 8001276:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calib_data[11] << 8) | calib_data[10];
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	7abb      	ldrb	r3, [r7, #10]
 8001280:	b21b      	sxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <bmp280_getcalibration+0x10c>)
 8001288:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calib_data[13] << 8) | calib_data[12];
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21a      	sxth	r2, r3
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <bmp280_getcalibration+0x110>)
 800129a:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calib_data[15] << 8) | calib_data[14];
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <bmp280_getcalibration+0x114>)
 80012ac:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calib_data[17] << 8) | calib_data[16];
 80012ae:	7c7b      	ldrb	r3, [r7, #17]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7c3b      	ldrb	r3, [r7, #16]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <bmp280_getcalibration+0x118>)
 80012be:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calib_data[19] << 8) | calib_data[18];
 80012c0:	7cfb      	ldrb	r3, [r7, #19]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7cbb      	ldrb	r3, [r7, #18]
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <bmp280_getcalibration+0x11c>)
 80012d0:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calib_data[21] << 8) | calib_data[20];
 80012d2:	7d7b      	ldrb	r3, [r7, #21]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7d3b      	ldrb	r3, [r7, #20]
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21a      	sxth	r2, r3
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <bmp280_getcalibration+0x120>)
 80012e2:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calib_data[23] << 8) | calib_data[22];
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7dbb      	ldrb	r3, [r7, #22]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <bmp280_getcalibration+0x124>)
 80012f4:	801a      	strh	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000200 	.word	0x20000200
 8001304:	20000202 	.word	0x20000202
 8001308:	20000204 	.word	0x20000204
 800130c:	20000206 	.word	0x20000206
 8001310:	20000208 	.word	0x20000208
 8001314:	2000020a 	.word	0x2000020a
 8001318:	2000020c 	.word	0x2000020c
 800131c:	2000020e 	.word	0x2000020e
 8001320:	20000210 	.word	0x20000210
 8001324:	20000212 	.word	0x20000212
 8001328:	20000214 	.word	0x20000214
 800132c:	20000216 	.word	0x20000216

08001330 <bmp280_init>:

// Initialize BMP280 sensor
uint8_t bmp280_init(I2C_HandleTypeDef *hi2c) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    _hi2c_bmp280 = hi2c;
 8001338:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <bmp280_init+0x44>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]

    uint8_t chip_id;
    bmp280_readmem(BMP280_REG_CHIPID, &chip_id, 1);
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	20d0      	movs	r0, #208	@ 0xd0
 8001348:	f7ff ff40 	bl	80011cc <bmp280_readmem>
    if (chip_id != BMP280_CHIP_ID) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b58      	cmp	r3, #88	@ 0x58
 8001350:	d001      	beq.n	8001356 <bmp280_init+0x26>
        return 0;  // BMP280 not detected
 8001352:	2300      	movs	r3, #0
 8001354:	e00a      	b.n	800136c <bmp280_init+0x3c>
    }

    bmp280_getcalibration();  // Get calibration data
 8001356:	f7ff ff57 	bl	8001208 <bmp280_getcalibration>

    // Configure the sensor (normal mode, oversampling)
    bmp280_writemem(BMP280_REG_CTRL_MEAS, 0x57); // Normal mode, pressure and temperature oversampling x4
 800135a:	2157      	movs	r1, #87	@ 0x57
 800135c:	20f4      	movs	r0, #244	@ 0xf4
 800135e:	f7ff ff17 	bl	8001190 <bmp280_writemem>
    bmp280_writemem(BMP280_REG_CONFIG, 0x90);    // Standby time = 62.5 ms, filter = x4
 8001362:	2190      	movs	r1, #144	@ 0x90
 8001364:	20f5      	movs	r0, #245	@ 0xf5
 8001366:	f7ff ff13 	bl	8001190 <bmp280_writemem>

    return 1;  // BMP280 initialized successfully
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200001fc 	.word	0x200001fc

08001378 <bmp280_measure>:

// Measure temperature and pressure
void bmp280_measure(void) {
 8001378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800137c:	b0ee      	sub	sp, #440	@ 0x1b8
 800137e:	af00      	add	r7, sp, #0
    uint8_t data[6];
    int64_t temp_raw, press_raw, var1, var2;
    int64_t p;

    // Read raw data
    if (HAL_I2C_IsDeviceReady(_hi2c_bmp280, BMP280_ADDRESS, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <bmp280_measure+0x28>)
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	2201      	movs	r2, #1
 800138a:	21ec      	movs	r1, #236	@ 0xec
 800138c:	f002 fd04 	bl	8003d98 <HAL_I2C_IsDeviceReady>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00a      	beq.n	80013ac <bmp280_measure+0x34>
        _bmp280_pres = -999;  // Set invalid pressure value if BMP280 is not detected
 8001396:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <bmp280_measure+0x2c>)
 8001398:	4a03      	ldr	r2, [pc, #12]	@ (80013a8 <bmp280_measure+0x30>)
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f000 bc4d 	b.w	8001c3a <bmp280_measure+0x8c2>
 80013a0:	200001fc 	.word	0x200001fc
 80013a4:	20000220 	.word	0x20000220
 80013a8:	fffffc19 	.word	0xfffffc19
        return;
    }

    bmp280_readmem(BMP280_REG_PRESS_MSB, data, 6);
 80013ac:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80013b0:	2206      	movs	r2, #6
 80013b2:	4619      	mov	r1, r3
 80013b4:	20f7      	movs	r0, #247	@ 0xf7
 80013b6:	f7ff ff09 	bl	80011cc <bmp280_readmem>

    press_raw = (int32_t)(((uint32_t)(data[0] << 16) | (data[1] << 8) | data[2]) >> 4);
 80013ba:	f897 3188 	ldrb.w	r3, [r7, #392]	@ 0x188
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	f897 3189 	ldrb.w	r3, [r7, #393]	@ 0x189
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	431a      	orrs	r2, r3
 80013c8:	f897 318a 	ldrb.w	r3, [r7, #394]	@ 0x18a
 80013cc:	4313      	orrs	r3, r2
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	17da      	asrs	r2, r3, #31
 80013d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80013d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80013d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80013da:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
    temp_raw = (int32_t)(((uint32_t)(data[3] << 16) | (data[4] << 8) | data[5]) >> 4);
 80013de:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 80013e2:	041a      	lsls	r2, r3, #16
 80013e4:	f897 318c 	ldrb.w	r3, [r7, #396]	@ 0x18c
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	431a      	orrs	r2, r3
 80013ec:	f897 318d 	ldrb.w	r3, [r7, #397]	@ 0x18d
 80013f0:	4313      	orrs	r3, r2
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	17da      	asrs	r2, r3, #31
 80013f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80013f8:	667a      	str	r2, [r7, #100]	@ 0x64
 80013fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80013fe:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0

    // Temperature calculation
    var1 = ((((temp_raw >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 8001402:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001406:	f04f 0000 	mov.w	r0, #0
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	08d0      	lsrs	r0, r2, #3
 8001410:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8001414:	10d9      	asrs	r1, r3, #3
 8001416:	4beb      	ldr	r3, [pc, #940]	@ (80017c4 <bmp280_measure+0x44c>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	17da      	asrs	r2, r3, #31
 800141e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001422:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001426:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800142a:	ebb0 0803 	subs.w	r8, r0, r3
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001432:	eb61 0903 	sbc.w	r9, r1, r3
 8001436:	4be4      	ldr	r3, [pc, #912]	@ (80017c8 <bmp280_measure+0x450>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	b21b      	sxth	r3, r3
 800143e:	17da      	asrs	r2, r3, #31
 8001440:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001444:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001448:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800144c:	4603      	mov	r3, r0
 800144e:	fb03 f209 	mul.w	r2, r3, r9
 8001452:	460b      	mov	r3, r1
 8001454:	fb08 f303 	mul.w	r3, r8, r3
 8001458:	4413      	add	r3, r2
 800145a:	4602      	mov	r2, r0
 800145c:	fba8 4502 	umull	r4, r5, r8, r2
 8001460:	442b      	add	r3, r5
 8001462:	461d      	mov	r5, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	0ae2      	lsrs	r2, r4, #11
 800146e:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8001472:	12eb      	asrs	r3, r5, #11
 8001474:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    var2 = (((((temp_raw >> 4) - ((int32_t)dig_T1)) * ((temp_raw >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8001478:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 800147c:	f04f 0000 	mov.w	r0, #0
 8001480:	f04f 0100 	mov.w	r1, #0
 8001484:	0910      	lsrs	r0, r2, #4
 8001486:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800148a:	1119      	asrs	r1, r3, #4
 800148c:	4bcd      	ldr	r3, [pc, #820]	@ (80017c4 <bmp280_measure+0x44c>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	2200      	movs	r2, #0
 8001494:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001498:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800149c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80014a0:	4623      	mov	r3, r4
 80014a2:	1ac3      	subs	r3, r0, r3
 80014a4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80014a8:	462b      	mov	r3, r5
 80014aa:	eb61 0303 	sbc.w	r3, r1, r3
 80014ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80014b2:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	0910      	lsrs	r0, r2, #4
 80014c0:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 80014c4:	1119      	asrs	r1, r3, #4
 80014c6:	4bbf      	ldr	r3, [pc, #764]	@ (80017c4 <bmp280_measure+0x44c>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	2200      	movs	r2, #0
 80014ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80014d2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80014d6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80014da:	4623      	mov	r3, r4
 80014dc:	1ac3      	subs	r3, r0, r3
 80014de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80014e2:	462b      	mov	r3, r5
 80014e4:	eb61 0303 	sbc.w	r3, r1, r3
 80014e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014ec:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80014f0:	462b      	mov	r3, r5
 80014f2:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80014f6:	4642      	mov	r2, r8
 80014f8:	fb02 f203 	mul.w	r2, r2, r3
 80014fc:	464b      	mov	r3, r9
 80014fe:	4621      	mov	r1, r4
 8001500:	fb01 f303 	mul.w	r3, r1, r3
 8001504:	4413      	add	r3, r2
 8001506:	4622      	mov	r2, r4
 8001508:	4641      	mov	r1, r8
 800150a:	fba2 ab01 	umull	sl, fp, r2, r1
 800150e:	445b      	add	r3, fp
 8001510:	469b      	mov	fp, r3
 8001512:	f04f 0000 	mov.w	r0, #0
 8001516:	f04f 0100 	mov.w	r1, #0
 800151a:	ea4f 301a 	mov.w	r0, sl, lsr #12
 800151e:	ea40 500b 	orr.w	r0, r0, fp, lsl #20
 8001522:	ea4f 312b 	mov.w	r1, fp, asr #12
 8001526:	4ba9      	ldr	r3, [pc, #676]	@ (80017cc <bmp280_measure+0x454>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	b21b      	sxth	r3, r3
 800152e:	17da      	asrs	r2, r3, #31
 8001530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001534:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001538:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800153c:	4623      	mov	r3, r4
 800153e:	fb03 f201 	mul.w	r2, r3, r1
 8001542:	462b      	mov	r3, r5
 8001544:	fb00 f303 	mul.w	r3, r0, r3
 8001548:	4413      	add	r3, r2
 800154a:	4622      	mov	r2, r4
 800154c:	fba0 1202 	umull	r1, r2, r0, r2
 8001550:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001554:	460a      	mov	r2, r1
 8001556:	f8c7 2180 	str.w	r2, [r7, #384]	@ 0x180
 800155a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800155e:	4413      	add	r3, r2
 8001560:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	@ 0x180
 8001570:	4621      	mov	r1, r4
 8001572:	0b8a      	lsrs	r2, r1, #14
 8001574:	4629      	mov	r1, r5
 8001576:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800157a:	4629      	mov	r1, r5
 800157c:	138b      	asrs	r3, r1, #14
 800157e:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    t_fine = var1 + var2;
 8001582:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001586:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800158a:	4413      	add	r3, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4b90      	ldr	r3, [pc, #576]	@ (80017d0 <bmp280_measure+0x458>)
 8001590:	601a      	str	r2, [r3, #0]
    _bmp280_temp = (t_fine * 5 + 128) >> 8;
 8001592:	4b8f      	ldr	r3, [pc, #572]	@ (80017d0 <bmp280_measure+0x458>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3380      	adds	r3, #128	@ 0x80
 800159e:	121a      	asrs	r2, r3, #8
 80015a0:	4b8c      	ldr	r3, [pc, #560]	@ (80017d4 <bmp280_measure+0x45c>)
 80015a2:	601a      	str	r2, [r3, #0]

    // Pressure calculation
    var1 = (((int64_t)t_fine) >> 1) - (int64_t)64000;
 80015a4:	4b8a      	ldr	r3, [pc, #552]	@ (80017d0 <bmp280_measure+0x458>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	105b      	asrs	r3, r3, #1
 80015aa:	17da      	asrs	r2, r3, #31
 80015ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80015b0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80015b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80015b8:	460b      	mov	r3, r1
 80015ba:	f5b3 437a 	subs.w	r3, r3, #64000	@ 0xfa00
 80015be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015c0:	4613      	mov	r3, r2
 80015c2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80015c8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80015cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int64_t)dig_P6);
 80015d0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	f04f 0500 	mov.w	r5, #0
 80015dc:	0894      	lsrs	r4, r2, #2
 80015de:	ea44 7483 	orr.w	r4, r4, r3, lsl #30
 80015e2:	109d      	asrs	r5, r3, #2
 80015e4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	0890      	lsrs	r0, r2, #2
 80015f2:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80015f6:	1099      	asrs	r1, r3, #2
 80015f8:	fb00 f205 	mul.w	r2, r0, r5
 80015fc:	fb04 f301 	mul.w	r3, r4, r1
 8001600:	4413      	add	r3, r2
 8001602:	fba4 1200 	umull	r1, r2, r4, r0
 8001606:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800160a:	460a      	mov	r2, r1
 800160c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001610:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001614:	4413      	add	r3, r2
 8001616:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	@ 0x178
 8001626:	4623      	mov	r3, r4
 8001628:	0ad8      	lsrs	r0, r3, #11
 800162a:	462b      	mov	r3, r5
 800162c:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 8001630:	462b      	mov	r3, r5
 8001632:	12d9      	asrs	r1, r3, #11
 8001634:	4b68      	ldr	r3, [pc, #416]	@ (80017d8 <bmp280_measure+0x460>)
 8001636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163a:	b21b      	sxth	r3, r3
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001642:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800164a:	4623      	mov	r3, r4
 800164c:	fb03 f201 	mul.w	r2, r3, r1
 8001650:	462b      	mov	r3, r5
 8001652:	fb00 f303 	mul.w	r3, r0, r3
 8001656:	4413      	add	r3, r2
 8001658:	4622      	mov	r2, r4
 800165a:	fba0 1202 	umull	r1, r2, r0, r2
 800165e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001662:	460a      	mov	r2, r1
 8001664:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8001668:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800166c:	4413      	add	r3, r2
 800166e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001672:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8001676:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
 800167a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
    var2 = var2 + ((var1 * ((int64_t)dig_P5)) << 1);
 800167e:	4b57      	ldr	r3, [pc, #348]	@ (80017dc <bmp280_measure+0x464>)
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	b21b      	sxth	r3, r3
 8001686:	17da      	asrs	r2, r3, #31
 8001688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800168c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001690:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001694:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001698:	462a      	mov	r2, r5
 800169a:	fb02 f203 	mul.w	r2, r2, r3
 800169e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80016a2:	4621      	mov	r1, r4
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	441a      	add	r2, r3
 80016aa:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80016ae:	4621      	mov	r1, r4
 80016b0:	fba3 1301 	umull	r1, r3, r3, r1
 80016b4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80016b8:	460b      	mov	r3, r1
 80016ba:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80016be:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80016c2:	18d3      	adds	r3, r2, r3
 80016c4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80016c8:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	@ 0x170
 80016cc:	460b      	mov	r3, r1
 80016ce:	18db      	adds	r3, r3, r3
 80016d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016d2:	4613      	mov	r3, r2
 80016d4:	eb42 0303 	adc.w	r3, r2, r3
 80016d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80016da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80016de:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80016e2:	1814      	adds	r4, r2, r0
 80016e4:	64bc      	str	r4, [r7, #72]	@ 0x48
 80016e6:	414b      	adcs	r3, r1
 80016e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016ea:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80016ee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
    var2 = (var2 >> 2) + (((int64_t)dig_P4) << 16);
 80016f2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	0890      	lsrs	r0, r2, #2
 8001700:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8001704:	1099      	asrs	r1, r3, #2
 8001706:	4b36      	ldr	r3, [pc, #216]	@ (80017e0 <bmp280_measure+0x468>)
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	b21b      	sxth	r3, r3
 800170e:	17da      	asrs	r2, r3, #31
 8001710:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001714:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001718:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800171c:	4623      	mov	r3, r4
 800171e:	141b      	asrs	r3, r3, #16
 8001720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001724:	4623      	mov	r3, r4
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800172c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001730:	4623      	mov	r3, r4
 8001732:	18c3      	adds	r3, r0, r3
 8001734:	643b      	str	r3, [r7, #64]	@ 0x40
 8001736:	462b      	mov	r3, r5
 8001738:	eb41 0303 	adc.w	r3, r1, r3
 800173c:	647b      	str	r3, [r7, #68]	@ 0x44
 800173e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001742:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int64_t)dig_P2) * var1) >> 1)) >> 18;
 8001746:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <bmp280_measure+0x46c>)
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	b21b      	sxth	r3, r3
 800174e:	17da      	asrs	r2, r3, #31
 8001750:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001754:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001758:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	f04f 0500 	mov.w	r5, #0
 8001764:	0894      	lsrs	r4, r2, #2
 8001766:	ea44 7483 	orr.w	r4, r4, r3, lsl #30
 800176a:	109d      	asrs	r5, r3, #2
 800176c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001770:	f04f 0000 	mov.w	r0, #0
 8001774:	f04f 0100 	mov.w	r1, #0
 8001778:	0890      	lsrs	r0, r2, #2
 800177a:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800177e:	1099      	asrs	r1, r3, #2
 8001780:	fb00 f205 	mul.w	r2, r0, r5
 8001784:	fb04 f301 	mul.w	r3, r4, r1
 8001788:	4413      	add	r3, r2
 800178a:	fba4 1200 	umull	r1, r2, r4, r0
 800178e:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001792:	460a      	mov	r2, r1
 8001794:	f8c7 2168 	str.w	r2, [r7, #360]	@ 0x168
 8001798:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800179c:	4413      	add	r3, r2
 800179e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 80017ae:	4621      	mov	r1, r4
 80017b0:	0b4a      	lsrs	r2, r1, #13
 80017b2:	4629      	mov	r1, r5
 80017b4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80017b8:	4629      	mov	r1, r5
 80017ba:	134b      	asrs	r3, r1, #13
 80017bc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80017c0:	e012      	b.n	80017e8 <bmp280_measure+0x470>
 80017c2:	bf00      	nop
 80017c4:	20000200 	.word	0x20000200
 80017c8:	20000202 	.word	0x20000202
 80017cc:	20000204 	.word	0x20000204
 80017d0:	20000218 	.word	0x20000218
 80017d4:	2000021c 	.word	0x2000021c
 80017d8:	20000210 	.word	0x20000210
 80017dc:	2000020e 	.word	0x2000020e
 80017e0:	2000020c 	.word	0x2000020c
 80017e4:	2000020a 	.word	0x2000020a
 80017e8:	4629      	mov	r1, r5
 80017ea:	fb02 f001 	mul.w	r0, r2, r1
 80017ee:	4621      	mov	r1, r4
 80017f0:	fb01 f103 	mul.w	r1, r1, r3
 80017f4:	4401      	add	r1, r0
 80017f6:	4620      	mov	r0, r4
 80017f8:	fba0 2302 	umull	r2, r3, r0, r2
 80017fc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001800:	4613      	mov	r3, r2
 8001802:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001806:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800180a:	18cb      	adds	r3, r1, r3
 800180c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800181c:	4623      	mov	r3, r4
 800181e:	08d8      	lsrs	r0, r3, #3
 8001820:	462b      	mov	r3, r5
 8001822:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8001826:	462b      	mov	r3, r5
 8001828:	10d9      	asrs	r1, r3, #3
 800182a:	4b8e      	ldr	r3, [pc, #568]	@ (8001a64 <bmp280_measure+0x6ec>)
 800182c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001830:	b21b      	sxth	r3, r3
 8001832:	17da      	asrs	r2, r3, #31
 8001834:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001838:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800183c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001840:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001844:	464a      	mov	r2, r9
 8001846:	fb02 f203 	mul.w	r2, r2, r3
 800184a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800184e:	4644      	mov	r4, r8
 8001850:	fb04 f303 	mul.w	r3, r4, r3
 8001854:	441a      	add	r2, r3
 8001856:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800185a:	4644      	mov	r4, r8
 800185c:	fba3 4304 	umull	r4, r3, r3, r4
 8001860:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001864:	4623      	mov	r3, r4
 8001866:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800186a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800186e:	18d3      	adds	r3, r2, r3
 8001870:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 8956 	ldrd	r8, r9, [r7, #344]	@ 0x158
 8001880:	4644      	mov	r4, r8
 8001882:	0862      	lsrs	r2, r4, #1
 8001884:	464c      	mov	r4, r9
 8001886:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 800188a:	464c      	mov	r4, r9
 800188c:	1063      	asrs	r3, r4, #1
 800188e:	1884      	adds	r4, r0, r2
 8001890:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8001894:	eb41 0303 	adc.w	r3, r1, r3
 8001898:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80018a8:	4621      	mov	r1, r4
 80018aa:	0c8a      	lsrs	r2, r1, #18
 80018ac:	4629      	mov	r1, r5
 80018ae:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80018b2:	4629      	mov	r1, r5
 80018b4:	148b      	asrs	r3, r1, #18
 80018b6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    var1 = ((((32768 + var1)) * ((int64_t)dig_P1)) >> 15);
 80018ba:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80018be:	f512 4100 	adds.w	r1, r2, #32768	@ 0x8000
 80018c2:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80018c6:	f143 0300 	adc.w	r3, r3, #0
 80018ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018ce:	4b66      	ldr	r3, [pc, #408]	@ (8001a68 <bmp280_measure+0x6f0>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2200      	movs	r2, #0
 80018d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80018da:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80018de:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80018e2:	462b      	mov	r3, r5
 80018e4:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80018e8:	4642      	mov	r2, r8
 80018ea:	fb02 f203 	mul.w	r2, r2, r3
 80018ee:	464b      	mov	r3, r9
 80018f0:	4621      	mov	r1, r4
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	4622      	mov	r2, r4
 80018fa:	4641      	mov	r1, r8
 80018fc:	fba2 1201 	umull	r1, r2, r2, r1
 8001900:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001904:	460a      	mov	r2, r1
 8001906:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800190a:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800190e:	4413      	add	r3, r2
 8001910:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8001920:	4621      	mov	r1, r4
 8001922:	0bca      	lsrs	r2, r1, #15
 8001924:	4629      	mov	r1, r5
 8001926:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800192a:	4629      	mov	r1, r5
 800192c:	13cb      	asrs	r3, r1, #15
 800192e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198

    if (var1 == 0) {
 8001932:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001936:	4313      	orrs	r3, r2
 8001938:	d103      	bne.n	8001942 <bmp280_measure+0x5ca>
        _bmp280_pres = -999;  // Set invalid pressure value to avoid division by zero
 800193a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a6c <bmp280_measure+0x6f4>)
 800193c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a70 <bmp280_measure+0x6f8>)
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e17b      	b.n	8001c3a <bmp280_measure+0x8c2>
    } else {
        p = (((int64_t)1048576 - press_raw) - (var2 >> 12)) * 3125;
 8001942:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001946:	2100      	movs	r1, #0
 8001948:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 800194c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 8001950:	eb61 0303 	sbc.w	r3, r1, r3
 8001954:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001958:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800195c:	f04f 0000 	mov.w	r0, #0
 8001960:	f04f 0100 	mov.w	r1, #0
 8001964:	0b10      	lsrs	r0, r2, #12
 8001966:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800196a:	1319      	asrs	r1, r3, #12
 800196c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8001970:	4623      	mov	r3, r4
 8001972:	1a1b      	subs	r3, r3, r0
 8001974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001978:	462b      	mov	r3, r5
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001982:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001986:	4622      	mov	r2, r4
 8001988:	462b      	mov	r3, r5
 800198a:	1891      	adds	r1, r2, r2
 800198c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800198e:	415b      	adcs	r3, r3
 8001990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001992:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001996:	4621      	mov	r1, r4
 8001998:	1851      	adds	r1, r2, r1
 800199a:	6339      	str	r1, [r7, #48]	@ 0x30
 800199c:	4629      	mov	r1, r5
 800199e:	414b      	adcs	r3, r1
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80019ae:	4649      	mov	r1, r9
 80019b0:	018b      	lsls	r3, r1, #6
 80019b2:	4641      	mov	r1, r8
 80019b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b8:	4641      	mov	r1, r8
 80019ba:	018a      	lsls	r2, r1, #6
 80019bc:	4641      	mov	r1, r8
 80019be:	1889      	adds	r1, r1, r2
 80019c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80019c2:	4649      	mov	r1, r9
 80019c4:	eb43 0101 	adc.w	r1, r3, r1
 80019c8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80019d6:	4649      	mov	r1, r9
 80019d8:	008b      	lsls	r3, r1, #2
 80019da:	4641      	mov	r1, r8
 80019dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019e0:	4641      	mov	r1, r8
 80019e2:	008a      	lsls	r2, r1, #2
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	4603      	mov	r3, r0
 80019ea:	4622      	mov	r2, r4
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	460b      	mov	r3, r1
 80019f2:	462a      	mov	r2, r5
 80019f4:	eb42 0303 	adc.w	r3, r2, r3
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a06:	4649      	mov	r1, r9
 8001a08:	008b      	lsls	r3, r1, #2
 8001a0a:	4641      	mov	r1, r8
 8001a0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a10:	4641      	mov	r1, r8
 8001a12:	008a      	lsls	r2, r1, #2
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	189b      	adds	r3, r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	462b      	mov	r3, r5
 8001a22:	460a      	mov	r2, r1
 8001a24:	eb42 0303 	adc.w	r3, r2, r3
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a2e:	e9c7 346c 	strd	r3, r4, [r7, #432]	@ 0x1b0
        if (p < 0x80000000) {
 8001a32:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001a36:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001a3a:	f173 0300 	sbcs.w	r3, r3, #0
 8001a3e:	da19      	bge.n	8001a74 <bmp280_measure+0x6fc>
            p = (p << 1) / ((int64_t)var1);
 8001a40:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001a44:	1891      	adds	r1, r2, r2
 8001a46:	6139      	str	r1, [r7, #16]
 8001a48:	415b      	adcs	r3, r3
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a50:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001a54:	f7ff f8f8 	bl	8000c48 <__aeabi_ldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
 8001a60:	e018      	b.n	8001a94 <bmp280_measure+0x71c>
 8001a62:	bf00      	nop
 8001a64:	20000208 	.word	0x20000208
 8001a68:	20000206 	.word	0x20000206
 8001a6c:	20000220 	.word	0x20000220
 8001a70:	fffffc19 	.word	0xfffffc19
        } else {
            p = (p / (int64_t)var1) * 2;
 8001a74:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001a78:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8001a7c:	f7ff f8e4 	bl	8000c48 <__aeabi_ldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	1891      	adds	r1, r2, r2
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	415b      	adcs	r3, r3
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a90:	e9c7 346c 	strd	r3, r4, [r7, #432]	@ 0x1b0
        }
        var1 = (((int64_t)dig_P9) * ((int64_t)((p >> 3) * (p >> 3)) >> 13)) >> 12;
 8001a94:	4b6b      	ldr	r3, [pc, #428]	@ (8001c44 <bmp280_measure+0x8cc>)
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001aa6:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	f04f 0500 	mov.w	r5, #0
 8001ab2:	08d4      	lsrs	r4, r2, #3
 8001ab4:	ea44 7443 	orr.w	r4, r4, r3, lsl #29
 8001ab8:	10dd      	asrs	r5, r3, #3
 8001aba:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	08d0      	lsrs	r0, r2, #3
 8001ac8:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8001acc:	10d9      	asrs	r1, r3, #3
 8001ace:	fb00 f205 	mul.w	r2, r0, r5
 8001ad2:	fb04 f301 	mul.w	r3, r4, r1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	fba4 1200 	umull	r1, r2, r4, r0
 8001adc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001ae6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001aea:	4413      	add	r3, r2
 8001aec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8001afc:	4621      	mov	r1, r4
 8001afe:	0b4a      	lsrs	r2, r1, #13
 8001b00:	4629      	mov	r1, r5
 8001b02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001b06:	4629      	mov	r1, r5
 8001b08:	134b      	asrs	r3, r1, #13
 8001b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b0e:	4629      	mov	r1, r5
 8001b10:	fb02 f001 	mul.w	r0, r2, r1
 8001b14:	4621      	mov	r1, r4
 8001b16:	fb01 f103 	mul.w	r1, r1, r3
 8001b1a:	4401      	add	r1, r0
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	fba0 2302 	umull	r2, r3, r0, r2
 8001b22:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001b26:	4613      	mov	r3, r2
 8001b28:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001b2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001b30:	18cb      	adds	r3, r1, r3
 8001b32:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001b42:	4621      	mov	r1, r4
 8001b44:	0b0a      	lsrs	r2, r1, #12
 8001b46:	4629      	mov	r1, r5
 8001b48:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	130b      	asrs	r3, r1, #12
 8001b50:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
        var2 = (((int64_t)(p >> 2)) * ((int64_t)dig_P8)) >> 13;
 8001b54:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	0890      	lsrs	r0, r2, #2
 8001b62:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8001b66:	1099      	asrs	r1, r3, #2
 8001b68:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <bmp280_measure+0x8d0>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	17da      	asrs	r2, r3, #31
 8001b72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b76:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b7a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001b7e:	4623      	mov	r3, r4
 8001b80:	fb03 f201 	mul.w	r2, r3, r1
 8001b84:	462b      	mov	r3, r5
 8001b86:	fb00 f303 	mul.w	r3, r0, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b92:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001b96:	460a      	mov	r2, r1
 8001b98:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8001b9c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	0b4a      	lsrs	r2, r1, #13
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	134b      	asrs	r3, r1, #13
 8001bc0:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
        p = (int64_t)((int64_t)p + ((var1 + var2 + dig_P7) >> 4));
 8001bc4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8001bc8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001bcc:	1884      	adds	r4, r0, r2
 8001bce:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8001bd2:	eb41 0303 	adc.w	r3, r1, r3
 8001bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001bda:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <bmp280_measure+0x8d4>)
 8001bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001be6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001be8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001bec:	4623      	mov	r3, r4
 8001bee:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	189b      	adds	r3, r3, r2
 8001bf6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	462a      	mov	r2, r5
 8001bfc:	eb42 0303 	adc.w	r3, r2, r3
 8001c00:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001c0e:	4621      	mov	r1, r4
 8001c10:	090a      	lsrs	r2, r1, #4
 8001c12:	4629      	mov	r1, r5
 8001c14:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001c18:	4629      	mov	r1, r5
 8001c1a:	110b      	asrs	r3, r1, #4
 8001c1c:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8001c20:	1884      	adds	r4, r0, r2
 8001c22:	603c      	str	r4, [r7, #0]
 8001c24:	eb41 0303 	adc.w	r3, r1, r3
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c2e:	e9c7 346c 	strd	r3, r4, [r7, #432]	@ 0x1b0

        _bmp280_pres = (uint32_t)p;
 8001c32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c36:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <bmp280_measure+0x8d8>)
 8001c38:	6013      	str	r3, [r2, #0]
    }
}
 8001c3a:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c44:	20000216 	.word	0x20000216
 8001c48:	20000214 	.word	0x20000214
 8001c4c:	20000212 	.word	0x20000212
 8001c50:	20000220 	.word	0x20000220

08001c54 <HM_10_Init>:

UART_HandleTypeDef *_huart_hm10;
char message_buffer[128];
uint8_t message_index = 0;

void HM_10_Init(UART_HandleTypeDef *huart) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    _huart_hm10 = huart;
 8001c5c:	4a06      	ldr	r2, [pc, #24]	@ (8001c78 <HM_10_Init+0x24>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(_huart_hm10, (uint8_t *)message_buffer, 1);  // Start receiving
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HM_10_Init+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4904      	ldr	r1, [pc, #16]	@ (8001c7c <HM_10_Init+0x28>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 ffd2 	bl	8005c14 <HAL_UART_Receive_IT>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000224 	.word	0x20000224
 8001c7c:	20000228 	.word	0x20000228

08001c80 <HM_10_SendMessage>:

void HM_10_SendMessage(char *msg) {
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b0a5      	sub	sp, #148	@ 0x94
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%s%c", msg, HM_10_MESSAGE_DELIMITER);
 8001c88:	f107 0008 	add.w	r0, r7, #8
 8001c8c:	2321      	movs	r3, #33	@ 0x21
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc4 <HM_10_SendMessage+0x44>)
 8001c94:	2180      	movs	r1, #128	@ 0x80
 8001c96:	f005 fbf9 	bl	800748c <sniprintf>
    HAL_UART_Transmit(_huart_hm10, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HM_10_SendMessage+0x48>)
 8001c9c:	681c      	ldr	r4, [r3, #0]
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fae4 	bl	8000270 <strlen>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	f107 0108 	add.w	r1, r7, #8
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f003 ff23 	bl	8005b00 <HAL_UART_Transmit>
}
 8001cba:	bf00      	nop
 8001cbc:	378c      	adds	r7, #140	@ 0x8c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	080097a0 	.word	0x080097a0
 8001cc8:	20000224 	.word	0x20000224

08001ccc <HM_10_ReceiveHandler>:

void HM_10_Process(void) {
    // This function will be used to handle message reception and processing
}

void HM_10_ReceiveHandler(UART_HandleTypeDef *huart) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == _huart_hm10->Instance) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <HM_10_ReceiveHandler+0x78>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d12c      	bne.n	8001d3c <HM_10_ReceiveHandler+0x70>
        if (message_buffer[message_index] == HM_10_MESSAGE_DELIMITER) {
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HM_10_ReceiveHandler+0x80>)
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	2b21      	cmp	r3, #33	@ 0x21
 8001cee:	d10c      	bne.n	8001d0a <HM_10_ReceiveHandler+0x3e>
            message_buffer[message_index] = '\0';  // Null-terminate the message
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HM_10_ReceiveHandler+0x80>)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]
            HM_10_SendMessage("Received");         // Echo received message (for testing)
 8001cfc:	4814      	ldr	r0, [pc, #80]	@ (8001d50 <HM_10_ReceiveHandler+0x84>)
 8001cfe:	f7ff ffbf 	bl	8001c80 <HM_10_SendMessage>
            message_index = 0;
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e00d      	b.n	8001d26 <HM_10_ReceiveHandler+0x5a>
        } else {
            message_index++;
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001d14:	701a      	strb	r2, [r3, #0]
            if (message_index >= sizeof(message_buffer)) {
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da02      	bge.n	8001d26 <HM_10_ReceiveHandler+0x5a>
                message_index = 0;  // Reset if the message is too long
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(_huart_hm10, (uint8_t *)message_buffer + message_index, 1);  // Continue receiving
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HM_10_ReceiveHandler+0x78>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HM_10_ReceiveHandler+0x7c>)
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HM_10_ReceiveHandler+0x80>)
 8001d32:	4411      	add	r1, r2
 8001d34:	2201      	movs	r2, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 ff6c 	bl	8005c14 <HAL_UART_Receive_IT>
    }
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000224 	.word	0x20000224
 8001d48:	200002a8 	.word	0x200002a8
 8001d4c:	20000228 	.word	0x20000228
 8001d50:	080097a8 	.word	0x080097a8

08001d54 <_write>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN 0 */

// Retarget printf to USART2
int _write(int file, char *ptr, int len) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	4804      	ldr	r0, [pc, #16]	@ (8001d7c <_write+0x28>)
 8001d6c:	f003 fec8 	bl	8005b00 <HAL_UART_Transmit>
    return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000388 	.word	0x20000388

08001d80 <send_to_uart2>:

// Function to send debug information to UART2
int send_to_uart2(const char* format, ...) {
 8001d80:	b40f      	push	{r0, r1, r2, r3}
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b0a2      	sub	sp, #136	@ 0x88
 8001d86:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, format);
 8001d88:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d8c:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001d8e:	f107 0008 	add.w	r0, r7, #8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001d98:	2180      	movs	r1, #128	@ 0x80
 8001d9a:	f005 fc19 	bl	80075d0 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fa64 	bl	8000270 <strlen>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f107 0108 	add.w	r1, r7, #8
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <send_to_uart2+0x4c>)
 8001db6:	f003 fea3 	bl	8005b00 <HAL_UART_Transmit>
    return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3788      	adds	r7, #136	@ 0x88
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dc6:	b004      	add	sp, #16
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000388 	.word	0x20000388

08001dd0 <send_to_bluetooth>:

// Function to send sensor data to Bluetooth
int send_to_bluetooth(const char* format, ...) {
 8001dd0:	b40f      	push	{r0, r1, r2, r3}
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b0a2      	sub	sp, #136	@ 0x88
 8001dd6:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, format);
 8001dd8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ddc:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001dde:	f107 0008 	add.w	r0, r7, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	f005 fbf1 	bl	80075d0 <vsniprintf>
    va_end(args);
    HM_10_SendMessage(buffer);  // Send only to Bluetooth
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff44 	bl	8001c80 <HM_10_SendMessage>
    return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3788      	adds	r7, #136	@ 0x88
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e04:	b004      	add	sp, #16
 8001e06:	4770      	bx	lr

08001e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e0c:	b0b4      	sub	sp, #208	@ 0xd0
 8001e0e:	af06      	add	r7, sp, #24
    // Initialization of the hardware peripherals
    HAL_Init();
 8001e10:	f000 ffe9 	bl	8002de6 <HAL_Init>
    SystemClock_Config();
 8001e14:	f000 fa2a 	bl	800226c <SystemClock_Config>
    MX_GPIO_Init();
 8001e18:	f000 fb1e 	bl	8002458 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001e1c:	f000 fa7c 	bl	8002318 <MX_I2C1_Init>
    MX_USART1_UART_Init();  // HM-10 Bluetooth UART
 8001e20:	f000 faba 	bl	8002398 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();  // Debugging UART
 8001e24:	f000 fae8 	bl	80023f8 <MX_USART2_UART_Init>

    ssd1306_Init();  // OLED Display Initialization
 8001e28:	f000 fba0 	bl	800256c <ssd1306_Init>
    AHT20_Init(&hi2c1);  // AHT20 sensor initialization
 8001e2c:	48a6      	ldr	r0, [pc, #664]	@ (80020c8 <main+0x2c0>)
 8001e2e:	f7ff f8d3 	bl	8000fd8 <AHT20_Init>
    HM_10_Init(&huart1);  // HM-10 Bluetooth module initialization
 8001e32:	48a6      	ldr	r0, [pc, #664]	@ (80020cc <main+0x2c4>)
 8001e34:	f7ff ff0e 	bl	8001c54 <HM_10_Init>

    uint8_t bmp280_initialized = 0;  // Flag to track BMP280 initialization
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

    // Initial BMP280 initialization
    if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(0x76 << 1), 1, 10) == HAL_OK) {
 8001e3e:	230a      	movs	r3, #10
 8001e40:	2201      	movs	r2, #1
 8001e42:	21ec      	movs	r1, #236	@ 0xec
 8001e44:	48a0      	ldr	r0, [pc, #640]	@ (80020c8 <main+0x2c0>)
 8001e46:	f001 ffa7 	bl	8003d98 <HAL_I2C_IsDeviceReady>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10f      	bne.n	8001e70 <main+0x68>
        if (!bmp280_init(&hi2c1)) {
 8001e50:	489d      	ldr	r0, [pc, #628]	@ (80020c8 <main+0x2c0>)
 8001e52:	f7ff fa6d 	bl	8001330 <bmp280_init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d103      	bne.n	8001e64 <main+0x5c>
            send_to_uart2("BMP280 initialization failed.\r\n");
 8001e5c:	489c      	ldr	r0, [pc, #624]	@ (80020d0 <main+0x2c8>)
 8001e5e:	f7ff ff8f 	bl	8001d80 <send_to_uart2>
 8001e62:	e005      	b.n	8001e70 <main+0x68>
        } else {
            bmp280_initialized = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            send_to_uart2("BMP280 initialized successfully.\r\n");
 8001e6a:	489a      	ldr	r0, [pc, #616]	@ (80020d4 <main+0x2cc>)
 8001e6c:	f7ff ff88 	bl	8001d80 <send_to_uart2>
        }
    }

    // I2C scanner
    I2C_Scanner(); // Scan the I2C bus for devices
 8001e70:	f000 f9cc 	bl	800220c <I2C_Scanner>

    char text[32] = {0};
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e7a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	619a      	str	r2, [r3, #24]

    while (1)
    {
        float temperature = -1.0f, humidity = -1.0f, pressure = -1.0f;
 8001e8e:	4b92      	ldr	r3, [pc, #584]	@ (80020d8 <main+0x2d0>)
 8001e90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e94:	4b90      	ldr	r3, [pc, #576]	@ (80020d8 <main+0x2d0>)
 8001e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e9a:	4b8f      	ldr	r3, [pc, #572]	@ (80020d8 <main+0x2d0>)
 8001e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

        // Read temperature and humidity from AHT20 sensor
        temperature = AHT20_ReadTemperature();
 8001ea0:	f7ff f8c0 	bl	8001024 <AHT20_ReadTemperature>
 8001ea4:	ed87 0a2c 	vstr	s0, [r7, #176]	@ 0xb0
        humidity = AHT20_ReadHumidity();
 8001ea8:	f7ff f91a 	bl	80010e0 <AHT20_ReadHumidity>
 8001eac:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac

        // Check and reinitialize BMP280 if necessary
        if (!bmp280_initialized) {
 8001eb0:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d118      	bne.n	8001eea <main+0xe2>
            if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(0x76 << 1), 1, 10) == HAL_OK) {
 8001eb8:	230a      	movs	r3, #10
 8001eba:	2201      	movs	r2, #1
 8001ebc:	21ec      	movs	r1, #236	@ 0xec
 8001ebe:	4882      	ldr	r0, [pc, #520]	@ (80020c8 <main+0x2c0>)
 8001ec0:	f001 ff6a 	bl	8003d98 <HAL_I2C_IsDeviceReady>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <main+0xe2>
                if (!bmp280_init(&hi2c1)) {
 8001eca:	487f      	ldr	r0, [pc, #508]	@ (80020c8 <main+0x2c0>)
 8001ecc:	f7ff fa30 	bl	8001330 <bmp280_init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <main+0xd6>
                    send_to_uart2("BMP280 re-initialization failed.\r\n");
 8001ed6:	4881      	ldr	r0, [pc, #516]	@ (80020dc <main+0x2d4>)
 8001ed8:	f7ff ff52 	bl	8001d80 <send_to_uart2>
 8001edc:	e005      	b.n	8001eea <main+0xe2>
                } else {
                    bmp280_initialized = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                    send_to_uart2("BMP280 re-initialized successfully.\r\n");
 8001ee4:	487e      	ldr	r0, [pc, #504]	@ (80020e0 <main+0x2d8>)
 8001ee6:	f7ff ff4b 	bl	8001d80 <send_to_uart2>
                }
            }
        }

        // Read BMP280 pressure if initialized
        if (bmp280_initialized) {
 8001eea:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d014      	beq.n	8001f1c <main+0x114>
            bmp280_measure();
 8001ef2:	f7ff fa41 	bl	8001378 <bmp280_measure>
            pressure = bmp280_getpressure() / 100.0;  // Convert to hPa
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	@ (80020e4 <main+0x2dc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb02 	bl	8000504 <__aeabi_ui2d>
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b78      	ldr	r3, [pc, #480]	@ (80020e8 <main+0x2e0>)
 8001f06:	f7fe fca1 	bl	800084c <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f7fe fe49 	bl	8000ba8 <__aeabi_d2f>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        }

        // Convert temperature to Fahrenheit
        float temperature_f = (temperature * 9.0f / 5.0f) + 32.0f;
 8001f1c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001f20:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001f24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f28:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f30:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80020ec <main+0x2e4>
 8001f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f38:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4

        // UART2 debug output
        send_to_uart2("===== SENSOR READINGS =====\r\n");
 8001f3c:	486c      	ldr	r0, [pc, #432]	@ (80020f0 <main+0x2e8>)
 8001f3e:	f7ff ff1f 	bl	8001d80 <send_to_uart2>
        if (temperature != -999.0f && humidity != -999.0f) {
 8001f42:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001f46:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80020f4 <main+0x2ec>
 8001f4a:	eef4 7a47 	vcmp.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	d01b      	beq.n	8001f8c <main+0x184>
 8001f54:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001f58:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80020f4 <main+0x2ec>
 8001f5c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d012      	beq.n	8001f8c <main+0x184>
            send_to_uart2("AHT20: Temperature: %.2f F\r\n", temperature_f);
 8001f66:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001f6a:	f7fe faed 	bl	8000548 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4861      	ldr	r0, [pc, #388]	@ (80020f8 <main+0x2f0>)
 8001f74:	f7ff ff04 	bl	8001d80 <send_to_uart2>
            send_to_uart2("AHT20: Humidity: %.2f %%\r\n", humidity);
 8001f78:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001f7c:	f7fe fae4 	bl	8000548 <__aeabi_f2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	485d      	ldr	r0, [pc, #372]	@ (80020fc <main+0x2f4>)
 8001f86:	f7ff fefb 	bl	8001d80 <send_to_uart2>
 8001f8a:	e008      	b.n	8001f9e <main+0x196>
        } else {
            send_to_uart2("AHT20: Not detected or failed.\r\n");
 8001f8c:	485c      	ldr	r0, [pc, #368]	@ (8002100 <main+0x2f8>)
 8001f8e:	f7ff fef7 	bl	8001d80 <send_to_uart2>
            temperature = -1.0f;
 8001f92:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <main+0x2d0>)
 8001f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            humidity = -1.0f;
 8001f98:	4b4f      	ldr	r3, [pc, #316]	@ (80020d8 <main+0x2d0>)
 8001f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        }

        if (bmp280_initialized && pressure != -999.0f) {
 8001f9e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d012      	beq.n	8001fcc <main+0x1c4>
 8001fa6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001faa:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80020f4 <main+0x2ec>
 8001fae:	eef4 7a47 	vcmp.f32	s15, s14
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	d009      	beq.n	8001fcc <main+0x1c4>
            send_to_uart2("BMP280: Pressure: %.2f hPa\r\n", pressure);
 8001fb8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001fbc:	f7fe fac4 	bl	8000548 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	484f      	ldr	r0, [pc, #316]	@ (8002104 <main+0x2fc>)
 8001fc6:	f7ff fedb 	bl	8001d80 <send_to_uart2>
 8001fca:	e005      	b.n	8001fd8 <main+0x1d0>
        } else {
            send_to_uart2("BMP280: Not detected or failed.\r\n");
 8001fcc:	484e      	ldr	r0, [pc, #312]	@ (8002108 <main+0x300>)
 8001fce:	f7ff fed7 	bl	8001d80 <send_to_uart2>
            pressure = -1.0f;
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <main+0x2d0>)
 8001fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        }
        send_to_uart2("===========================\r\n\r\n");
 8001fd8:	484c      	ldr	r0, [pc, #304]	@ (800210c <main+0x304>)
 8001fda:	f7ff fed1 	bl	8001d80 <send_to_uart2>

        // Update OLED display (unchanged)
        ssd1306_Fill(Black);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 fb2e 	bl	8002640 <ssd1306_Fill>
        ssd1306_SetCursor(1, 1);
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f000 fc78 	bl	80028dc <ssd1306_SetCursor>
        ssd1306_WriteString("Weather Station", Font_6x8, White);
 8001fec:	4a48      	ldr	r2, [pc, #288]	@ (8002110 <main+0x308>)
 8001fee:	2301      	movs	r3, #1
 8001ff0:	ca06      	ldmia	r2, {r1, r2}
 8001ff2:	4848      	ldr	r0, [pc, #288]	@ (8002114 <main+0x30c>)
 8001ff4:	f000 fc4c 	bl	8002890 <ssd1306_WriteString>

        // Display temperature and humidity on OLED
        if (temperature != -1.0f && humidity != -1.0f) {
 8001ff8:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001ffc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002000:	eef4 7a47 	vcmp.f32	s15, s14
 8002004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002008:	d03b      	beq.n	8002082 <main+0x27a>
 800200a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800200e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002012:	eef4 7a47 	vcmp.f32	s15, s14
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	d032      	beq.n	8002082 <main+0x27a>
            snprintf(text, sizeof(text), "Temp: %.1f F", temperature_f);  // Fahrenheit
 800201c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002020:	f7fe fa92 	bl	8000548 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 800202c:	e9cd 2300 	strd	r2, r3, [sp]
 8002030:	4a39      	ldr	r2, [pc, #228]	@ (8002118 <main+0x310>)
 8002032:	2120      	movs	r1, #32
 8002034:	f005 fa2a 	bl	800748c <sniprintf>
            ssd1306_SetCursor(1, 15);
 8002038:	210f      	movs	r1, #15
 800203a:	2001      	movs	r0, #1
 800203c:	f000 fc4e 	bl	80028dc <ssd1306_SetCursor>
            ssd1306_WriteString(text, Font_6x8, White);
 8002040:	4a33      	ldr	r2, [pc, #204]	@ (8002110 <main+0x308>)
 8002042:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8002046:	2301      	movs	r3, #1
 8002048:	ca06      	ldmia	r2, {r1, r2}
 800204a:	f000 fc21 	bl	8002890 <ssd1306_WriteString>

            snprintf(text, sizeof(text), "Humidity: %.2f %%", humidity);
 800204e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002052:	f7fe fa79 	bl	8000548 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 800205e:	e9cd 2300 	strd	r2, r3, [sp]
 8002062:	4a2e      	ldr	r2, [pc, #184]	@ (800211c <main+0x314>)
 8002064:	2120      	movs	r1, #32
 8002066:	f005 fa11 	bl	800748c <sniprintf>
            ssd1306_SetCursor(1, 30);
 800206a:	211e      	movs	r1, #30
 800206c:	2001      	movs	r0, #1
 800206e:	f000 fc35 	bl	80028dc <ssd1306_SetCursor>
            ssd1306_WriteString(text, Font_6x8, White);
 8002072:	4a27      	ldr	r2, [pc, #156]	@ (8002110 <main+0x308>)
 8002074:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8002078:	2301      	movs	r3, #1
 800207a:	ca06      	ldmia	r2, {r1, r2}
 800207c:	f000 fc08 	bl	8002890 <ssd1306_WriteString>
 8002080:	e009      	b.n	8002096 <main+0x28e>
        } else {
            ssd1306_SetCursor(1, 15);
 8002082:	210f      	movs	r1, #15
 8002084:	2001      	movs	r0, #1
 8002086:	f000 fc29 	bl	80028dc <ssd1306_SetCursor>
            ssd1306_WriteString("AHT20: N/A", Font_6x8, White);
 800208a:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <main+0x308>)
 800208c:	2301      	movs	r3, #1
 800208e:	ca06      	ldmia	r2, {r1, r2}
 8002090:	4823      	ldr	r0, [pc, #140]	@ (8002120 <main+0x318>)
 8002092:	f000 fbfd 	bl	8002890 <ssd1306_WriteString>
        }

        // Display pressure on OLED
        if (pressure != -1.0f) {
 8002096:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800209a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800209e:	eef4 7a47 	vcmp.f32	s15, s14
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	d03f      	beq.n	8002128 <main+0x320>
            snprintf(text, sizeof(text), "Pres: %.2f hPa", pressure);
 80020a8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80020b8:	e9cd 2300 	strd	r2, r3, [sp]
 80020bc:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <main+0x31c>)
 80020be:	2120      	movs	r1, #32
 80020c0:	f005 f9e4 	bl	800748c <sniprintf>
 80020c4:	e037      	b.n	8002136 <main+0x32e>
 80020c6:	bf00      	nop
 80020c8:	200002ac 	.word	0x200002ac
 80020cc:	20000300 	.word	0x20000300
 80020d0:	080097b4 	.word	0x080097b4
 80020d4:	080097d4 	.word	0x080097d4
 80020d8:	bf800000 	.word	0xbf800000
 80020dc:	080097f8 	.word	0x080097f8
 80020e0:	0800981c 	.word	0x0800981c
 80020e4:	20000220 	.word	0x20000220
 80020e8:	40590000 	.word	0x40590000
 80020ec:	42000000 	.word	0x42000000
 80020f0:	08009844 	.word	0x08009844
 80020f4:	c479c000 	.word	0xc479c000
 80020f8:	08009864 	.word	0x08009864
 80020fc:	08009884 	.word	0x08009884
 8002100:	080098a0 	.word	0x080098a0
 8002104:	080098c4 	.word	0x080098c4
 8002108:	080098e4 	.word	0x080098e4
 800210c:	08009908 	.word	0x08009908
 8002110:	20000000 	.word	0x20000000
 8002114:	08009928 	.word	0x08009928
 8002118:	08009938 	.word	0x08009938
 800211c:	08009948 	.word	0x08009948
 8002120:	0800995c 	.word	0x0800995c
 8002124:	08009968 	.word	0x08009968
        } else {
            snprintf(text, sizeof(text), "Pres: N/A");
 8002128:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800212c:	4a29      	ldr	r2, [pc, #164]	@ (80021d4 <main+0x3cc>)
 800212e:	2120      	movs	r1, #32
 8002130:	4618      	mov	r0, r3
 8002132:	f005 f9ab 	bl	800748c <sniprintf>
        }
        ssd1306_SetCursor(1, 45);
 8002136:	212d      	movs	r1, #45	@ 0x2d
 8002138:	2001      	movs	r0, #1
 800213a:	f000 fbcf 	bl	80028dc <ssd1306_SetCursor>
        ssd1306_WriteString(text, Font_6x8, White);
 800213e:	4a26      	ldr	r2, [pc, #152]	@ (80021d8 <main+0x3d0>)
 8002140:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8002144:	2301      	movs	r3, #1
 8002146:	ca06      	ldmia	r2, {r1, r2}
 8002148:	f000 fba2 	bl	8002890 <ssd1306_WriteString>

        // Update the OLED screen
        ssd1306_UpdateScreen();
 800214c:	f000 fa9c 	bl	8002688 <ssd1306_UpdateScreen>

        // Send only the simplified sensor data over Bluetooth
        if (temperature != -999.0f && humidity != -999.0f && pressure != -999.0f) {
 8002150:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002154:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80021dc <main+0x3d4>
 8002158:	eef4 7a47 	vcmp.f32	s15, s14
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	d032      	beq.n	80021c8 <main+0x3c0>
 8002162:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002166:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80021dc <main+0x3d4>
 800216a:	eef4 7a47 	vcmp.f32	s15, s14
 800216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002172:	d029      	beq.n	80021c8 <main+0x3c0>
 8002174:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002178:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80021dc <main+0x3d4>
 800217c:	eef4 7a47 	vcmp.f32	s15, s14
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	d020      	beq.n	80021c8 <main+0x3c0>
            char bluetoothMessage[128];
            // Format only the sensor data for Bluetooth transmission
            snprintf(bluetoothMessage, sizeof(bluetoothMessage), "Temp:%.2f,Humidity:%.2f,Pressure:%.2f", temperature_f, humidity, pressure);
 8002186:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800218a:	f7fe f9dd 	bl	8000548 <__aeabi_f2d>
 800218e:	4604      	mov	r4, r0
 8002190:	460d      	mov	r5, r1
 8002192:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002196:	f7fe f9d7 	bl	8000548 <__aeabi_f2d>
 800219a:	4680      	mov	r8, r0
 800219c:	4689      	mov	r9, r1
 800219e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80021a2:	f7fe f9d1 	bl	8000548 <__aeabi_f2d>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	1d38      	adds	r0, r7, #4
 80021ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80021b4:	e9cd 4500 	strd	r4, r5, [sp]
 80021b8:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <main+0x3d8>)
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	f005 f966 	bl	800748c <sniprintf>
            send_to_bluetooth(bluetoothMessage);  // Send the structured data via Bluetooth only
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fe04 	bl	8001dd0 <send_to_bluetooth>
        }

        // Delay before the next reading
        HAL_Delay(2000);
 80021c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80021cc:	f000 fe80 	bl	8002ed0 <HAL_Delay>
    {
 80021d0:	e65d      	b.n	8001e8e <main+0x86>
 80021d2:	bf00      	nop
 80021d4:	08009978 	.word	0x08009978
 80021d8:	20000000 	.word	0x20000000
 80021dc:	c479c000 	.word	0xc479c000
 80021e0:	08009984 	.word	0x08009984

080021e4 <HAL_UART_RxCpltCallback>:
    }
}

// UART receive complete callback for HM-10
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart1.Instance) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_UART_RxCpltCallback+0x24>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d102      	bne.n	80021fe <HAL_UART_RxCpltCallback+0x1a>
        HM_10_ReceiveHandler(huart);  // Process Bluetooth messages
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fd67 	bl	8001ccc <HM_10_ReceiveHandler>
    }
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000300 	.word	0x20000300

0800220c <I2C_Scanner>:

void I2C_Scanner(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
    send_to_uart2("===== I2C SCAN START =====\r\n");
 8002212:	4812      	ldr	r0, [pc, #72]	@ (800225c <I2C_Scanner+0x50>)
 8002214:	f7ff fdb4 	bl	8001d80 <send_to_uart2>
    for(uint8_t i = 1; i < 128; i++) {
 8002218:	2301      	movs	r3, #1
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	e013      	b.n	8002246 <I2C_Scanner+0x3a>
        if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 1, 10) == HAL_OK) {
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	b29b      	uxth	r3, r3
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	b299      	uxth	r1, r3
 8002226:	230a      	movs	r3, #10
 8002228:	2201      	movs	r2, #1
 800222a:	480d      	ldr	r0, [pc, #52]	@ (8002260 <I2C_Scanner+0x54>)
 800222c:	f001 fdb4 	bl	8003d98 <HAL_I2C_IsDeviceReady>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <I2C_Scanner+0x34>
            send_to_uart2("I2C: Device found at 0x%02X\r\n", i);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	4619      	mov	r1, r3
 800223a:	480a      	ldr	r0, [pc, #40]	@ (8002264 <I2C_Scanner+0x58>)
 800223c:	f7ff fda0 	bl	8001d80 <send_to_uart2>
    for(uint8_t i = 1; i < 128; i++) {
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	3301      	adds	r3, #1
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	dae7      	bge.n	800221e <I2C_Scanner+0x12>
        }
    }
    send_to_uart2("===== I2C SCAN END =====\r\n\r\n");
 800224e:	4806      	ldr	r0, [pc, #24]	@ (8002268 <I2C_Scanner+0x5c>)
 8002250:	f7ff fd96 	bl	8001d80 <send_to_uart2>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	080099ac 	.word	0x080099ac
 8002260:	200002ac 	.word	0x200002ac
 8002264:	080099cc 	.word	0x080099cc
 8002268:	080099ec 	.word	0x080099ec

0800226c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b096      	sub	sp, #88	@ 0x58
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	2244      	movs	r2, #68	@ 0x44
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f005 f9d0 	bl	8007620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	463b      	mov	r3, r7
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800228e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002292:	f002 fa61 	bl	8004758 <HAL_PWREx_ControlVoltageScaling>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800229c:	f000 f926 	bl	80024ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80022a0:	2314      	movs	r3, #20
 80022a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022a4:	2301      	movs	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022b0:	2360      	movs	r3, #96	@ 0x60
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b4:	2302      	movs	r3, #2
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022b8:	2301      	movs	r3, #1
 80022ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022bc:	2301      	movs	r3, #1
 80022be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80022c0:	2310      	movs	r3, #16
 80022c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022c4:	2307      	movs	r3, #7
 80022c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022cc:	2302      	movs	r3, #2
 80022ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fa95 	bl	8004804 <HAL_RCC_OscConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80022e0:	f000 f904 	bl	80024ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e4:	230f      	movs	r3, #15
 80022e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e8:	2303      	movs	r3, #3
 80022ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fe95 	bl	800502c <HAL_RCC_ClockConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002308:	f000 f8f0 	bl	80024ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800230c:	f003 faa8 	bl	8005860 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002310:	bf00      	nop
 8002312:	3758      	adds	r7, #88	@ 0x58
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <MX_I2C1_Init+0x74>)
 800231e:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <MX_I2C1_Init+0x78>)
 8002320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <MX_I2C1_Init+0x74>)
 8002324:	4a1b      	ldr	r2, [pc, #108]	@ (8002394 <MX_I2C1_Init+0x7c>)
 8002326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002328:	4b18      	ldr	r3, [pc, #96]	@ (800238c <MX_I2C1_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800232e:	4b17      	ldr	r3, [pc, #92]	@ (800238c <MX_I2C1_Init+0x74>)
 8002330:	2201      	movs	r2, #1
 8002332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <MX_I2C1_Init+0x74>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <MX_I2C1_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <MX_I2C1_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <MX_I2C1_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <MX_I2C1_Init+0x74>)
 800234e:	2200      	movs	r2, #0
 8002350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002352:	480e      	ldr	r0, [pc, #56]	@ (800238c <MX_I2C1_Init+0x74>)
 8002354:	f001 f848 	bl	80033e8 <HAL_I2C_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800235e:	f000 f8c5 	bl	80024ec <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002362:	2100      	movs	r1, #0
 8002364:	4809      	ldr	r0, [pc, #36]	@ (800238c <MX_I2C1_Init+0x74>)
 8002366:	f002 f951 	bl	800460c <HAL_I2CEx_ConfigAnalogFilter>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002370:	f000 f8bc 	bl	80024ec <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002374:	2100      	movs	r1, #0
 8002376:	4805      	ldr	r0, [pc, #20]	@ (800238c <MX_I2C1_Init+0x74>)
 8002378:	f002 f993 	bl	80046a2 <HAL_I2CEx_ConfigDigitalFilter>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002382:	f000 f8b3 	bl	80024ec <Error_Handler>
  }
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200002ac 	.word	0x200002ac
 8002390:	40005400 	.word	0x40005400
 8002394:	00707cbb 	.word	0x00707cbb

08002398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function (for HM-10 Bluetooth)
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 800239e:	4a15      	ldr	r2, [pc, #84]	@ (80023f4 <MX_USART1_UART_Init+0x5c>)
 80023a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023a2:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023be:	220c      	movs	r2, #12
 80023c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <MX_USART1_UART_Init+0x58>)
 80023dc:	f003 fb42 	bl	8005a64 <HAL_UART_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023e6:	f000 f881 	bl	80024ec <Error_Handler>
  }
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000300 	.word	0x20000300
 80023f4:	40013800 	.word	0x40013800

080023f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 80023fe:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <MX_USART2_UART_Init+0x5c>)
 8002400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 8002404:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800240a:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 800241e:	220c      	movs	r2, #12
 8002420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <MX_USART2_UART_Init+0x58>)
 800243c:	f003 fb12 	bl	8005a64 <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002446:	f000 f851 	bl	80024ec <Error_Handler>
  }
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000388 	.word	0x20000388
 8002454:	40004400 	.word	0x40004400

08002458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246e:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800247a:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	4b17      	ldr	r3, [pc, #92]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	4a10      	ldr	r2, [pc, #64]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <MX_GPIO_Init+0x8c>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2108      	movs	r1, #8
 80024ba:	480b      	ldr	r0, [pc, #44]	@ (80024e8 <MX_GPIO_Init+0x90>)
 80024bc:	f000 ff7c 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80024c0:	2308      	movs	r3, #8
 80024c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4619      	mov	r1, r3
 80024d6:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <MX_GPIO_Init+0x90>)
 80024d8:	f000 fe04 	bl	80030e4 <HAL_GPIO_Init>
}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	48000400 	.word	0x48000400

080024ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f0:	b672      	cpsid	i
}
 80024f2:	bf00      	nop
  __disable_irq();
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <Error_Handler+0x8>

080024f8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af04      	add	r7, sp, #16
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	2301      	movs	r3, #1
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	1dfb      	adds	r3, r7, #7
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2301      	movs	r3, #1
 8002522:	2200      	movs	r2, #0
 8002524:	217a      	movs	r1, #122	@ 0x7a
 8002526:	4803      	ldr	r0, [pc, #12]	@ (8002534 <ssd1306_WriteCommand+0x2c>)
 8002528:	f001 fa08 	bl	800393c <HAL_I2C_Mem_Write>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200002ac 	.word	0x200002ac

08002538 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af04      	add	r7, sp, #16
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	f04f 32ff 	mov.w	r2, #4294967295
 800254a:	9202      	str	r2, [sp, #8]
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2301      	movs	r3, #1
 8002554:	2240      	movs	r2, #64	@ 0x40
 8002556:	217a      	movs	r1, #122	@ 0x7a
 8002558:	4803      	ldr	r0, [pc, #12]	@ (8002568 <ssd1306_WriteData+0x30>)
 800255a:	f001 f9ef 	bl	800393c <HAL_I2C_Mem_Write>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200002ac 	.word	0x200002ac

0800256c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002570:	f7ff ffc2 	bl	80024f8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002574:	2064      	movs	r0, #100	@ 0x64
 8002576:	f000 fcab 	bl	8002ed0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800257a:	2000      	movs	r0, #0
 800257c:	f000 f9da 	bl	8002934 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002580:	2020      	movs	r0, #32
 8002582:	f7ff ffc1 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff ffbe 	bl	8002508 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800258c:	20b0      	movs	r0, #176	@ 0xb0
 800258e:	f7ff ffbb 	bl	8002508 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002592:	20c8      	movs	r0, #200	@ 0xc8
 8002594:	f7ff ffb8 	bl	8002508 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002598:	2000      	movs	r0, #0
 800259a:	f7ff ffb5 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800259e:	2010      	movs	r0, #16
 80025a0:	f7ff ffb2 	bl	8002508 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80025a4:	2040      	movs	r0, #64	@ 0x40
 80025a6:	f7ff ffaf 	bl	8002508 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80025aa:	20ff      	movs	r0, #255	@ 0xff
 80025ac:	f000 f9ae 	bl	800290c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80025b0:	20a1      	movs	r0, #161	@ 0xa1
 80025b2:	f7ff ffa9 	bl	8002508 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80025b6:	20a6      	movs	r0, #166	@ 0xa6
 80025b8:	f7ff ffa6 	bl	8002508 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80025bc:	20a8      	movs	r0, #168	@ 0xa8
 80025be:	f7ff ffa3 	bl	8002508 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80025c2:	203f      	movs	r0, #63	@ 0x3f
 80025c4:	f7ff ffa0 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025c8:	20a4      	movs	r0, #164	@ 0xa4
 80025ca:	f7ff ff9d 	bl	8002508 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80025ce:	20d3      	movs	r0, #211	@ 0xd3
 80025d0:	f7ff ff9a 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff ff97 	bl	8002508 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80025da:	20d5      	movs	r0, #213	@ 0xd5
 80025dc:	f7ff ff94 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80025e0:	20f0      	movs	r0, #240	@ 0xf0
 80025e2:	f7ff ff91 	bl	8002508 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80025e6:	20d9      	movs	r0, #217	@ 0xd9
 80025e8:	f7ff ff8e 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80025ec:	2022      	movs	r0, #34	@ 0x22
 80025ee:	f7ff ff8b 	bl	8002508 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80025f2:	20da      	movs	r0, #218	@ 0xda
 80025f4:	f7ff ff88 	bl	8002508 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80025f8:	2012      	movs	r0, #18
 80025fa:	f7ff ff85 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80025fe:	20db      	movs	r0, #219	@ 0xdb
 8002600:	f7ff ff82 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002604:	2020      	movs	r0, #32
 8002606:	f7ff ff7f 	bl	8002508 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800260a:	208d      	movs	r0, #141	@ 0x8d
 800260c:	f7ff ff7c 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002610:	2014      	movs	r0, #20
 8002612:	f7ff ff79 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002616:	2001      	movs	r0, #1
 8002618:	f000 f98c 	bl	8002934 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800261c:	2000      	movs	r0, #0
 800261e:	f000 f80f 	bl	8002640 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002622:	f000 f831 	bl	8002688 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002626:	4b05      	ldr	r3, [pc, #20]	@ (800263c <ssd1306_Init+0xd0>)
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <ssd1306_Init+0xd0>)
 800262e:	2200      	movs	r2, #0
 8002630:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002632:	4b02      	ldr	r3, [pc, #8]	@ (800263c <ssd1306_Init+0xd0>)
 8002634:	2201      	movs	r2, #1
 8002636:	711a      	strb	r2, [r3, #4]
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000810 	.word	0x20000810

08002640 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e00d      	b.n	800266c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <ssd1306_Fill+0x1a>
 8002656:	2100      	movs	r1, #0
 8002658:	e000      	b.n	800265c <ssd1306_Fill+0x1c>
 800265a:	21ff      	movs	r1, #255	@ 0xff
 800265c:	4a09      	ldr	r2, [pc, #36]	@ (8002684 <ssd1306_Fill+0x44>)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	460a      	mov	r2, r1
 8002664:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3301      	adds	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002672:	d3ed      	bcc.n	8002650 <ssd1306_Fill+0x10>
    }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000410 	.word	0x20000410

08002688 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800268e:	2300      	movs	r3, #0
 8002690:	71fb      	strb	r3, [r7, #7]
 8002692:	e016      	b.n	80026c2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	3b50      	subs	r3, #80	@ 0x50
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff34 	bl	8002508 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff ff31 	bl	8002508 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80026a6:	2010      	movs	r0, #16
 80026a8:	f7ff ff2e 	bl	8002508 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <ssd1306_UpdateScreen+0x4c>)
 80026b2:	4413      	add	r3, r2
 80026b4:	2180      	movs	r1, #128	@ 0x80
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff3e 	bl	8002538 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	3301      	adds	r3, #1
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	d9e5      	bls.n	8002694 <ssd1306_UpdateScreen+0xc>
    }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000410 	.word	0x20000410

080026d8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
 80026e2:	460b      	mov	r3, r1
 80026e4:	71bb      	strb	r3, [r7, #6]
 80026e6:	4613      	mov	r3, r2
 80026e8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	db3d      	blt.n	800276e <ssd1306_DrawPixel+0x96>
 80026f2:	79bb      	ldrb	r3, [r7, #6]
 80026f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026f6:	d83a      	bhi.n	800276e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80026f8:	797b      	ldrb	r3, [r7, #5]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d11a      	bne.n	8002734 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80026fe:	79fa      	ldrb	r2, [r7, #7]
 8002700:	79bb      	ldrb	r3, [r7, #6]
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	b2d8      	uxtb	r0, r3
 8002706:	4603      	mov	r3, r0
 8002708:	01db      	lsls	r3, r3, #7
 800270a:	4413      	add	r3, r2
 800270c:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <ssd1306_DrawPixel+0xa4>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	b25a      	sxtb	r2, r3
 8002712:	79bb      	ldrb	r3, [r7, #6]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	b25b      	sxtb	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b259      	sxtb	r1, r3
 8002724:	79fa      	ldrb	r2, [r7, #7]
 8002726:	4603      	mov	r3, r0
 8002728:	01db      	lsls	r3, r3, #7
 800272a:	4413      	add	r3, r2
 800272c:	b2c9      	uxtb	r1, r1
 800272e:	4a13      	ldr	r2, [pc, #76]	@ (800277c <ssd1306_DrawPixel+0xa4>)
 8002730:	54d1      	strb	r1, [r2, r3]
 8002732:	e01d      	b.n	8002770 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002734:	79fa      	ldrb	r2, [r7, #7]
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	b2d8      	uxtb	r0, r3
 800273c:	4603      	mov	r3, r0
 800273e:	01db      	lsls	r3, r3, #7
 8002740:	4413      	add	r3, r2
 8002742:	4a0e      	ldr	r2, [pc, #56]	@ (800277c <ssd1306_DrawPixel+0xa4>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	b25a      	sxtb	r2, r3
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	b25b      	sxtb	r3, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	b25b      	sxtb	r3, r3
 800275a:	4013      	ands	r3, r2
 800275c:	b259      	sxtb	r1, r3
 800275e:	79fa      	ldrb	r2, [r7, #7]
 8002760:	4603      	mov	r3, r0
 8002762:	01db      	lsls	r3, r3, #7
 8002764:	4413      	add	r3, r2
 8002766:	b2c9      	uxtb	r1, r1
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <ssd1306_DrawPixel+0xa4>)
 800276a:	54d1      	strb	r1, [r2, r3]
 800276c:	e000      	b.n	8002770 <ssd1306_DrawPixel+0x98>
        return;
 800276e:	bf00      	nop
    }
}
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000410 	.word	0x20000410

08002780 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b089      	sub	sp, #36	@ 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	4604      	mov	r4, r0
 8002788:	1d38      	adds	r0, r7, #4
 800278a:	e880 0006 	stmia.w	r0, {r1, r2}
 800278e:	461a      	mov	r2, r3
 8002790:	4623      	mov	r3, r4
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	4613      	mov	r3, r2
 8002796:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b1f      	cmp	r3, #31
 800279c:	d902      	bls.n	80027a4 <ssd1306_WriteChar+0x24>
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80027a2:	d901      	bls.n	80027a8 <ssd1306_WriteChar+0x28>
        return 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e06c      	b.n	8002882 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027a8:	4b38      	ldr	r3, [pc, #224]	@ (800288c <ssd1306_WriteChar+0x10c>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	793b      	ldrb	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	2b80      	cmp	r3, #128	@ 0x80
 80027b4:	dc06      	bgt.n	80027c4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80027b6:	4b35      	ldr	r3, [pc, #212]	@ (800288c <ssd1306_WriteChar+0x10c>)
 80027b8:	885b      	ldrh	r3, [r3, #2]
 80027ba:	461a      	mov	r2, r3
 80027bc:	797b      	ldrb	r3, [r7, #5]
 80027be:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	dd01      	ble.n	80027c8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e05c      	b.n	8002882 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	e04c      	b.n	8002868 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	3b20      	subs	r3, #32
 80027d4:	7979      	ldrb	r1, [r7, #5]
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	440b      	add	r3, r1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e034      	b.n	8002858 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <ssd1306_WriteChar+0x10c>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4413      	add	r3, r2
 800280a:	b2d8      	uxtb	r0, r3
 800280c:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <ssd1306_WriteChar+0x10c>)
 800280e:	885b      	ldrh	r3, [r3, #2]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4413      	add	r3, r2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	7bba      	ldrb	r2, [r7, #14]
 800281c:	4619      	mov	r1, r3
 800281e:	f7ff ff5b 	bl	80026d8 <ssd1306_DrawPixel>
 8002822:	e016      	b.n	8002852 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002824:	4b19      	ldr	r3, [pc, #100]	@ (800288c <ssd1306_WriteChar+0x10c>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4413      	add	r3, r2
 8002830:	b2d8      	uxtb	r0, r3
 8002832:	4b16      	ldr	r3, [pc, #88]	@ (800288c <ssd1306_WriteChar+0x10c>)
 8002834:	885b      	ldrh	r3, [r3, #2]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4413      	add	r3, r2
 800283e:	b2d9      	uxtb	r1, r3
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	f7ff ff43 	bl	80026d8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3301      	adds	r3, #1
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	793b      	ldrb	r3, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4293      	cmp	r3, r2
 8002860:	d3c5      	bcc.n	80027ee <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	797b      	ldrb	r3, [r7, #5]
 800286a:	461a      	mov	r2, r3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4293      	cmp	r3, r2
 8002870:	d3ad      	bcc.n	80027ce <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <ssd1306_WriteChar+0x10c>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	793a      	ldrb	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <ssd1306_WriteChar+0x10c>)
 800287e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	@ 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	bf00      	nop
 800288c:	20000810 	.word	0x20000810

08002890 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	1d38      	adds	r0, r7, #4
 800289a:	e880 0006 	stmia.w	r0, {r1, r2}
 800289e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80028a0:	e012      	b.n	80028c8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	7818      	ldrb	r0, [r3, #0]
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	1d3a      	adds	r2, r7, #4
 80028aa:	ca06      	ldmia	r2, {r1, r2}
 80028ac:	f7ff ff68 	bl	8002780 <ssd1306_WriteChar>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d002      	beq.n	80028c2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	e008      	b.n	80028d4 <ssd1306_WriteString+0x44>
        }
        str++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e8      	bne.n	80028a2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	781b      	ldrb	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	460a      	mov	r2, r1
 80028e6:	71fb      	strb	r3, [r7, #7]
 80028e8:	4613      	mov	r3, r2
 80028ea:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <ssd1306_SetCursor+0x2c>)
 80028f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80028f4:	79bb      	ldrb	r3, [r7, #6]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <ssd1306_SetCursor+0x2c>)
 80028fa:	805a      	strh	r2, [r3, #2]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	20000810 	.word	0x20000810

0800290c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002916:	2381      	movs	r3, #129	@ 0x81
 8002918:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fdf3 	bl	8002508 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fdef 	bl	8002508 <ssd1306_WriteCommand>
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002944:	23af      	movs	r3, #175	@ 0xaf
 8002946:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002948:	4b08      	ldr	r3, [pc, #32]	@ (800296c <ssd1306_SetDisplayOn+0x38>)
 800294a:	2201      	movs	r2, #1
 800294c:	715a      	strb	r2, [r3, #5]
 800294e:	e004      	b.n	800295a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002950:	23ae      	movs	r3, #174	@ 0xae
 8002952:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <ssd1306_SetDisplayOn+0x38>)
 8002956:	2200      	movs	r2, #0
 8002958:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fdd3 	bl	8002508 <ssd1306_WriteCommand>
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000810 	.word	0x20000810

08002970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_MspInit+0x44>)
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <HAL_MspInit+0x44>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6613      	str	r3, [r2, #96]	@ 0x60
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_MspInit+0x44>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_MspInit+0x44>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	4a08      	ldr	r2, [pc, #32]	@ (80029b4 <HAL_MspInit+0x44>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002998:	6593      	str	r3, [r2, #88]	@ 0x58
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_MspInit+0x44>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b09e      	sub	sp, #120	@ 0x78
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	2254      	movs	r2, #84	@ 0x54
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 fe21 	bl	8007620 <memset>
  if(hi2c->Instance==I2C1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <HAL_I2C_MspInit+0xa4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d135      	bne.n	8002a54 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029e8:	2340      	movs	r3, #64	@ 0x40
 80029ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fd3d 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a00:	f7ff fd74 	bl	80024ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_I2C_MspInit+0xa8>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <HAL_I2C_MspInit+0xa8>)
 8002a0a:	f043 0302 	orr.w	r3, r3, #2
 8002a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a10:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_I2C_MspInit+0xa8>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1c:	23c0      	movs	r3, #192	@ 0xc0
 8002a1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a20:	2312      	movs	r3, #18
 8002a22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a34:	4619      	mov	r1, r3
 8002a36:	480b      	ldr	r0, [pc, #44]	@ (8002a64 <HAL_I2C_MspInit+0xac>)
 8002a38:	f000 fb54 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_I2C_MspInit+0xa8>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <HAL_I2C_MspInit+0xa8>)
 8002a42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_I2C_MspInit+0xa8>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002a54:	bf00      	nop
 8002a56:	3778      	adds	r7, #120	@ 0x78
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40005400 	.word	0x40005400
 8002a60:	40021000 	.word	0x40021000
 8002a64:	48000400 	.word	0x48000400

08002a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0a0      	sub	sp, #128	@ 0x80
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a80:	f107 0318 	add.w	r3, r7, #24
 8002a84:	2254      	movs	r2, #84	@ 0x54
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fdc9 	bl	8007620 <memset>
  if(huart->Instance==USART1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a47      	ldr	r2, [pc, #284]	@ (8002bb0 <HAL_UART_MspInit+0x148>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d138      	bne.n	8002b0a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa0:	f107 0318 	add.w	r3, r7, #24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 fce5 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ab0:	f7ff fd1c 	bl	80024ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002abe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	4b39      	ldr	r3, [pc, #228]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	4a38      	ldr	r2, [pc, #224]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad8:	4b36      	ldr	r3, [pc, #216]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af6:	2307      	movs	r3, #7
 8002af8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002afe:	4619      	mov	r1, r3
 8002b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b04:	f000 faee 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b08:	e04d      	b.n	8002ba6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb8 <HAL_UART_MspInit+0x150>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d148      	bne.n	8002ba6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b14:	2302      	movs	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fca7 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002b2c:	f7ff fcde 	bl	80024ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	4a19      	ldr	r2, [pc, #100]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b54:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b60:	2304      	movs	r3, #4
 8002b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b70:	2307      	movs	r3, #7
 8002b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b7e:	f000 fab1 	bl	80030e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002b94:	2303      	movs	r3, #3
 8002b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba2:	f000 fa9f 	bl	80030e4 <HAL_GPIO_Init>
}
 8002ba6:	bf00      	nop
 8002ba8:	3780      	adds	r7, #128	@ 0x80
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40004400 	.word	0x40004400

08002bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <NMI_Handler+0x4>

08002bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <HardFault_Handler+0x4>

08002bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <MemManage_Handler+0x4>

08002bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <BusFault_Handler+0x4>

08002bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <UsageFault_Handler+0x4>

08002be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c12:	f000 f93d 	bl	8002e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  return 1;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_kill>:

int _kill(int pid, int sig)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c34:	f004 fd46 	bl	80076c4 <__errno>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2216      	movs	r2, #22
 8002c3c:	601a      	str	r2, [r3, #0]
  return -1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_exit>:

void _exit (int status)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c52:	f04f 31ff 	mov.w	r1, #4294967295
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffe7 	bl	8002c2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <_exit+0x12>

08002c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e00a      	b.n	8002c88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c72:	f3af 8000 	nop.w
 8002c76:	4601      	mov	r1, r0
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	60ba      	str	r2, [r7, #8]
 8002c7e:	b2ca      	uxtb	r2, r1
 8002c80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbf0      	blt.n	8002c72 <_read+0x12>
  }

  return len;
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_isatty>:

int _isatty(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <_sbrk+0x5c>)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <_sbrk+0x60>)
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d18:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <_sbrk+0x64>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <_sbrk+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d207      	bcs.n	8002d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d34:	f004 fcc6 	bl	80076c4 <__errno>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e009      	b.n	8002d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a05      	ldr	r2, [pc, #20]	@ (8002d68 <_sbrk+0x64>)
 8002d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	2000c000 	.word	0x2000c000
 8002d64:	00000400 	.word	0x00000400
 8002d68:	20000818 	.word	0x20000818
 8002d6c:	20000970 	.word	0x20000970

08002d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <SystemInit+0x20>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <SystemInit+0x20>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d98:	f7ff ffea 	bl	8002d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480c      	ldr	r0, [pc, #48]	@ (8002dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d9e:	490d      	ldr	r1, [pc, #52]	@ (8002dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <LoopForever+0xe>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db4:	4c0a      	ldr	r4, [pc, #40]	@ (8002de0 <LoopForever+0x16>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f004 fc85 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dc6:	f7ff f81f 	bl	8001e08 <main>

08002dca <LoopForever>:

LoopForever:
    b LoopForever
 8002dca:	e7fe      	b.n	8002dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002dcc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002dd8:	0800a3c8 	.word	0x0800a3c8
  ldr r2, =_sbss
 8002ddc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002de0:	2000096c 	.word	0x2000096c

08002de4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC1_IRQHandler>

08002de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df0:	2003      	movs	r0, #3
 8002df2:	f000 f943 	bl	800307c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 f80e 	bl	8002e18 <HAL_InitTick>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	71fb      	strb	r3, [r7, #7]
 8002e06:	e001      	b.n	8002e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e08:	f7ff fdb2 	bl	8002970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <HAL_InitTick+0x6c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d023      	beq.n	8002e74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e2c:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <HAL_InitTick+0x70>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <HAL_InitTick+0x6c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f941 	bl	80030ca <HAL_SYSTICK_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d809      	bhi.n	8002e68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e54:	2200      	movs	r2, #0
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f000 f919 	bl	8003092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e60:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <HAL_InitTick+0x74>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e007      	b.n	8002e78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e004      	b.n	8002e78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	e001      	b.n	8002e78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000010 	.word	0x20000010
 8002e88:	20000008 	.word	0x20000008
 8002e8c:	2000000c 	.word	0x2000000c

08002e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_IncTick+0x20>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_IncTick+0x24>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_IncTick+0x24>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000010 	.word	0x20000010
 8002eb4:	2000081c 	.word	0x2000081c

08002eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <HAL_GetTick+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000081c 	.word	0x2000081c

08002ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff ffee 	bl	8002eb8 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d005      	beq.n	8002ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <HAL_Delay+0x44>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef6:	bf00      	nop
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d8f7      	bhi.n	8002ef8 <HAL_Delay+0x28>
  {
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000010 	.word	0x20000010

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	@ (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	@ (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	@ (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	@ 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003048:	d301      	bcc.n	800304e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304e:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <SysTick_Config+0x40>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003056:	210f      	movs	r1, #15
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f7ff ff8e 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <SysTick_Config+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <SysTick_Config+0x40>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff47 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030a4:	f7ff ff5c 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 80030a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff ff8e 	bl	8002fd0 <NVIC_EncodePriority>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff5d 	bl	8002f7c <__NVIC_SetPriority>
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffb0 	bl	8003038 <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f2:	e148      	b.n	8003386 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 813a 	beq.w	8003380 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d005      	beq.n	8003124 <HAL_GPIO_Init+0x40>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d130      	bne.n	8003186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315a:	2201      	movs	r2, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0201 	and.w	r2, r3, #1
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d017      	beq.n	80031c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d123      	bne.n	8003216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	6939      	ldr	r1, [r7, #16]
 8003212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8094 	beq.w	8003380 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003258:	4b52      	ldr	r3, [pc, #328]	@ (80033a4 <HAL_GPIO_Init+0x2c0>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	4a51      	ldr	r2, [pc, #324]	@ (80033a4 <HAL_GPIO_Init+0x2c0>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6613      	str	r3, [r2, #96]	@ 0x60
 8003264:	4b4f      	ldr	r3, [pc, #316]	@ (80033a4 <HAL_GPIO_Init+0x2c0>)
 8003266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003270:	4a4d      	ldr	r2, [pc, #308]	@ (80033a8 <HAL_GPIO_Init+0x2c4>)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800329a:	d00d      	beq.n	80032b8 <HAL_GPIO_Init+0x1d4>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a43      	ldr	r2, [pc, #268]	@ (80033ac <HAL_GPIO_Init+0x2c8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <HAL_GPIO_Init+0x1d0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a42      	ldr	r2, [pc, #264]	@ (80033b0 <HAL_GPIO_Init+0x2cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <HAL_GPIO_Init+0x1cc>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e004      	b.n	80032ba <HAL_GPIO_Init+0x1d6>
 80032b0:	2307      	movs	r3, #7
 80032b2:	e002      	b.n	80032ba <HAL_GPIO_Init+0x1d6>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_GPIO_Init+0x1d6>
 80032b8:	2300      	movs	r3, #0
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	f002 0203 	and.w	r2, r2, #3
 80032c0:	0092      	lsls	r2, r2, #2
 80032c2:	4093      	lsls	r3, r2
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ca:	4937      	ldr	r1, [pc, #220]	@ (80033a8 <HAL_GPIO_Init+0x2c4>)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3302      	adds	r3, #2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032d8:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032fc:	4a2d      	ldr	r2, [pc, #180]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003326:	4a23      	ldr	r2, [pc, #140]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800332c:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003350:	4a18      	ldr	r2, [pc, #96]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003356:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800337a:	4a0e      	ldr	r2, [pc, #56]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3301      	adds	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f aeaf 	bne.w	80030f4 <HAL_GPIO_Init+0x10>
  }
}
 8003396:	bf00      	nop
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40010000 	.word	0x40010000
 80033ac:	48000400 	.word	0x48000400
 80033b0:	48000800 	.word	0x48000800
 80033b4:	40010400 	.word	0x40010400

080033b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d4:	e002      	b.n	80033dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e08d      	b.n	8003516 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fad2 	bl	80029b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	@ 0x24
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	e006      	b.n	8003470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800346e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d108      	bne.n	800348a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	e007      	b.n	800349a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	460b      	mov	r3, r1
 800352e:	817b      	strh	r3, [r7, #10]
 8003530:	4613      	mov	r3, r2
 8003532:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	f040 80fd 	bne.w	800373c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2C_Master_Transmit+0x30>
 800354c:	2302      	movs	r3, #2
 800354e:	e0f6      	b.n	800373e <HAL_I2C_Master_Transmit+0x21e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003558:	f7ff fcae 	bl	8002eb8 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2319      	movs	r3, #25
 8003564:	2201      	movs	r2, #1
 8003566:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fdcc 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0e1      	b.n	800373e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2221      	movs	r2, #33	@ 0x21
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2210      	movs	r2, #16
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	893a      	ldrh	r2, [r7, #8]
 800359a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2bff      	cmp	r3, #255	@ 0xff
 80035aa:	d906      	bls.n	80035ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80035b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e007      	b.n	80035ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80035c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d024      	beq.n	800361c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	8979      	ldrh	r1, [r7, #10]
 800360e:	4b4e      	ldr	r3, [pc, #312]	@ (8003748 <HAL_I2C_Master_Transmit+0x228>)
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 ffc7 	bl	80045a8 <I2C_TransferConfig>
 800361a:	e066      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	b2da      	uxtb	r2, r3
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	4b48      	ldr	r3, [pc, #288]	@ (8003748 <HAL_I2C_Master_Transmit+0x228>)
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 ffbc 	bl	80045a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003630:	e05b      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	6a39      	ldr	r1, [r7, #32]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fdbf 	bl	80041ba <I2C_WaitOnTXISFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e07b      	b.n	800373e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d034      	beq.n	80036ea <HAL_I2C_Master_Transmit+0x1ca>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	d130      	bne.n	80036ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	2200      	movs	r2, #0
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fd38 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e04d      	b.n	800373e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2bff      	cmp	r3, #255	@ 0xff
 80036aa:	d90e      	bls.n	80036ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	22ff      	movs	r2, #255	@ 0xff
 80036b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 ff70 	bl	80045a8 <I2C_TransferConfig>
 80036c8:	e00f      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	8979      	ldrh	r1, [r7, #10]
 80036dc:	2300      	movs	r3, #0
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 ff5f 	bl	80045a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d19e      	bne.n	8003632 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	6a39      	ldr	r1, [r7, #32]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fda5 	bl	8004248 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e01a      	b.n	800373e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2220      	movs	r2, #32
 800370e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <HAL_I2C_Master_Transmit+0x22c>)
 800371c:	400b      	ands	r3, r1
 800371e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	80002000 	.word	0x80002000
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	461a      	mov	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	817b      	strh	r3, [r7, #10]
 8003760:	4613      	mov	r3, r2
 8003762:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b20      	cmp	r3, #32
 800376e:	f040 80db 	bne.w	8003928 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_I2C_Master_Receive+0x30>
 800377c:	2302      	movs	r3, #2
 800377e:	e0d4      	b.n	800392a <HAL_I2C_Master_Receive+0x1da>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003788:	f7ff fb96 	bl	8002eb8 <HAL_GetTick>
 800378c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2319      	movs	r3, #25
 8003794:	2201      	movs	r2, #1
 8003796:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fcb4 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0bf      	b.n	800392a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2222      	movs	r2, #34	@ 0x22
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2210      	movs	r2, #16
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	893a      	ldrh	r2, [r7, #8]
 80037ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2bff      	cmp	r3, #255	@ 0xff
 80037da:	d90e      	bls.n	80037fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	8979      	ldrh	r1, [r7, #10]
 80037ea:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <HAL_I2C_Master_Receive+0x1e4>)
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fed8 	bl	80045a8 <I2C_TransferConfig>
 80037f8:	e06d      	b.n	80038d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	b2da      	uxtb	r2, r3
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	4b49      	ldr	r3, [pc, #292]	@ (8003934 <HAL_I2C_Master_Receive+0x1e4>)
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fec7 	bl	80045a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800381a:	e05c      	b.n	80038d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	6a39      	ldr	r1, [r7, #32]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fd55 	bl	80042d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e07c      	b.n	800392a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d034      	beq.n	80038d6 <HAL_I2C_Master_Receive+0x186>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d130      	bne.n	80038d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	2200      	movs	r2, #0
 800387c:	2180      	movs	r1, #128	@ 0x80
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fc42 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e04d      	b.n	800392a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	@ 0xff
 8003896:	d90e      	bls.n	80038b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	@ 0xff
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	2300      	movs	r3, #0
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fe7a 	bl	80045a8 <I2C_TransferConfig>
 80038b4:	e00f      	b.n	80038d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	8979      	ldrh	r1, [r7, #10]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fe69 	bl	80045a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d19d      	bne.n	800381c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	6a39      	ldr	r1, [r7, #32]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fcaf 	bl	8004248 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e01a      	b.n	800392a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2220      	movs	r2, #32
 80038fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <HAL_I2C_Master_Receive+0x1e8>)
 8003908:	400b      	ands	r3, r1
 800390a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e000      	b.n	800392a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	80002400 	.word	0x80002400
 8003938:	fe00e800 	.word	0xfe00e800

0800393c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	817b      	strh	r3, [r7, #10]
 800394e:	460b      	mov	r3, r1
 8003950:	813b      	strh	r3, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	f040 80f9 	bne.w	8003b56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_I2C_Mem_Write+0x34>
 800396a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d105      	bne.n	800397c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0ed      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_I2C_Mem_Write+0x4e>
 8003986:	2302      	movs	r3, #2
 8003988:	e0e6      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003992:	f7ff fa91 	bl	8002eb8 <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2319      	movs	r3, #25
 800399e:	2201      	movs	r2, #1
 80039a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fbaf 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0d1      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2221      	movs	r2, #33	@ 0x21
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2240      	movs	r2, #64	@ 0x40
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039dc:	88f8      	ldrh	r0, [r7, #6]
 80039de:	893a      	ldrh	r2, [r7, #8]
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	4603      	mov	r3, r0
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fabf 	bl	8003f70 <I2C_RequestMemoryWrite>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0a9      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2bff      	cmp	r3, #255	@ 0xff
 8003a0c:	d90e      	bls.n	8003a2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	22ff      	movs	r2, #255	@ 0xff
 8003a12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	8979      	ldrh	r1, [r7, #10]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fdbf 	bl	80045a8 <I2C_TransferConfig>
 8003a2a:	e00f      	b.n	8003a4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fdae 	bl	80045a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fbb2 	bl	80041ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e07b      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d034      	beq.n	8003b04 <HAL_I2C_Mem_Write+0x1c8>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d130      	bne.n	8003b04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fb2b 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e04d      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2bff      	cmp	r3, #255	@ 0xff
 8003ac4:	d90e      	bls.n	8003ae4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	22ff      	movs	r2, #255	@ 0xff
 8003aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	8979      	ldrh	r1, [r7, #10]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fd63 	bl	80045a8 <I2C_TransferConfig>
 8003ae2:	e00f      	b.n	8003b04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	8979      	ldrh	r1, [r7, #10]
 8003af6:	2300      	movs	r3, #0
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fd52 	bl	80045a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d19e      	bne.n	8003a4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fb98 	bl	8004248 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e01a      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2220      	movs	r2, #32
 8003b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_I2C_Mem_Write+0x224>)
 8003b36:	400b      	ands	r3, r1
 8003b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	fe00e800 	.word	0xfe00e800

08003b64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	460b      	mov	r3, r1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	f040 80fd 	bne.w	8003d86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_I2C_Mem_Read+0x34>
 8003b92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0f1      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2C_Mem_Read+0x4e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0ea      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bba:	f7ff f97d 	bl	8002eb8 <HAL_GetTick>
 8003bbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	2319      	movs	r3, #25
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fa9b 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0d5      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2222      	movs	r2, #34	@ 0x22
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2240      	movs	r2, #64	@ 0x40
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c04:	88f8      	ldrh	r0, [r7, #6]
 8003c06:	893a      	ldrh	r2, [r7, #8]
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	4603      	mov	r3, r0
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f9ff 	bl	8004018 <I2C_RequestMemoryRead>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0ad      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2bff      	cmp	r3, #255	@ 0xff
 8003c34:	d90e      	bls.n	8003c54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	8979      	ldrh	r1, [r7, #10]
 8003c44:	4b52      	ldr	r3, [pc, #328]	@ (8003d90 <HAL_I2C_Mem_Read+0x22c>)
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fcab 	bl	80045a8 <I2C_TransferConfig>
 8003c52:	e00f      	b.n	8003c74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	8979      	ldrh	r1, [r7, #10]
 8003c66:	4b4a      	ldr	r3, [pc, #296]	@ (8003d90 <HAL_I2C_Mem_Read+0x22c>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fc9a 	bl	80045a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa42 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e07c      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d034      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x1d0>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d130      	bne.n	8003d34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2180      	movs	r1, #128	@ 0x80
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fa13 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e04d      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2bff      	cmp	r3, #255	@ 0xff
 8003cf4:	d90e      	bls.n	8003d14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fc4b 	bl	80045a8 <I2C_TransferConfig>
 8003d12:	e00f      	b.n	8003d34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	8979      	ldrh	r1, [r7, #10]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fc3a 	bl	80045a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d19a      	bne.n	8003c74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa80 	bl	8004248 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e01a      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2220      	movs	r2, #32
 8003d58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <HAL_I2C_Mem_Read+0x230>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	80002400 	.word	0x80002400
 8003d94:	fe00e800 	.word	0xfe00e800

08003d98 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08a      	sub	sp, #40	@ 0x28
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	460b      	mov	r3, r1
 8003da6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	f040 80d6 	bne.w	8003f66 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e0cc      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_I2C_IsDeviceReady+0x44>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0c5      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x1d0>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2224      	movs	r2, #36	@ 0x24
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d107      	bne.n	8003e0a <HAL_I2C_IsDeviceReady+0x72>
 8003dfa:	897b      	ldrh	r3, [r7, #10]
 8003dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e08:	e006      	b.n	8003e18 <HAL_I2C_IsDeviceReady+0x80>
 8003e0a:	897b      	ldrh	r3, [r7, #10]
 8003e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e14:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003e1e:	f7ff f84b 	bl	8002eb8 <HAL_GetTick>
 8003e22:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003e50:	e034      	b.n	8003ebc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d01a      	beq.n	8003e90 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7ff f82d 	bl	8002eb8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <HAL_I2C_IsDeviceReady+0xd8>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10f      	bne.n	8003e90 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e06b      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_I2C_IsDeviceReady+0x130>
 8003ec2:	7fbb      	ldrb	r3, [r7, #30]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0c4      	beq.n	8003e52 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d01a      	beq.n	8003f0c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2120      	movs	r1, #32
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f911 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e03b      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e02d      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2120      	movs	r1, #32
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8f6 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e020      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2220      	movs	r2, #32
 8003f34:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	f63f af56 	bhi.w	8003df2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <I2C_RequestMemoryWrite+0xa4>)
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fb05 	bl	80045a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	69b9      	ldr	r1, [r7, #24]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f909 	bl	80041ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e02c      	b.n	800400c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb8:	893b      	ldrh	r3, [r7, #8]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fc2:	e015      	b.n	8003ff0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f8ef 	bl	80041ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e012      	b.n	800400c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe6:	893b      	ldrh	r3, [r7, #8]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2180      	movs	r1, #128	@ 0x80
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f884 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	80002000 	.word	0x80002000

08004018 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	461a      	mov	r2, r3
 8004026:	4603      	mov	r3, r0
 8004028:	817b      	strh	r3, [r7, #10]
 800402a:	460b      	mov	r3, r1
 800402c:	813b      	strh	r3, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	8979      	ldrh	r1, [r7, #10]
 8004038:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <I2C_RequestMemoryRead+0xa4>)
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fab2 	bl	80045a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	69b9      	ldr	r1, [r7, #24]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f8b6 	bl	80041ba <I2C_WaitOnTXISFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e02c      	b.n	80040b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	629a      	str	r2, [r3, #40]	@ 0x28
 8004068:	e015      	b.n	8004096 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800406a:	893b      	ldrh	r3, [r7, #8]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	b29b      	uxth	r3, r3
 8004070:	b2da      	uxtb	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	69b9      	ldr	r1, [r7, #24]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f89c 	bl	80041ba <I2C_WaitOnTXISFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e012      	b.n	80040b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2200      	movs	r2, #0
 800409e:	2140      	movs	r1, #64	@ 0x40
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f831 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	80002000 	.word	0x80002000

080040c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d103      	bne.n	80040de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d007      	beq.n	80040fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	619a      	str	r2, [r3, #24]
  }
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004118:	e03b      	b.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f962 	bl	80043e8 <I2C_IsErrorOccurred>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e041      	b.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d02d      	beq.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7fe febf 	bl	8002eb8 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d122      	bne.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	d113      	bne.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e00f      	b.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d0b4      	beq.n	800411a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041c6:	e033      	b.n	8004230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f90b 	bl	80043e8 <I2C_IsErrorOccurred>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e031      	b.n	8004240 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d025      	beq.n	8004230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e4:	f7fe fe68 	bl	8002eb8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d302      	bcc.n	80041fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11a      	bne.n	8004230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d013      	beq.n	8004230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e007      	b.n	8004240 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d1c4      	bne.n	80041c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004254:	e02f      	b.n	80042b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f8c4 	bl	80043e8 <I2C_IsErrorOccurred>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e02d      	b.n	80042c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fe fe25 	bl	8002eb8 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11a      	bne.n	80042b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d013      	beq.n	80042b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e007      	b.n	80042c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d1c8      	bne.n	8004256 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042e0:	e071      	b.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f87e 	bl	80043e8 <I2C_IsErrorOccurred>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d13b      	bne.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d138      	bne.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d105      	bne.n	8004324 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b10      	cmp	r3, #16
 8004330:	d121      	bne.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2210      	movs	r2, #16
 8004338:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2204      	movs	r2, #4
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2220      	movs	r2, #32
 8004346:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004354:	400b      	ands	r3, r1
 8004356:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
 8004374:	e002      	b.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800437c:	f7fe fd9c 	bl	8002eb8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	d302      	bcc.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d119      	bne.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d116      	bne.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00f      	beq.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d002      	beq.n	80043da <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d083      	beq.n	80042e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80043da:	7dfb      	ldrb	r3, [r7, #23]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	fe00e800 	.word	0xfe00e800

080043e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	@ 0x28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d068      	beq.n	80044e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2210      	movs	r2, #16
 800441a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800441c:	e049      	b.n	80044b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d045      	beq.n	80044b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe fd47 	bl	8002eb8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_IsErrorOccurred+0x54>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d13a      	bne.n	80044b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004446:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800444e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445e:	d121      	bne.n	80044a4 <I2C_IsErrorOccurred+0xbc>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004466:	d01d      	beq.n	80044a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b20      	cmp	r3, #32
 800446c:	d01a      	beq.n	80044a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800447c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800447e:	f7fe fd1b 	bl	8002eb8 <HAL_GetTick>
 8004482:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004484:	e00e      	b.n	80044a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004486:	f7fe fd17 	bl	8002eb8 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b19      	cmp	r3, #25
 8004492:	d907      	bls.n	80044a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f043 0320 	orr.w	r3, r3, #32
 800449a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044a2:	e006      	b.n	80044b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d1e9      	bne.n	8004486 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d003      	beq.n	80044c8 <I2C_IsErrorOccurred+0xe0>
 80044c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0aa      	beq.n	800441e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2220      	movs	r2, #32
 80044d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f043 0304 	orr.w	r3, r3, #4
 80044de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800452a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f043 0302 	orr.w	r3, r3, #2
 8004542:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fdaf 	bl	80040c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <I2C_IsErrorOccurred+0x1bc>)
 800456e:	400b      	ands	r3, r1
 8004570:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800459a:	4618      	mov	r0, r3
 800459c:	3728      	adds	r7, #40	@ 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	fe00e800 	.word	0xfe00e800

080045a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	817b      	strh	r3, [r7, #10]
 80045b6:	4613      	mov	r3, r2
 80045b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ba:	897b      	ldrh	r3, [r7, #10]
 80045bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045c0:	7a7b      	ldrb	r3, [r7, #9]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	0d5b      	lsrs	r3, r3, #21
 80045e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045e6:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <I2C_TransferConfig+0x60>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	43db      	mvns	r3, r3
 80045ec:	ea02 0103 	and.w	r1, r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	03ff63ff 	.word	0x03ff63ff

0800460c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b20      	cmp	r3, #32
 8004620:	d138      	bne.n	8004694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800462c:	2302      	movs	r3, #2
 800462e:	e032      	b.n	8004696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	@ 0x24
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800465e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d139      	bne.n	800472c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e033      	b.n	800472e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2224      	movs	r2, #36	@ 0x24
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800472c:	2302      	movs	r3, #2
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004740:	4b04      	ldr	r3, [pc, #16]	@ (8004754 <HAL_PWREx_GetVoltageRange+0x18>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40007000 	.word	0x40007000

08004758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004766:	d130      	bne.n	80047ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004768:	4b23      	ldr	r3, [pc, #140]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004774:	d038      	beq.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004776:	4b20      	ldr	r3, [pc, #128]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800477e:	4a1e      	ldr	r2, [pc, #120]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004780:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004786:	4b1d      	ldr	r3, [pc, #116]	@ (80047fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2232      	movs	r2, #50	@ 0x32
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	4a1b      	ldr	r2, [pc, #108]	@ (8004800 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	0c9b      	lsrs	r3, r3, #18
 8004798:	3301      	adds	r3, #1
 800479a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800479c:	e002      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a4:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b0:	d102      	bne.n	80047b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f2      	bne.n	800479e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c4:	d110      	bne.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e00f      	b.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d6:	d007      	beq.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047d8:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047e0:	4a05      	ldr	r2, [pc, #20]	@ (80047f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40007000 	.word	0x40007000
 80047fc:	20000008 	.word	0x20000008
 8004800:	431bde83 	.word	0x431bde83

08004804 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f000 bc02 	b.w	800501c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004818:	4b96      	ldr	r3, [pc, #600]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004822:	4b94      	ldr	r3, [pc, #592]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80e4 	beq.w	8004a02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_RCC_OscConfig+0x4c>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b0c      	cmp	r3, #12
 8004844:	f040 808b 	bne.w	800495e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b01      	cmp	r3, #1
 800484c:	f040 8087 	bne.w	800495e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004850:	4b88      	ldr	r3, [pc, #544]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_OscConfig+0x64>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e3d9      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	4b81      	ldr	r3, [pc, #516]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_RCC_OscConfig+0x7e>
 8004878:	4b7e      	ldr	r3, [pc, #504]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004880:	e005      	b.n	800488e <HAL_RCC_OscConfig+0x8a>
 8004882:	4b7c      	ldr	r3, [pc, #496]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800488e:	4293      	cmp	r3, r2
 8004890:	d223      	bcs.n	80048da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fd8c 	bl	80053b4 <RCC_SetFlashLatencyFromMSIRange>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e3ba      	b.n	800501c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a6:	4b73      	ldr	r3, [pc, #460]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a72      	ldr	r2, [pc, #456]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b70      	ldr	r3, [pc, #448]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	496d      	ldr	r1, [pc, #436]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	4968      	ldr	r1, [pc, #416]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
 80048d8:	e025      	b.n	8004926 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048da:	4b66      	ldr	r3, [pc, #408]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a65      	ldr	r2, [pc, #404]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048e0:	f043 0308 	orr.w	r3, r3, #8
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b63      	ldr	r3, [pc, #396]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4960      	ldr	r1, [pc, #384]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	495b      	ldr	r1, [pc, #364]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fd4c 	bl	80053b4 <RCC_SetFlashLatencyFromMSIRange>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e37a      	b.n	800501c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004926:	f000 fc81 	bl	800522c <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b51      	ldr	r3, [pc, #324]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	4950      	ldr	r1, [pc, #320]	@ (8004a78 <HAL_RCC_OscConfig+0x274>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a4e      	ldr	r2, [pc, #312]	@ (8004a7c <HAL_RCC_OscConfig+0x278>)
 8004944:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004946:	4b4e      	ldr	r3, [pc, #312]	@ (8004a80 <HAL_RCC_OscConfig+0x27c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fa64 	bl	8002e18 <HAL_InitTick>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d052      	beq.n	8004a00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	e35e      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d032      	beq.n	80049cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004966:	4b43      	ldr	r3, [pc, #268]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a42      	ldr	r2, [pc, #264]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004972:	f7fe faa1 	bl	8002eb8 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800497a:	f7fe fa9d 	bl	8002eb8 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e347      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800498c:	4b39      	ldr	r3, [pc, #228]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004998:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a35      	ldr	r2, [pc, #212]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 800499e:	f043 0308 	orr.w	r3, r3, #8
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b33      	ldr	r3, [pc, #204]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	4930      	ldr	r1, [pc, #192]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	492b      	ldr	r1, [pc, #172]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
 80049ca:	e01a      	b.n	8004a02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049cc:	4b29      	ldr	r3, [pc, #164]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a28      	ldr	r2, [pc, #160]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049d8:	f7fe fa6e 	bl	8002eb8 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e0:	f7fe fa6a 	bl	8002eb8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e314      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x1dc>
 80049fe:	e000      	b.n	8004a02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d073      	beq.n	8004af6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_OscConfig+0x21c>
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d10e      	bne.n	8004a38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d063      	beq.n	8004af4 <HAL_RCC_OscConfig+0x2f0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d15f      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e2f1      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x24c>
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e025      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a58:	d114      	bne.n	8004a84 <HAL_RCC_OscConfig+0x280>
 8004a5a:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a02      	ldr	r2, [pc, #8]	@ (8004a74 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e013      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
 8004a74:	40021000 	.word	0x40021000
 8004a78:	08009ffc 	.word	0x08009ffc
 8004a7c:	20000008 	.word	0x20000008
 8004a80:	2000000c 	.word	0x2000000c
 8004a84:	4ba0      	ldr	r3, [pc, #640]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a9f      	ldr	r2, [pc, #636]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b9d      	ldr	r3, [pc, #628]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a9c      	ldr	r2, [pc, #624]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fa08 	bl	8002eb8 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fe fa04 	bl	8002eb8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	@ 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e2ae      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004abe:	4b92      	ldr	r3, [pc, #584]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x2a8>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe f9f4 	bl	8002eb8 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe f9f0 	bl	8002eb8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e29a      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae6:	4b88      	ldr	r3, [pc, #544]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x2d0>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d060      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_OscConfig+0x310>
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d119      	bne.n	8004b42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d116      	bne.n	8004b42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b14:	4b7c      	ldr	r3, [pc, #496]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_OscConfig+0x328>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e277      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b76      	ldr	r3, [pc, #472]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	4973      	ldr	r1, [pc, #460]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b40:	e040      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d023      	beq.n	8004b92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6e      	ldr	r2, [pc, #440]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fe f9af 	bl	8002eb8 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fe f9ab 	bl	8002eb8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e255      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b70:	4b65      	ldr	r3, [pc, #404]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b62      	ldr	r3, [pc, #392]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	495f      	ldr	r1, [pc, #380]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	e018      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b5d      	ldr	r3, [pc, #372]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5c      	ldr	r2, [pc, #368]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fe f98b 	bl	8002eb8 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba6:	f7fe f987 	bl	8002eb8 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e231      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb8:	4b53      	ldr	r3, [pc, #332]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d03c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	4a4a      	ldr	r2, [pc, #296]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fe f966 	bl	8002eb8 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf0:	f7fe f962 	bl	8002eb8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e20c      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c02:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x3ec>
 8004c10:	e01b      	b.n	8004c4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c12:	4b3d      	ldr	r3, [pc, #244]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c18:	4a3b      	ldr	r2, [pc, #236]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fe f949 	bl	8002eb8 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2a:	f7fe f945 	bl	8002eb8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e1ef      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c3c:	4b32      	ldr	r3, [pc, #200]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ef      	bne.n	8004c2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a6 	beq.w	8004da4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6c:	4a26      	ldr	r2, [pc, #152]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c74:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c84:	4b21      	ldr	r3, [pc, #132]	@ (8004d0c <HAL_RCC_OscConfig+0x508>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d118      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c90:	4b1e      	ldr	r3, [pc, #120]	@ (8004d0c <HAL_RCC_OscConfig+0x508>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1d      	ldr	r2, [pc, #116]	@ (8004d0c <HAL_RCC_OscConfig+0x508>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fe f90c 	bl	8002eb8 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fe f908 	bl	8002eb8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1b2      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb6:	4b15      	ldr	r3, [pc, #84]	@ (8004d0c <HAL_RCC_OscConfig+0x508>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d108      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4d8>
 8004cca:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cda:	e029      	b.n	8004d30 <HAL_RCC_OscConfig+0x52c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b05      	cmp	r3, #5
 8004ce2:	d115      	bne.n	8004d10 <HAL_RCC_OscConfig+0x50c>
 8004ce4:	4b08      	ldr	r3, [pc, #32]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cea:	4a07      	ldr	r2, [pc, #28]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f043 0304 	orr.w	r3, r3, #4
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cf4:	4b04      	ldr	r3, [pc, #16]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	4a03      	ldr	r2, [pc, #12]	@ (8004d08 <HAL_RCC_OscConfig+0x504>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d04:	e014      	b.n	8004d30 <HAL_RCC_OscConfig+0x52c>
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40007000 	.word	0x40007000
 8004d10:	4b9a      	ldr	r3, [pc, #616]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	4a99      	ldr	r2, [pc, #612]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d20:	4b96      	ldr	r3, [pc, #600]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	4a95      	ldr	r2, [pc, #596]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fe f8be 	bl	8002eb8 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d40:	f7fe f8ba 	bl	8002eb8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e162      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d56:	4b89      	ldr	r3, [pc, #548]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ed      	beq.n	8004d40 <HAL_RCC_OscConfig+0x53c>
 8004d64:	e015      	b.n	8004d92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fe f8a7 	bl	8002eb8 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fe f8a3 	bl	8002eb8 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e14b      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d84:	4b7d      	ldr	r3, [pc, #500]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ed      	bne.n	8004d6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b78      	ldr	r3, [pc, #480]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9c:	4a77      	ldr	r2, [pc, #476]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d03c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004db8:	4b70      	ldr	r3, [pc, #448]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fe f876 	bl	8002eb8 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd0:	f7fe f872 	bl	8002eb8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e11c      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004de2:	4b66      	ldr	r3, [pc, #408]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ef      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x5cc>
 8004df0:	e01b      	b.n	8004e2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004df2:	4b62      	ldr	r3, [pc, #392]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df8:	4a60      	ldr	r2, [pc, #384]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fe f859 	bl	8002eb8 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0a:	f7fe f855 	bl	8002eb8 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e0ff      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e1c:	4b57      	ldr	r3, [pc, #348]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ef      	bne.n	8004e0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80f3 	beq.w	800501a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	f040 80c9 	bne.w	8004fd0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0203 	and.w	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d12c      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d123      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d11b      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d113      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	3b01      	subs	r3, #1
 8004e92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d109      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d06b      	beq.n	8004f84 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d062      	beq.n	8004f78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004eb2:	4b32      	ldr	r3, [pc, #200]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0ac      	b.n	800501c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004ec8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ecc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ece:	f7fd fff3 	bl	8002eb8 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed6:	f7fd ffef 	bl	8002eb8 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e099      	b.n	800501c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee8:	4b24      	ldr	r3, [pc, #144]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ef4:	4b21      	ldr	r3, [pc, #132]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	4b21      	ldr	r3, [pc, #132]	@ (8004f80 <HAL_RCC_OscConfig+0x77c>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f04:	3a01      	subs	r2, #1
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	4311      	orrs	r1, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f0e:	0212      	lsls	r2, r2, #8
 8004f10:	4311      	orrs	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f16:	0852      	lsrs	r2, r2, #1
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0552      	lsls	r2, r2, #21
 8004f1c:	4311      	orrs	r1, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f22:	0852      	lsrs	r2, r2, #1
 8004f24:	3a01      	subs	r2, #1
 8004f26:	0652      	lsls	r2, r2, #25
 8004f28:	4311      	orrs	r1, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f2e:	06d2      	lsls	r2, r2, #27
 8004f30:	430a      	orrs	r2, r1
 8004f32:	4912      	ldr	r1, [pc, #72]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f38:	4b10      	ldr	r3, [pc, #64]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f44:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a0c      	ldr	r2, [pc, #48]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f50:	f7fd ffb2 	bl	8002eb8 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fd ffae 	bl	8002eb8 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e058      	b.n	800501c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	4b04      	ldr	r3, [pc, #16]	@ (8004f7c <HAL_RCC_OscConfig+0x778>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f76:	e050      	b.n	800501a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e04f      	b.n	800501c <HAL_RCC_OscConfig+0x818>
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f84:	4b27      	ldr	r3, [pc, #156]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d144      	bne.n	800501a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f90:	4b24      	ldr	r3, [pc, #144]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a23      	ldr	r2, [pc, #140]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f9c:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a20      	ldr	r2, [pc, #128]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fa8:	f7fd ff86 	bl	8002eb8 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fd ff82 	bl	8002eb8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e02c      	b.n	800501c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc2:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x7ac>
 8004fce:	e024      	b.n	800501a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d01f      	beq.n	8005016 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd6:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a12      	ldr	r2, [pc, #72]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004fdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fd ff69 	bl	8002eb8 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fd ff65 	bl	8002eb8 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e00f      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ffc:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005008:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	4905      	ldr	r1, [pc, #20]	@ (8005024 <HAL_RCC_OscConfig+0x820>)
 800500e:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <HAL_RCC_OscConfig+0x824>)
 8005010:	4013      	ands	r3, r2
 8005012:	60cb      	str	r3, [r1, #12]
 8005014:	e001      	b.n	800501a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40021000 	.word	0x40021000
 8005028:	feeefffc 	.word	0xfeeefffc

0800502c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0e7      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b75      	ldr	r3, [pc, #468]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d910      	bls.n	8005070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b72      	ldr	r3, [pc, #456]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 0207 	bic.w	r2, r3, #7
 8005056:	4970      	ldr	r1, [pc, #448]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b6e      	ldr	r3, [pc, #440]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0cf      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d010      	beq.n	800509e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	4b66      	ldr	r3, [pc, #408]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005088:	429a      	cmp	r2, r3
 800508a:	d908      	bls.n	800509e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b63      	ldr	r3, [pc, #396]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4960      	ldr	r1, [pc, #384]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d04c      	beq.n	8005144 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b2:	4b5a      	ldr	r3, [pc, #360]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d121      	bne.n	8005102 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0a6      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ca:	4b54      	ldr	r3, [pc, #336]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d115      	bne.n	8005102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e09a      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050e2:	4b4e      	ldr	r3, [pc, #312]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e08e      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f2:	4b4a      	ldr	r3, [pc, #296]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e086      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005102:	4b46      	ldr	r3, [pc, #280]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4943      	ldr	r1, [pc, #268]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005114:	f7fd fed0 	bl	8002eb8 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	e00a      	b.n	8005132 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fd fecc 	bl	8002eb8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e06e      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005132:	4b3a      	ldr	r3, [pc, #232]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 020c 	and.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d1eb      	bne.n	800511c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d010      	beq.n	8005172 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	4b31      	ldr	r3, [pc, #196]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800515c:	429a      	cmp	r2, r3
 800515e:	d208      	bcs.n	8005172 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005160:	4b2e      	ldr	r3, [pc, #184]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	492b      	ldr	r1, [pc, #172]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005172:	4b29      	ldr	r3, [pc, #164]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d210      	bcs.n	80051a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005180:	4b25      	ldr	r3, [pc, #148]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f023 0207 	bic.w	r2, r3, #7
 8005188:	4923      	ldr	r1, [pc, #140]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005190:	4b21      	ldr	r3, [pc, #132]	@ (8005218 <HAL_RCC_ClockConfig+0x1ec>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e036      	b.n	8005210 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ae:	4b1b      	ldr	r3, [pc, #108]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4918      	ldr	r1, [pc, #96]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051cc:	4b13      	ldr	r3, [pc, #76]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4910      	ldr	r1, [pc, #64]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051e0:	f000 f824 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <HAL_RCC_ClockConfig+0x1f0>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	490b      	ldr	r1, [pc, #44]	@ (8005220 <HAL_RCC_ClockConfig+0x1f4>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
 80051fc:	4a09      	ldr	r2, [pc, #36]	@ (8005224 <HAL_RCC_ClockConfig+0x1f8>)
 80051fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_RCC_ClockConfig+0x1fc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fd fe07 	bl	8002e18 <HAL_InitTick>
 800520a:	4603      	mov	r3, r0
 800520c:	72fb      	strb	r3, [r7, #11]

  return status;
 800520e:	7afb      	ldrb	r3, [r7, #11]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40022000 	.word	0x40022000
 800521c:	40021000 	.word	0x40021000
 8005220:	08009ffc 	.word	0x08009ffc
 8005224:	20000008 	.word	0x20000008
 8005228:	2000000c 	.word	0x2000000c

0800522c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	@ 0x24
 8005230:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523a:	4b3e      	ldr	r3, [pc, #248]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005244:	4b3b      	ldr	r3, [pc, #236]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_RCC_GetSysClockFreq+0x34>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d121      	bne.n	800529e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d11e      	bne.n	800529e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005260:	4b34      	ldr	r3, [pc, #208]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800526c:	4b31      	ldr	r3, [pc, #196]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 800526e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	e005      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800527c:	4b2d      	ldr	r3, [pc, #180]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005288:	4a2b      	ldr	r2, [pc, #172]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x10c>)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005290:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10d      	bne.n	80052b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d102      	bne.n	80052aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052a4:	4b25      	ldr	r3, [pc, #148]	@ (800533c <HAL_RCC_GetSysClockFreq+0x110>)
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e004      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d101      	bne.n	80052b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052b0:	4b23      	ldr	r3, [pc, #140]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x114>)
 80052b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d134      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d003      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d003      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0xac>
 80052d0:	e005      	b.n	80052de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052d2:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <HAL_RCC_GetSysClockFreq+0x110>)
 80052d4:	617b      	str	r3, [r7, #20]
      break;
 80052d6:	e005      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052d8:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x114>)
 80052da:	617b      	str	r3, [r7, #20]
      break;
 80052dc:	e002      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	617b      	str	r3, [r7, #20]
      break;
 80052e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e4:	4b13      	ldr	r3, [pc, #76]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	3301      	adds	r3, #1
 80052f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	fb03 f202 	mul.w	r2, r3, r2
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800530a:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x108>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	0e5b      	lsrs	r3, r3, #25
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	3301      	adds	r3, #1
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005324:	69bb      	ldr	r3, [r7, #24]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3724      	adds	r7, #36	@ 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
 8005338:	0800a014 	.word	0x0800a014
 800533c:	00f42400 	.word	0x00f42400
 8005340:	007a1200 	.word	0x007a1200

08005344 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005348:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <HAL_RCC_GetHCLKFreq+0x14>)
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000008 	.word	0x20000008

0800535c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005360:	f7ff fff0 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4904      	ldr	r1, [pc, #16]	@ (8005384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005372:	5ccb      	ldrb	r3, [r1, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	0800a00c 	.word	0x0800a00c

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800538c:	f7ff ffda 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0adb      	lsrs	r3, r3, #11
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000
 80053b0:	0800a00c 	.word	0x0800a00c

080053b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053c0:	4b2a      	ldr	r3, [pc, #168]	@ (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053cc:	f7ff f9b6 	bl	800473c <HAL_PWREx_GetVoltageRange>
 80053d0:	6178      	str	r0, [r7, #20]
 80053d2:	e014      	b.n	80053fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d4:	4b25      	ldr	r3, [pc, #148]	@ (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	4a24      	ldr	r2, [pc, #144]	@ (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053de:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e0:	4b22      	ldr	r3, [pc, #136]	@ (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053ec:	f7ff f9a6 	bl	800473c <HAL_PWREx_GetVoltageRange>
 80053f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053f2:	4b1e      	ldr	r3, [pc, #120]	@ (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f6:	4a1d      	ldr	r2, [pc, #116]	@ (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005404:	d10b      	bne.n	800541e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b80      	cmp	r3, #128	@ 0x80
 800540a:	d919      	bls.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005410:	d902      	bls.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005412:	2302      	movs	r3, #2
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e013      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005418:	2301      	movs	r3, #1
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e010      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b80      	cmp	r3, #128	@ 0x80
 8005422:	d902      	bls.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005424:	2303      	movs	r3, #3
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e00a      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b80      	cmp	r3, #128	@ 0x80
 800542e:	d102      	bne.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005430:	2302      	movs	r3, #2
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	e004      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b70      	cmp	r3, #112	@ 0x70
 800543a:	d101      	bne.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800543c:	2301      	movs	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005440:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 0207 	bic.w	r2, r3, #7
 8005448:	4909      	ldr	r1, [pc, #36]	@ (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	40022000 	.word	0x40022000

08005474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800547c:	2300      	movs	r3, #0
 800547e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005480:	2300      	movs	r3, #0
 8005482:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800548c:	2b00      	cmp	r3, #0
 800548e:	d031      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005494:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005498:	d01a      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800549a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800549e:	d814      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054a8:	d10f      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80054aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054b6:	e00c      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f9de 	bl	8005880 <RCCEx_PLLSAI1_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	74fb      	strb	r3, [r7, #19]
      break;
 80054ce:	e000      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054d8:	4b51      	ldr	r3, [pc, #324]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e6:	494e      	ldr	r1, [pc, #312]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054ee:	e001      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 809e 	beq.w	800563e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005502:	2300      	movs	r3, #0
 8005504:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005506:	4b46      	ldr	r3, [pc, #280]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00d      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551c:	4b40      	ldr	r3, [pc, #256]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	4a3f      	ldr	r2, [pc, #252]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005526:	6593      	str	r3, [r2, #88]	@ 0x58
 8005528:	4b3d      	ldr	r3, [pc, #244]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800552a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005534:	2301      	movs	r3, #1
 8005536:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005538:	4b3a      	ldr	r3, [pc, #232]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a39      	ldr	r2, [pc, #228]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800553e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005544:	f7fd fcb8 	bl	8002eb8 <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800554a:	e009      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554c:	f7fd fcb4 	bl	8002eb8 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d902      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	74fb      	strb	r3, [r7, #19]
        break;
 800555e:	e005      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005560:	4b30      	ldr	r3, [pc, #192]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0ef      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d15a      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005572:	4b2b      	ldr	r3, [pc, #172]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005578:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800557c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01e      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	429a      	cmp	r2, r3
 800558c:	d019      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800558e:	4b24      	ldr	r3, [pc, #144]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005598:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800559a:	4b21      	ldr	r3, [pc, #132]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055ba:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d016      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fd fc74 	bl	8002eb8 <HAL_GetTick>
 80055d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d2:	e00b      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d4:	f7fd fc70 	bl	8002eb8 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d902      	bls.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	74fb      	strb	r3, [r7, #19]
            break;
 80055ea:	e006      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0ec      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005600:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800560e:	4904      	ldr	r1, [pc, #16]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005616:	e009      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	74bb      	strb	r3, [r7, #18]
 800561c:	e006      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800562c:	7c7b      	ldrb	r3, [r7, #17]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d105      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005632:	4b8a      	ldr	r3, [pc, #552]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005636:	4a89      	ldr	r2, [pc, #548]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800563c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800564a:	4b84      	ldr	r3, [pc, #528]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005650:	f023 0203 	bic.w	r2, r3, #3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4980      	ldr	r1, [pc, #512]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800566c:	4b7b      	ldr	r3, [pc, #492]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005672:	f023 020c 	bic.w	r2, r3, #12
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	4978      	ldr	r1, [pc, #480]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800568e:	4b73      	ldr	r3, [pc, #460]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005694:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	496f      	ldr	r1, [pc, #444]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056b0:	4b6a      	ldr	r3, [pc, #424]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056be:	4967      	ldr	r1, [pc, #412]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056d2:	4b62      	ldr	r3, [pc, #392]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	495e      	ldr	r1, [pc, #376]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056f4:	4b59      	ldr	r3, [pc, #356]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	4956      	ldr	r1, [pc, #344]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005716:	4b51      	ldr	r3, [pc, #324]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005724:	494d      	ldr	r1, [pc, #308]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d028      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005738:	4b48      	ldr	r3, [pc, #288]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	4945      	ldr	r1, [pc, #276]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005756:	d106      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005758:	4b40      	ldr	r3, [pc, #256]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a3f      	ldr	r2, [pc, #252]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800575e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005762:	60d3      	str	r3, [r2, #12]
 8005764:	e011      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800576e:	d10c      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3304      	adds	r3, #4
 8005774:	2101      	movs	r1, #1
 8005776:	4618      	mov	r0, r3
 8005778:	f000 f882 	bl	8005880 <RCCEx_PLLSAI1_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005780:	7cfb      	ldrb	r3, [r7, #19]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005786:	7cfb      	ldrb	r3, [r7, #19]
 8005788:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d028      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005796:	4b31      	ldr	r3, [pc, #196]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a4:	492d      	ldr	r1, [pc, #180]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b4:	d106      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b6:	4b29      	ldr	r3, [pc, #164]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	4a28      	ldr	r2, [pc, #160]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057c0:	60d3      	str	r3, [r2, #12]
 80057c2:	e011      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3304      	adds	r3, #4
 80057d2:	2101      	movs	r1, #1
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f853 	bl	8005880 <RCCEx_PLLSAI1_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057de:	7cfb      	ldrb	r3, [r7, #19]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01c      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057f4:	4b19      	ldr	r3, [pc, #100]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005802:	4916      	ldr	r1, [pc, #88]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800580e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005812:	d10c      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3304      	adds	r3, #4
 8005818:	2102      	movs	r1, #2
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f830 	bl	8005880 <RCCEx_PLLSAI1_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800583a:	4b08      	ldr	r3, [pc, #32]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005840:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005848:	4904      	ldr	r1, [pc, #16]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005850:	7cbb      	ldrb	r3, [r7, #18]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40021000 	.word	0x40021000

08005860 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a04      	ldr	r2, [pc, #16]	@ (800587c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800586a:	f043 0304 	orr.w	r3, r3, #4
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000

08005880 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800588e:	4b74      	ldr	r3, [pc, #464]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800589a:	4b71      	ldr	r3, [pc, #452]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0203 	and.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d10d      	bne.n	80058c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
       ||
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
       ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d047      	beq.n	8005956 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	e044      	b.n	8005956 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d018      	beq.n	8005906 <RCCEx_PLLSAI1_Config+0x86>
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d825      	bhi.n	8005924 <RCCEx_PLLSAI1_Config+0xa4>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d002      	beq.n	80058e2 <RCCEx_PLLSAI1_Config+0x62>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d009      	beq.n	80058f4 <RCCEx_PLLSAI1_Config+0x74>
 80058e0:	e020      	b.n	8005924 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11d      	bne.n	800592a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f2:	e01a      	b.n	800592a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d116      	bne.n	800592e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005904:	e013      	b.n	800592e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005906:	4b56      	ldr	r3, [pc, #344]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005912:	4b53      	ldr	r3, [pc, #332]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005922:	e006      	b.n	8005932 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e004      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005932:	bf00      	nop
    }

    if(status == HAL_OK)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800593a:	4b49      	ldr	r3, [pc, #292]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	430b      	orrs	r3, r1
 8005950:	4943      	ldr	r1, [pc, #268]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005952:	4313      	orrs	r3, r2
 8005954:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d17c      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800595c:	4b40      	ldr	r3, [pc, #256]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a3f      	ldr	r2, [pc, #252]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005962:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005968:	f7fd faa6 	bl	8002eb8 <HAL_GetTick>
 800596c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800596e:	e009      	b.n	8005984 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005970:	f7fd faa2 	bl	8002eb8 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	73fb      	strb	r3, [r7, #15]
        break;
 8005982:	e005      	b.n	8005990 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005984:	4b36      	ldr	r3, [pc, #216]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ef      	bne.n	8005970 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d15f      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800599c:	4b30      	ldr	r3, [pc, #192]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80059a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	0211      	lsls	r1, r2, #8
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68d2      	ldr	r2, [r2, #12]
 80059b2:	06d2      	lsls	r2, r2, #27
 80059b4:	430a      	orrs	r2, r1
 80059b6:	492a      	ldr	r1, [pc, #168]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]
 80059bc:	e027      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d112      	bne.n	80059ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059c4:	4b26      	ldr	r3, [pc, #152]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80059cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6892      	ldr	r2, [r2, #8]
 80059d4:	0211      	lsls	r1, r2, #8
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6912      	ldr	r2, [r2, #16]
 80059da:	0852      	lsrs	r2, r2, #1
 80059dc:	3a01      	subs	r2, #1
 80059de:	0552      	lsls	r2, r2, #21
 80059e0:	430a      	orrs	r2, r1
 80059e2:	491f      	ldr	r1, [pc, #124]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	610b      	str	r3, [r1, #16]
 80059e8:	e011      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6892      	ldr	r2, [r2, #8]
 80059fa:	0211      	lsls	r1, r2, #8
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6952      	ldr	r2, [r2, #20]
 8005a00:	0852      	lsrs	r2, r2, #1
 8005a02:	3a01      	subs	r2, #1
 8005a04:	0652      	lsls	r2, r2, #25
 8005a06:	430a      	orrs	r2, r1
 8005a08:	4915      	ldr	r1, [pc, #84]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a0e:	4b14      	ldr	r3, [pc, #80]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a13      	ldr	r2, [pc, #76]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fd fa4d 	bl	8002eb8 <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a20:	e009      	b.n	8005a36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a22:	f7fd fa49 	bl	8002eb8 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d902      	bls.n	8005a36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	73fb      	strb	r3, [r7, #15]
          break;
 8005a34:	e005      	b.n	8005a42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a36:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ef      	beq.n	8005a22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a48:	4b05      	ldr	r3, [pc, #20]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	4903      	ldr	r1, [pc, #12]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000

08005a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e040      	b.n	8005af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc ffee 	bl	8002a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2224      	movs	r2, #36	@ 0x24
 8005a90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb36 	bl	800611c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f907 	bl	8005cc4 <UART_SetConfig>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e01b      	b.n	8005af8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fbb5 	bl	8006260 <UART_CheckIdleState>
 8005af6:	4603      	mov	r3, r0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	@ 0x28
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d177      	bne.n	8005c08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_UART_Transmit+0x24>
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e070      	b.n	8005c0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2221      	movs	r2, #33	@ 0x21
 8005b34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b36:	f7fd f9bf 	bl	8002eb8 <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b54:	d108      	bne.n	8005b68 <HAL_UART_Transmit+0x68>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e003      	b.n	8005b70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b70:	e02f      	b.n	8005bd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2180      	movs	r1, #128	@ 0x80
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fc17 	bl	80063b0 <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e03b      	b.n	8005c0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	881a      	ldrh	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba4:	b292      	uxth	r2, r2
 8005ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3302      	adds	r3, #2
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e007      	b.n	8005bc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1c9      	bne.n	8005b72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2140      	movs	r1, #64	@ 0x40
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fbe1 	bl	80063b0 <UART_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e005      	b.n	8005c0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
  }
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	@ 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d137      	bne.n	8005c9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_UART_Receive_IT+0x24>
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e030      	b.n	8005c9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a18      	ldr	r2, [pc, #96]	@ (8005ca8 <HAL_UART_Receive_IT+0x94>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01f      	beq.n	8005c8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	613b      	str	r3, [r7, #16]
   return(result);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	69f9      	ldr	r1, [r7, #28]
 8005c7e:	6a3a      	ldr	r2, [r7, #32]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fbfa 	bl	800648c <UART_Start_Receive_IT>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	@ 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40008000 	.word	0x40008000

08005cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc8:	b08a      	sub	sp, #40	@ 0x28
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4bb4      	ldr	r3, [pc, #720]	@ (8005fc4 <UART_SetConfig+0x300>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4aa9      	ldr	r2, [pc, #676]	@ (8005fc8 <UART_SetConfig+0x304>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d40:	430a      	orrs	r2, r1
 8005d42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4aa0      	ldr	r2, [pc, #640]	@ (8005fcc <UART_SetConfig+0x308>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d126      	bne.n	8005d9c <UART_SetConfig+0xd8>
 8005d4e:	4ba0      	ldr	r3, [pc, #640]	@ (8005fd0 <UART_SetConfig+0x30c>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d81b      	bhi.n	8005d94 <UART_SetConfig+0xd0>
 8005d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <UART_SetConfig+0xa0>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005d75 	.word	0x08005d75
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7a:	e080      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d82:	e07c      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e078      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e074      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e070      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a8c      	ldr	r2, [pc, #560]	@ (8005fd4 <UART_SetConfig+0x310>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d138      	bne.n	8005e18 <UART_SetConfig+0x154>
 8005da6:	4b8a      	ldr	r3, [pc, #552]	@ (8005fd0 <UART_SetConfig+0x30c>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	d82d      	bhi.n	8005e10 <UART_SetConfig+0x14c>
 8005db4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <UART_SetConfig+0xf8>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	08005e11 	.word	0x08005e11
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e11 	.word	0x08005e11
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005df9 	.word	0x08005df9
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e09 	.word	0x08005e09
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df6:	e042      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e03e      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e03a      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0e:	e036      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e16:	e032      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8005fc8 <UART_SetConfig+0x304>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d12a      	bne.n	8005e78 <UART_SetConfig+0x1b4>
 8005e22:	4b6b      	ldr	r3, [pc, #428]	@ (8005fd0 <UART_SetConfig+0x30c>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e30:	d01a      	beq.n	8005e68 <UART_SetConfig+0x1a4>
 8005e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e36:	d81b      	bhi.n	8005e70 <UART_SetConfig+0x1ac>
 8005e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e3c:	d00c      	beq.n	8005e58 <UART_SetConfig+0x194>
 8005e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e42:	d815      	bhi.n	8005e70 <UART_SetConfig+0x1ac>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <UART_SetConfig+0x18c>
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4c:	d008      	beq.n	8005e60 <UART_SetConfig+0x19c>
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x1ac>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e012      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5e:	e00e      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e66:	e00a      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6e:	e006      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e76:	e002      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a51      	ldr	r2, [pc, #324]	@ (8005fc8 <UART_SetConfig+0x304>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d17a      	bne.n	8005f7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d824      	bhi.n	8005eda <UART_SetConfig+0x216>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x1d4>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005edb 	.word	0x08005edb
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005ecb 	.word	0x08005ecb
 8005eac:	08005edb 	.word	0x08005edb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005edb 	.word	0x08005edb
 8005eb8:	08005ed3 	.word	0x08005ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7ff fa4e 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 8005ec0:	61f8      	str	r0, [r7, #28]
        break;
 8005ec2:	e010      	b.n	8005ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec4:	4b44      	ldr	r3, [pc, #272]	@ (8005fd8 <UART_SetConfig+0x314>)
 8005ec6:	61fb      	str	r3, [r7, #28]
        break;
 8005ec8:	e00d      	b.n	8005ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eca:	f7ff f9af 	bl	800522c <HAL_RCC_GetSysClockFreq>
 8005ece:	61f8      	str	r0, [r7, #28]
        break;
 8005ed0:	e009      	b.n	8005ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ed6:	61fb      	str	r3, [r7, #28]
        break;
 8005ed8:	e005      	b.n	8005ee6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8107 	beq.w	80060fc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d305      	bcc.n	8005f0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f10:	e0f4      	b.n	80060fc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2200      	movs	r2, #0
 8005f16:	461c      	mov	r4, r3
 8005f18:	4615      	mov	r5, r2
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	022b      	lsls	r3, r5, #8
 8005f24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f28:	0222      	lsls	r2, r4, #8
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	6849      	ldr	r1, [r1, #4]
 8005f2e:	0849      	lsrs	r1, r1, #1
 8005f30:	2000      	movs	r0, #0
 8005f32:	4688      	mov	r8, r1
 8005f34:	4681      	mov	r9, r0
 8005f36:	eb12 0a08 	adds.w	sl, r2, r8
 8005f3a:	eb43 0b09 	adc.w	fp, r3, r9
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f7fa feca 	bl	8000ce8 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f62:	d308      	bcc.n	8005f76 <UART_SetConfig+0x2b2>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6a:	d204      	bcs.n	8005f76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	60da      	str	r2, [r3, #12]
 8005f74:	e0c2      	b.n	80060fc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f7c:	e0be      	b.n	80060fc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f86:	d16a      	bne.n	800605e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d834      	bhi.n	8005ffa <UART_SetConfig+0x336>
 8005f90:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x2d4>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fdd 	.word	0x08005fdd
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005ffb 	.word	0x08005ffb
 8005fa8:	08005feb 	.word	0x08005feb
 8005fac:	08005ffb 	.word	0x08005ffb
 8005fb0:	08005ffb 	.word	0x08005ffb
 8005fb4:	08005ffb 	.word	0x08005ffb
 8005fb8:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7ff f9ce 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 8005fc0:	61f8      	str	r0, [r7, #28]
        break;
 8005fc2:	e020      	b.n	8006006 <UART_SetConfig+0x342>
 8005fc4:	efff69f3 	.word	0xefff69f3
 8005fc8:	40008000 	.word	0x40008000
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40004400 	.word	0x40004400
 8005fd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7ff f9d4 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61f8      	str	r0, [r7, #28]
        break;
 8005fe2:	e010      	b.n	8006006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8006118 <UART_SetConfig+0x454>)
 8005fe6:	61fb      	str	r3, [r7, #28]
        break;
 8005fe8:	e00d      	b.n	8006006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7ff f91f 	bl	800522c <HAL_RCC_GetSysClockFreq>
 8005fee:	61f8      	str	r0, [r7, #28]
        break;
 8005ff0:	e009      	b.n	8006006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff6:	61fb      	str	r3, [r7, #28]
        break;
 8005ff8:	e005      	b.n	8006006 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d077      	beq.n	80060fc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	005a      	lsls	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	441a      	add	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d916      	bls.n	8006056 <UART_SetConfig+0x392>
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602e:	d212      	bcs.n	8006056 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f023 030f 	bic.w	r3, r3, #15
 8006038:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	b29b      	uxth	r3, r3
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	b29a      	uxth	r2, r3
 8006046:	8afb      	ldrh	r3, [r7, #22]
 8006048:	4313      	orrs	r3, r2
 800604a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	8afa      	ldrh	r2, [r7, #22]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	e052      	b.n	80060fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800605c:	e04e      	b.n	80060fc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800605e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006062:	2b08      	cmp	r3, #8
 8006064:	d827      	bhi.n	80060b6 <UART_SetConfig+0x3f2>
 8006066:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <UART_SetConfig+0x3a8>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	080060b7 	.word	0x080060b7
 800607c:	080060a7 	.word	0x080060a7
 8006080:	080060b7 	.word	0x080060b7
 8006084:	080060b7 	.word	0x080060b7
 8006088:	080060b7 	.word	0x080060b7
 800608c:	080060af 	.word	0x080060af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006090:	f7ff f964 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 8006094:	61f8      	str	r0, [r7, #28]
        break;
 8006096:	e014      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006098:	f7ff f976 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 800609c:	61f8      	str	r0, [r7, #28]
        break;
 800609e:	e010      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006118 <UART_SetConfig+0x454>)
 80060a2:	61fb      	str	r3, [r7, #28]
        break;
 80060a4:	e00d      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a6:	f7ff f8c1 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80060aa:	61f8      	str	r0, [r7, #28]
        break;
 80060ac:	e009      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060b2:	61fb      	str	r3, [r7, #28]
        break;
 80060b4:	e005      	b.n	80060c2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060c0:	bf00      	nop
    }

    if (pclk != 0U)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d019      	beq.n	80060fc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	085a      	lsrs	r2, r3, #1
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b0f      	cmp	r3, #15
 80060e0:	d909      	bls.n	80060f6 <UART_SetConfig+0x432>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e8:	d205      	bcs.n	80060f6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e002      	b.n	80060fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006108:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800610c:	4618      	mov	r0, r3
 800610e:	3728      	adds	r7, #40	@ 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006116:	bf00      	nop
 8006118:	00f42400 	.word	0x00f42400

0800611c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800621a:	d10a      	bne.n	8006232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b098      	sub	sp, #96	@ 0x60
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006270:	f7fc fe22 	bl	8002eb8 <HAL_GetTick>
 8006274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b08      	cmp	r3, #8
 8006282:	d12e      	bne.n	80062e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f88c 	bl	80063b0 <UART_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d021      	beq.n	80062e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e062      	b.n	80063a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d149      	bne.n	8006384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f8:	2200      	movs	r2, #0
 80062fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f856 	bl	80063b0 <UART_WaitOnFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03c      	beq.n	8006384 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	623b      	str	r3, [r7, #32]
   return(result);
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800631e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006328:	633b      	str	r3, [r7, #48]	@ 0x30
 800632a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800632e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e6      	bne.n	800630a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	60fb      	str	r3, [r7, #12]
   return(result);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800635c:	61fa      	str	r2, [r7, #28]
 800635e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	69b9      	ldr	r1, [r7, #24]
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	617b      	str	r3, [r7, #20]
   return(result);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e011      	b.n	80063a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3758      	adds	r7, #88	@ 0x58
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	4613      	mov	r3, r2
 80063be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c0:	e04f      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d04b      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ca:	f7fc fd75 	bl	8002eb8 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e04e      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d037      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b80      	cmp	r3, #128	@ 0x80
 80063f6:	d034      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b40      	cmp	r3, #64	@ 0x40
 80063fc:	d031      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d110      	bne.n	800642e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2208      	movs	r2, #8
 8006412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f8ff 	bl	8006618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2208      	movs	r2, #8
 800641e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e029      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643c:	d111      	bne.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f8e5 	bl	8006618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e00f      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4013      	ands	r3, r2
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	429a      	cmp	r2, r3
 800647e:	d0a0      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800648c:	b480      	push	{r7}
 800648e:	b097      	sub	sp, #92	@ 0x5c
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064be:	d10e      	bne.n	80064de <UART_Start_Receive_IT+0x52>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <UART_Start_Receive_IT+0x48>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80064ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064d2:	e02d      	b.n	8006530 <UART_Start_Receive_IT+0xa4>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	22ff      	movs	r2, #255	@ 0xff
 80064d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064dc:	e028      	b.n	8006530 <UART_Start_Receive_IT+0xa4>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10d      	bne.n	8006502 <UART_Start_Receive_IT+0x76>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <UART_Start_Receive_IT+0x6c>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	22ff      	movs	r2, #255	@ 0xff
 80064f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064f6:	e01b      	b.n	8006530 <UART_Start_Receive_IT+0xa4>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	227f      	movs	r2, #127	@ 0x7f
 80064fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006500:	e016      	b.n	8006530 <UART_Start_Receive_IT+0xa4>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800650a:	d10d      	bne.n	8006528 <UART_Start_Receive_IT+0x9c>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <UART_Start_Receive_IT+0x92>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	227f      	movs	r2, #127	@ 0x7f
 8006518:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800651c:	e008      	b.n	8006530 <UART_Start_Receive_IT+0xa4>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	223f      	movs	r2, #63	@ 0x3f
 8006522:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006526:	e003      	b.n	8006530 <UART_Start_Receive_IT+0xa4>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2222      	movs	r2, #34	@ 0x22
 800653c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	657b      	str	r3, [r7, #84]	@ 0x54
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3308      	adds	r3, #8
 800655e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006560:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006562:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800656e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657c:	d107      	bne.n	800658e <UART_Start_Receive_IT+0x102>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a21      	ldr	r2, [pc, #132]	@ (8006610 <UART_Start_Receive_IT+0x184>)
 800658a:	669a      	str	r2, [r3, #104]	@ 0x68
 800658c:	e002      	b.n	8006594 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a20      	ldr	r2, [pc, #128]	@ (8006614 <UART_Start_Receive_IT+0x188>)
 8006592:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d019      	beq.n	80065d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80065b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80065bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80065c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_Start_Receive_IT+0x110>
 80065ce:	e018      	b.n	8006602 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	613b      	str	r3, [r7, #16]
   return(result);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f043 0320 	orr.w	r3, r3, #32
 80065e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	69f9      	ldr	r1, [r7, #28]
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e6      	bne.n	80065d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	375c      	adds	r7, #92	@ 0x5c
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	0800689d 	.word	0x0800689d
 8006614:	080066e1 	.word	0x080066e1

08006618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b095      	sub	sp, #84	@ 0x54
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	61fb      	str	r3, [r7, #28]
   return(result);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668a:	2b01      	cmp	r3, #1
 800668c:	d118      	bne.n	80066c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	60bb      	str	r3, [r7, #8]
   return(result);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 0310 	bic.w	r3, r3, #16
 80066a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6979      	ldr	r1, [r7, #20]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e6      	bne.n	800668e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066d4:	bf00      	nop
 80066d6:	3754      	adds	r7, #84	@ 0x54
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b09c      	sub	sp, #112	@ 0x70
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066f8:	2b22      	cmp	r3, #34	@ 0x22
 80066fa:	f040 80be 	bne.w	800687a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006704:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006708:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800670c:	b2d9      	uxtb	r1, r3
 800670e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006712:	b2da      	uxtb	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	400a      	ands	r2, r1
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 80a3 	bne.w	800688e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006766:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006768:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800676c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e6      	bne.n	8006748 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800678a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	667b      	str	r3, [r7, #100]	@ 0x64
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800679a:	647a      	str	r2, [r7, #68]	@ 0x44
 800679c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e5      	bne.n	800677a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a34      	ldr	r2, [pc, #208]	@ (8006898 <UART_RxISR_8BIT+0x1b8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01f      	beq.n	800680c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d018      	beq.n	800680c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	623b      	str	r3, [r7, #32]
   return(result);
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80067fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e6      	bne.n	80067da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006810:	2b01      	cmp	r3, #1
 8006812:	d12e      	bne.n	8006872 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60fb      	str	r3, [r7, #12]
   return(result);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	69b9      	ldr	r1, [r7, #24]
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	617b      	str	r3, [r7, #20]
   return(result);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2b10      	cmp	r3, #16
 8006858:	d103      	bne.n	8006862 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2210      	movs	r2, #16
 8006860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff fa1e 	bl	8005cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006870:	e00d      	b.n	800688e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fb fcb6 	bl	80021e4 <HAL_UART_RxCpltCallback>
}
 8006878:	e009      	b.n	800688e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	8b1b      	ldrh	r3, [r3, #24]
 8006880:	b29a      	uxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0208 	orr.w	r2, r2, #8
 800688a:	b292      	uxth	r2, r2
 800688c:	831a      	strh	r2, [r3, #24]
}
 800688e:	bf00      	nop
 8006890:	3770      	adds	r7, #112	@ 0x70
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40008000 	.word	0x40008000

0800689c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b09c      	sub	sp, #112	@ 0x70
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b4:	2b22      	cmp	r3, #34	@ 0x22
 80068b6:	f040 80be 	bne.w	8006a36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80068c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80068ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80068ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80068d2:	4013      	ands	r3, r2
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068de:	1c9a      	adds	r2, r3, #2
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 80a3 	bne.w	8006a4a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006918:	667b      	str	r3, [r7, #100]	@ 0x64
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006922:	657b      	str	r3, [r7, #84]	@ 0x54
 8006924:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006928:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e6      	bne.n	8006904 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	663b      	str	r3, [r7, #96]	@ 0x60
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006956:	643a      	str	r2, [r7, #64]	@ 0x40
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800695c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e5      	bne.n	8006936 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a34      	ldr	r2, [pc, #208]	@ (8006a54 <UART_RxISR_16BIT+0x1b8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d01f      	beq.n	80069c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d018      	beq.n	80069c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d12e      	bne.n	8006a2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f023 0310 	bic.w	r3, r3, #16
 80069ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6979      	ldr	r1, [r7, #20]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	613b      	str	r3, [r7, #16]
   return(result);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e6      	bne.n	80069d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d103      	bne.n	8006a1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2210      	movs	r2, #16
 8006a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff f940 	bl	8005cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a2c:	e00d      	b.n	8006a4a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fb fbd8 	bl	80021e4 <HAL_UART_RxCpltCallback>
}
 8006a34:	e009      	b.n	8006a4a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	8b1b      	ldrh	r3, [r3, #24]
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	b292      	uxth	r2, r2
 8006a48:	831a      	strh	r2, [r3, #24]
}
 8006a4a:	bf00      	nop
 8006a4c:	3770      	adds	r7, #112	@ 0x70
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40008000 	.word	0x40008000

08006a58 <__cvt>:
 8006a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	ec57 6b10 	vmov	r6, r7, d0
 8006a60:	2f00      	cmp	r7, #0
 8006a62:	460c      	mov	r4, r1
 8006a64:	4619      	mov	r1, r3
 8006a66:	463b      	mov	r3, r7
 8006a68:	bfbb      	ittet	lt
 8006a6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a6e:	461f      	movlt	r7, r3
 8006a70:	2300      	movge	r3, #0
 8006a72:	232d      	movlt	r3, #45	@ 0x2d
 8006a74:	700b      	strb	r3, [r1, #0]
 8006a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a7c:	4691      	mov	r9, r2
 8006a7e:	f023 0820 	bic.w	r8, r3, #32
 8006a82:	bfbc      	itt	lt
 8006a84:	4632      	movlt	r2, r6
 8006a86:	4616      	movlt	r6, r2
 8006a88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a8c:	d005      	beq.n	8006a9a <__cvt+0x42>
 8006a8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a92:	d100      	bne.n	8006a96 <__cvt+0x3e>
 8006a94:	3401      	adds	r4, #1
 8006a96:	2102      	movs	r1, #2
 8006a98:	e000      	b.n	8006a9c <__cvt+0x44>
 8006a9a:	2103      	movs	r1, #3
 8006a9c:	ab03      	add	r3, sp, #12
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	ab02      	add	r3, sp, #8
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	ec47 6b10 	vmov	d0, r6, r7
 8006aa8:	4653      	mov	r3, sl
 8006aaa:	4622      	mov	r2, r4
 8006aac:	f000 fed0 	bl	8007850 <_dtoa_r>
 8006ab0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	d119      	bne.n	8006aec <__cvt+0x94>
 8006ab8:	f019 0f01 	tst.w	r9, #1
 8006abc:	d00e      	beq.n	8006adc <__cvt+0x84>
 8006abe:	eb00 0904 	add.w	r9, r0, r4
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	f7f9 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ace:	b108      	cbz	r0, 8006ad4 <__cvt+0x7c>
 8006ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ad4:	2230      	movs	r2, #48	@ 0x30
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	454b      	cmp	r3, r9
 8006ada:	d31e      	bcc.n	8006b1a <__cvt+0xc2>
 8006adc:	9b03      	ldr	r3, [sp, #12]
 8006ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ae0:	1b5b      	subs	r3, r3, r5
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	b004      	add	sp, #16
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006af0:	eb00 0904 	add.w	r9, r0, r4
 8006af4:	d1e5      	bne.n	8006ac2 <__cvt+0x6a>
 8006af6:	7803      	ldrb	r3, [r0, #0]
 8006af8:	2b30      	cmp	r3, #48	@ 0x30
 8006afa:	d10a      	bne.n	8006b12 <__cvt+0xba>
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	4630      	mov	r0, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7f9 ffe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b08:	b918      	cbnz	r0, 8006b12 <__cvt+0xba>
 8006b0a:	f1c4 0401 	rsb	r4, r4, #1
 8006b0e:	f8ca 4000 	str.w	r4, [sl]
 8006b12:	f8da 3000 	ldr.w	r3, [sl]
 8006b16:	4499      	add	r9, r3
 8006b18:	e7d3      	b.n	8006ac2 <__cvt+0x6a>
 8006b1a:	1c59      	adds	r1, r3, #1
 8006b1c:	9103      	str	r1, [sp, #12]
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e7d9      	b.n	8006ad6 <__cvt+0x7e>

08006b22 <__exponent>:
 8006b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b24:	2900      	cmp	r1, #0
 8006b26:	bfba      	itte	lt
 8006b28:	4249      	neglt	r1, r1
 8006b2a:	232d      	movlt	r3, #45	@ 0x2d
 8006b2c:	232b      	movge	r3, #43	@ 0x2b
 8006b2e:	2909      	cmp	r1, #9
 8006b30:	7002      	strb	r2, [r0, #0]
 8006b32:	7043      	strb	r3, [r0, #1]
 8006b34:	dd29      	ble.n	8006b8a <__exponent+0x68>
 8006b36:	f10d 0307 	add.w	r3, sp, #7
 8006b3a:	461d      	mov	r5, r3
 8006b3c:	270a      	movs	r7, #10
 8006b3e:	461a      	mov	r2, r3
 8006b40:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b44:	fb07 1416 	mls	r4, r7, r6, r1
 8006b48:	3430      	adds	r4, #48	@ 0x30
 8006b4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b4e:	460c      	mov	r4, r1
 8006b50:	2c63      	cmp	r4, #99	@ 0x63
 8006b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b56:	4631      	mov	r1, r6
 8006b58:	dcf1      	bgt.n	8006b3e <__exponent+0x1c>
 8006b5a:	3130      	adds	r1, #48	@ 0x30
 8006b5c:	1e94      	subs	r4, r2, #2
 8006b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b62:	1c41      	adds	r1, r0, #1
 8006b64:	4623      	mov	r3, r4
 8006b66:	42ab      	cmp	r3, r5
 8006b68:	d30a      	bcc.n	8006b80 <__exponent+0x5e>
 8006b6a:	f10d 0309 	add.w	r3, sp, #9
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	42ac      	cmp	r4, r5
 8006b72:	bf88      	it	hi
 8006b74:	2300      	movhi	r3, #0
 8006b76:	3302      	adds	r3, #2
 8006b78:	4403      	add	r3, r0
 8006b7a:	1a18      	subs	r0, r3, r0
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b88:	e7ed      	b.n	8006b66 <__exponent+0x44>
 8006b8a:	2330      	movs	r3, #48	@ 0x30
 8006b8c:	3130      	adds	r1, #48	@ 0x30
 8006b8e:	7083      	strb	r3, [r0, #2]
 8006b90:	70c1      	strb	r1, [r0, #3]
 8006b92:	1d03      	adds	r3, r0, #4
 8006b94:	e7f1      	b.n	8006b7a <__exponent+0x58>
	...

08006b98 <_printf_float>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	b08d      	sub	sp, #52	@ 0x34
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	4605      	mov	r5, r0
 8006baa:	f000 fd41 	bl	8007630 <_localeconv_r>
 8006bae:	6803      	ldr	r3, [r0, #0]
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fb5c 	bl	8000270 <strlen>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc0:	9005      	str	r0, [sp, #20]
 8006bc2:	3307      	adds	r3, #7
 8006bc4:	f023 0307 	bic.w	r3, r3, #7
 8006bc8:	f103 0208 	add.w	r2, r3, #8
 8006bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8006bd4:	f8c8 2000 	str.w	r2, [r8]
 8006bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006be0:	9307      	str	r3, [sp, #28]
 8006be2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006be6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bee:	4b9c      	ldr	r3, [pc, #624]	@ (8006e60 <_printf_float+0x2c8>)
 8006bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf4:	f7f9 ff9a 	bl	8000b2c <__aeabi_dcmpun>
 8006bf8:	bb70      	cbnz	r0, 8006c58 <_printf_float+0xc0>
 8006bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bfe:	4b98      	ldr	r3, [pc, #608]	@ (8006e60 <_printf_float+0x2c8>)
 8006c00:	f04f 32ff 	mov.w	r2, #4294967295
 8006c04:	f7f9 ff74 	bl	8000af0 <__aeabi_dcmple>
 8006c08:	bb30      	cbnz	r0, 8006c58 <_printf_float+0xc0>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4640      	mov	r0, r8
 8006c10:	4649      	mov	r1, r9
 8006c12:	f7f9 ff63 	bl	8000adc <__aeabi_dcmplt>
 8006c16:	b110      	cbz	r0, 8006c1e <_printf_float+0x86>
 8006c18:	232d      	movs	r3, #45	@ 0x2d
 8006c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c1e:	4a91      	ldr	r2, [pc, #580]	@ (8006e64 <_printf_float+0x2cc>)
 8006c20:	4b91      	ldr	r3, [pc, #580]	@ (8006e68 <_printf_float+0x2d0>)
 8006c22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c26:	bf94      	ite	ls
 8006c28:	4690      	movls	r8, r2
 8006c2a:	4698      	movhi	r8, r3
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	f02b 0304 	bic.w	r3, fp, #4
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	f04f 0900 	mov.w	r9, #0
 8006c3a:	9700      	str	r7, [sp, #0]
 8006c3c:	4633      	mov	r3, r6
 8006c3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 f9d2 	bl	8006fec <_printf_common>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f040 808d 	bne.w	8006d68 <_printf_float+0x1d0>
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c52:	b00d      	add	sp, #52	@ 0x34
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	4642      	mov	r2, r8
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 ff64 	bl	8000b2c <__aeabi_dcmpun>
 8006c64:	b140      	cbz	r0, 8006c78 <_printf_float+0xe0>
 8006c66:	464b      	mov	r3, r9
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bfbc      	itt	lt
 8006c6c:	232d      	movlt	r3, #45	@ 0x2d
 8006c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c72:	4a7e      	ldr	r2, [pc, #504]	@ (8006e6c <_printf_float+0x2d4>)
 8006c74:	4b7e      	ldr	r3, [pc, #504]	@ (8006e70 <_printf_float+0x2d8>)
 8006c76:	e7d4      	b.n	8006c22 <_printf_float+0x8a>
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c7e:	9206      	str	r2, [sp, #24]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	d13b      	bne.n	8006cfc <_printf_float+0x164>
 8006c84:	2306      	movs	r3, #6
 8006c86:	6063      	str	r3, [r4, #4]
 8006c88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	9303      	str	r3, [sp, #12]
 8006c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c98:	ab09      	add	r3, sp, #36	@ 0x24
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	6861      	ldr	r1, [r4, #4]
 8006c9e:	ec49 8b10 	vmov	d0, r8, r9
 8006ca2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f7ff fed6 	bl	8006a58 <__cvt>
 8006cac:	9b06      	ldr	r3, [sp, #24]
 8006cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cb0:	2b47      	cmp	r3, #71	@ 0x47
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	d129      	bne.n	8006d0a <_printf_float+0x172>
 8006cb6:	1cc8      	adds	r0, r1, #3
 8006cb8:	db02      	blt.n	8006cc0 <_printf_float+0x128>
 8006cba:	6863      	ldr	r3, [r4, #4]
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	dd41      	ble.n	8006d44 <_printf_float+0x1ac>
 8006cc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8006cc8:	3901      	subs	r1, #1
 8006cca:	4652      	mov	r2, sl
 8006ccc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cd2:	f7ff ff26 	bl	8006b22 <__exponent>
 8006cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cd8:	1813      	adds	r3, r2, r0
 8006cda:	2a01      	cmp	r2, #1
 8006cdc:	4681      	mov	r9, r0
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	dc02      	bgt.n	8006ce8 <_printf_float+0x150>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	07d2      	lsls	r2, r2, #31
 8006ce6:	d501      	bpl.n	8006cec <_printf_float+0x154>
 8006ce8:	3301      	adds	r3, #1
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0a2      	beq.n	8006c3a <_printf_float+0xa2>
 8006cf4:	232d      	movs	r3, #45	@ 0x2d
 8006cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cfa:	e79e      	b.n	8006c3a <_printf_float+0xa2>
 8006cfc:	9a06      	ldr	r2, [sp, #24]
 8006cfe:	2a47      	cmp	r2, #71	@ 0x47
 8006d00:	d1c2      	bne.n	8006c88 <_printf_float+0xf0>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1c0      	bne.n	8006c88 <_printf_float+0xf0>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e7bd      	b.n	8006c86 <_printf_float+0xee>
 8006d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d0e:	d9db      	bls.n	8006cc8 <_printf_float+0x130>
 8006d10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d14:	d118      	bne.n	8006d48 <_printf_float+0x1b0>
 8006d16:	2900      	cmp	r1, #0
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	dd0b      	ble.n	8006d34 <_printf_float+0x19c>
 8006d1c:	6121      	str	r1, [r4, #16]
 8006d1e:	b913      	cbnz	r3, 8006d26 <_printf_float+0x18e>
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	07d0      	lsls	r0, r2, #31
 8006d24:	d502      	bpl.n	8006d2c <_printf_float+0x194>
 8006d26:	3301      	adds	r3, #1
 8006d28:	440b      	add	r3, r1
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d2e:	f04f 0900 	mov.w	r9, #0
 8006d32:	e7db      	b.n	8006cec <_printf_float+0x154>
 8006d34:	b913      	cbnz	r3, 8006d3c <_printf_float+0x1a4>
 8006d36:	6822      	ldr	r2, [r4, #0]
 8006d38:	07d2      	lsls	r2, r2, #31
 8006d3a:	d501      	bpl.n	8006d40 <_printf_float+0x1a8>
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	e7f4      	b.n	8006d2a <_printf_float+0x192>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e7f2      	b.n	8006d2a <_printf_float+0x192>
 8006d44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	db05      	blt.n	8006d5a <_printf_float+0x1c2>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	6121      	str	r1, [r4, #16]
 8006d52:	07d8      	lsls	r0, r3, #31
 8006d54:	d5ea      	bpl.n	8006d2c <_printf_float+0x194>
 8006d56:	1c4b      	adds	r3, r1, #1
 8006d58:	e7e7      	b.n	8006d2a <_printf_float+0x192>
 8006d5a:	2900      	cmp	r1, #0
 8006d5c:	bfd4      	ite	le
 8006d5e:	f1c1 0202 	rsble	r2, r1, #2
 8006d62:	2201      	movgt	r2, #1
 8006d64:	4413      	add	r3, r2
 8006d66:	e7e0      	b.n	8006d2a <_printf_float+0x192>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	055a      	lsls	r2, r3, #21
 8006d6c:	d407      	bmi.n	8006d7e <_printf_float+0x1e6>
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	4642      	mov	r2, r8
 8006d72:	4631      	mov	r1, r6
 8006d74:	4628      	mov	r0, r5
 8006d76:	47b8      	blx	r7
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d12b      	bne.n	8006dd4 <_printf_float+0x23c>
 8006d7c:	e767      	b.n	8006c4e <_printf_float+0xb6>
 8006d7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d82:	f240 80dd 	bls.w	8006f40 <_printf_float+0x3a8>
 8006d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f7f9 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d033      	beq.n	8006dfe <_printf_float+0x266>
 8006d96:	4a37      	ldr	r2, [pc, #220]	@ (8006e74 <_printf_float+0x2dc>)
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	f43f af54 	beq.w	8006c4e <_printf_float+0xb6>
 8006da6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006daa:	4543      	cmp	r3, r8
 8006dac:	db02      	blt.n	8006db4 <_printf_float+0x21c>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	07d8      	lsls	r0, r3, #31
 8006db2:	d50f      	bpl.n	8006dd4 <_printf_float+0x23c>
 8006db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af45 	beq.w	8006c4e <_printf_float+0xb6>
 8006dc4:	f04f 0900 	mov.w	r9, #0
 8006dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dcc:	f104 0a1a 	add.w	sl, r4, #26
 8006dd0:	45c8      	cmp	r8, r9
 8006dd2:	dc09      	bgt.n	8006de8 <_printf_float+0x250>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	079b      	lsls	r3, r3, #30
 8006dd8:	f100 8103 	bmi.w	8006fe2 <_printf_float+0x44a>
 8006ddc:	68e0      	ldr	r0, [r4, #12]
 8006dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006de0:	4298      	cmp	r0, r3
 8006de2:	bfb8      	it	lt
 8006de4:	4618      	movlt	r0, r3
 8006de6:	e734      	b.n	8006c52 <_printf_float+0xba>
 8006de8:	2301      	movs	r3, #1
 8006dea:	4652      	mov	r2, sl
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	f43f af2b 	beq.w	8006c4e <_printf_float+0xb6>
 8006df8:	f109 0901 	add.w	r9, r9, #1
 8006dfc:	e7e8      	b.n	8006dd0 <_printf_float+0x238>
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dc39      	bgt.n	8006e78 <_printf_float+0x2e0>
 8006e04:	4a1b      	ldr	r2, [pc, #108]	@ (8006e74 <_printf_float+0x2dc>)
 8006e06:	2301      	movs	r3, #1
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f af1d 	beq.w	8006c4e <_printf_float+0xb6>
 8006e14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e18:	ea59 0303 	orrs.w	r3, r9, r3
 8006e1c:	d102      	bne.n	8006e24 <_printf_float+0x28c>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	07d9      	lsls	r1, r3, #31
 8006e22:	d5d7      	bpl.n	8006dd4 <_printf_float+0x23c>
 8006e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	f43f af0d 	beq.w	8006c4e <_printf_float+0xb6>
 8006e34:	f04f 0a00 	mov.w	sl, #0
 8006e38:	f104 0b1a 	add.w	fp, r4, #26
 8006e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3e:	425b      	negs	r3, r3
 8006e40:	4553      	cmp	r3, sl
 8006e42:	dc01      	bgt.n	8006e48 <_printf_float+0x2b0>
 8006e44:	464b      	mov	r3, r9
 8006e46:	e793      	b.n	8006d70 <_printf_float+0x1d8>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	465a      	mov	r2, fp
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f aefb 	beq.w	8006c4e <_printf_float+0xb6>
 8006e58:	f10a 0a01 	add.w	sl, sl, #1
 8006e5c:	e7ee      	b.n	8006e3c <_printf_float+0x2a4>
 8006e5e:	bf00      	nop
 8006e60:	7fefffff 	.word	0x7fefffff
 8006e64:	0800a044 	.word	0x0800a044
 8006e68:	0800a048 	.word	0x0800a048
 8006e6c:	0800a04c 	.word	0x0800a04c
 8006e70:	0800a050 	.word	0x0800a050
 8006e74:	0800a054 	.word	0x0800a054
 8006e78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e7e:	4553      	cmp	r3, sl
 8006e80:	bfa8      	it	ge
 8006e82:	4653      	movge	r3, sl
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	4699      	mov	r9, r3
 8006e88:	dc36      	bgt.n	8006ef8 <_printf_float+0x360>
 8006e8a:	f04f 0b00 	mov.w	fp, #0
 8006e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e92:	f104 021a 	add.w	r2, r4, #26
 8006e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e98:	9306      	str	r3, [sp, #24]
 8006e9a:	eba3 0309 	sub.w	r3, r3, r9
 8006e9e:	455b      	cmp	r3, fp
 8006ea0:	dc31      	bgt.n	8006f06 <_printf_float+0x36e>
 8006ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea4:	459a      	cmp	sl, r3
 8006ea6:	dc3a      	bgt.n	8006f1e <_printf_float+0x386>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	07da      	lsls	r2, r3, #31
 8006eac:	d437      	bmi.n	8006f1e <_printf_float+0x386>
 8006eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb0:	ebaa 0903 	sub.w	r9, sl, r3
 8006eb4:	9b06      	ldr	r3, [sp, #24]
 8006eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006eba:	4599      	cmp	r9, r3
 8006ebc:	bfa8      	it	ge
 8006ebe:	4699      	movge	r9, r3
 8006ec0:	f1b9 0f00 	cmp.w	r9, #0
 8006ec4:	dc33      	bgt.n	8006f2e <_printf_float+0x396>
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ece:	f104 0b1a 	add.w	fp, r4, #26
 8006ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed8:	eba3 0309 	sub.w	r3, r3, r9
 8006edc:	4543      	cmp	r3, r8
 8006ede:	f77f af79 	ble.w	8006dd4 <_printf_float+0x23c>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	465a      	mov	r2, fp
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	f43f aeae 	beq.w	8006c4e <_printf_float+0xb6>
 8006ef2:	f108 0801 	add.w	r8, r8, #1
 8006ef6:	e7ec      	b.n	8006ed2 <_printf_float+0x33a>
 8006ef8:	4642      	mov	r2, r8
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	d1c2      	bne.n	8006e8a <_printf_float+0x2f2>
 8006f04:	e6a3      	b.n	8006c4e <_printf_float+0xb6>
 8006f06:	2301      	movs	r3, #1
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	9206      	str	r2, [sp, #24]
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	f43f ae9c 	beq.w	8006c4e <_printf_float+0xb6>
 8006f16:	9a06      	ldr	r2, [sp, #24]
 8006f18:	f10b 0b01 	add.w	fp, fp, #1
 8006f1c:	e7bb      	b.n	8006e96 <_printf_float+0x2fe>
 8006f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d1c0      	bne.n	8006eae <_printf_float+0x316>
 8006f2c:	e68f      	b.n	8006c4e <_printf_float+0xb6>
 8006f2e:	9a06      	ldr	r2, [sp, #24]
 8006f30:	464b      	mov	r3, r9
 8006f32:	4442      	add	r2, r8
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d1c3      	bne.n	8006ec6 <_printf_float+0x32e>
 8006f3e:	e686      	b.n	8006c4e <_printf_float+0xb6>
 8006f40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f44:	f1ba 0f01 	cmp.w	sl, #1
 8006f48:	dc01      	bgt.n	8006f4e <_printf_float+0x3b6>
 8006f4a:	07db      	lsls	r3, r3, #31
 8006f4c:	d536      	bpl.n	8006fbc <_printf_float+0x424>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4642      	mov	r2, r8
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f ae78 	beq.w	8006c4e <_printf_float+0xb6>
 8006f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae70 	beq.w	8006c4e <_printf_float+0xb6>
 8006f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f7a:	f7f9 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f7e:	b9c0      	cbnz	r0, 8006fb2 <_printf_float+0x41a>
 8006f80:	4653      	mov	r3, sl
 8006f82:	f108 0201 	add.w	r2, r8, #1
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d10c      	bne.n	8006faa <_printf_float+0x412>
 8006f90:	e65d      	b.n	8006c4e <_printf_float+0xb6>
 8006f92:	2301      	movs	r3, #1
 8006f94:	465a      	mov	r2, fp
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f ae56 	beq.w	8006c4e <_printf_float+0xb6>
 8006fa2:	f108 0801 	add.w	r8, r8, #1
 8006fa6:	45d0      	cmp	r8, sl
 8006fa8:	dbf3      	blt.n	8006f92 <_printf_float+0x3fa>
 8006faa:	464b      	mov	r3, r9
 8006fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fb0:	e6df      	b.n	8006d72 <_printf_float+0x1da>
 8006fb2:	f04f 0800 	mov.w	r8, #0
 8006fb6:	f104 0b1a 	add.w	fp, r4, #26
 8006fba:	e7f4      	b.n	8006fa6 <_printf_float+0x40e>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4642      	mov	r2, r8
 8006fc0:	e7e1      	b.n	8006f86 <_printf_float+0x3ee>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	464a      	mov	r2, r9
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f43f ae3e 	beq.w	8006c4e <_printf_float+0xb6>
 8006fd2:	f108 0801 	add.w	r8, r8, #1
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fda:	1a5b      	subs	r3, r3, r1
 8006fdc:	4543      	cmp	r3, r8
 8006fde:	dcf0      	bgt.n	8006fc2 <_printf_float+0x42a>
 8006fe0:	e6fc      	b.n	8006ddc <_printf_float+0x244>
 8006fe2:	f04f 0800 	mov.w	r8, #0
 8006fe6:	f104 0919 	add.w	r9, r4, #25
 8006fea:	e7f4      	b.n	8006fd6 <_printf_float+0x43e>

08006fec <_printf_common>:
 8006fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	4698      	mov	r8, r3
 8006ff4:	688a      	ldr	r2, [r1, #8]
 8006ff6:	690b      	ldr	r3, [r1, #16]
 8006ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	bfb8      	it	lt
 8007000:	4613      	movlt	r3, r2
 8007002:	6033      	str	r3, [r6, #0]
 8007004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007008:	4607      	mov	r7, r0
 800700a:	460c      	mov	r4, r1
 800700c:	b10a      	cbz	r2, 8007012 <_printf_common+0x26>
 800700e:	3301      	adds	r3, #1
 8007010:	6033      	str	r3, [r6, #0]
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	0699      	lsls	r1, r3, #26
 8007016:	bf42      	ittt	mi
 8007018:	6833      	ldrmi	r3, [r6, #0]
 800701a:	3302      	addmi	r3, #2
 800701c:	6033      	strmi	r3, [r6, #0]
 800701e:	6825      	ldr	r5, [r4, #0]
 8007020:	f015 0506 	ands.w	r5, r5, #6
 8007024:	d106      	bne.n	8007034 <_printf_common+0x48>
 8007026:	f104 0a19 	add.w	sl, r4, #25
 800702a:	68e3      	ldr	r3, [r4, #12]
 800702c:	6832      	ldr	r2, [r6, #0]
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	42ab      	cmp	r3, r5
 8007032:	dc26      	bgt.n	8007082 <_printf_common+0x96>
 8007034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	3b00      	subs	r3, #0
 800703c:	bf18      	it	ne
 800703e:	2301      	movne	r3, #1
 8007040:	0692      	lsls	r2, r2, #26
 8007042:	d42b      	bmi.n	800709c <_printf_common+0xb0>
 8007044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007048:	4641      	mov	r1, r8
 800704a:	4638      	mov	r0, r7
 800704c:	47c8      	blx	r9
 800704e:	3001      	adds	r0, #1
 8007050:	d01e      	beq.n	8007090 <_printf_common+0xa4>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	6922      	ldr	r2, [r4, #16]
 8007056:	f003 0306 	and.w	r3, r3, #6
 800705a:	2b04      	cmp	r3, #4
 800705c:	bf02      	ittt	eq
 800705e:	68e5      	ldreq	r5, [r4, #12]
 8007060:	6833      	ldreq	r3, [r6, #0]
 8007062:	1aed      	subeq	r5, r5, r3
 8007064:	68a3      	ldr	r3, [r4, #8]
 8007066:	bf0c      	ite	eq
 8007068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800706c:	2500      	movne	r5, #0
 800706e:	4293      	cmp	r3, r2
 8007070:	bfc4      	itt	gt
 8007072:	1a9b      	subgt	r3, r3, r2
 8007074:	18ed      	addgt	r5, r5, r3
 8007076:	2600      	movs	r6, #0
 8007078:	341a      	adds	r4, #26
 800707a:	42b5      	cmp	r5, r6
 800707c:	d11a      	bne.n	80070b4 <_printf_common+0xc8>
 800707e:	2000      	movs	r0, #0
 8007080:	e008      	b.n	8007094 <_printf_common+0xa8>
 8007082:	2301      	movs	r3, #1
 8007084:	4652      	mov	r2, sl
 8007086:	4641      	mov	r1, r8
 8007088:	4638      	mov	r0, r7
 800708a:	47c8      	blx	r9
 800708c:	3001      	adds	r0, #1
 800708e:	d103      	bne.n	8007098 <_printf_common+0xac>
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007098:	3501      	adds	r5, #1
 800709a:	e7c6      	b.n	800702a <_printf_common+0x3e>
 800709c:	18e1      	adds	r1, r4, r3
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	2030      	movs	r0, #48	@ 0x30
 80070a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070a6:	4422      	add	r2, r4
 80070a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070b0:	3302      	adds	r3, #2
 80070b2:	e7c7      	b.n	8007044 <_printf_common+0x58>
 80070b4:	2301      	movs	r3, #1
 80070b6:	4622      	mov	r2, r4
 80070b8:	4641      	mov	r1, r8
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c8      	blx	r9
 80070be:	3001      	adds	r0, #1
 80070c0:	d0e6      	beq.n	8007090 <_printf_common+0xa4>
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7d9      	b.n	800707a <_printf_common+0x8e>
	...

080070c8 <_printf_i>:
 80070c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	7e0f      	ldrb	r7, [r1, #24]
 80070ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070d0:	2f78      	cmp	r7, #120	@ 0x78
 80070d2:	4691      	mov	r9, r2
 80070d4:	4680      	mov	r8, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	469a      	mov	sl, r3
 80070da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070de:	d807      	bhi.n	80070f0 <_printf_i+0x28>
 80070e0:	2f62      	cmp	r7, #98	@ 0x62
 80070e2:	d80a      	bhi.n	80070fa <_printf_i+0x32>
 80070e4:	2f00      	cmp	r7, #0
 80070e6:	f000 80d2 	beq.w	800728e <_printf_i+0x1c6>
 80070ea:	2f58      	cmp	r7, #88	@ 0x58
 80070ec:	f000 80b9 	beq.w	8007262 <_printf_i+0x19a>
 80070f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070f8:	e03a      	b.n	8007170 <_printf_i+0xa8>
 80070fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070fe:	2b15      	cmp	r3, #21
 8007100:	d8f6      	bhi.n	80070f0 <_printf_i+0x28>
 8007102:	a101      	add	r1, pc, #4	@ (adr r1, 8007108 <_printf_i+0x40>)
 8007104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007108:	08007161 	.word	0x08007161
 800710c:	08007175 	.word	0x08007175
 8007110:	080070f1 	.word	0x080070f1
 8007114:	080070f1 	.word	0x080070f1
 8007118:	080070f1 	.word	0x080070f1
 800711c:	080070f1 	.word	0x080070f1
 8007120:	08007175 	.word	0x08007175
 8007124:	080070f1 	.word	0x080070f1
 8007128:	080070f1 	.word	0x080070f1
 800712c:	080070f1 	.word	0x080070f1
 8007130:	080070f1 	.word	0x080070f1
 8007134:	08007275 	.word	0x08007275
 8007138:	0800719f 	.word	0x0800719f
 800713c:	0800722f 	.word	0x0800722f
 8007140:	080070f1 	.word	0x080070f1
 8007144:	080070f1 	.word	0x080070f1
 8007148:	08007297 	.word	0x08007297
 800714c:	080070f1 	.word	0x080070f1
 8007150:	0800719f 	.word	0x0800719f
 8007154:	080070f1 	.word	0x080070f1
 8007158:	080070f1 	.word	0x080070f1
 800715c:	08007237 	.word	0x08007237
 8007160:	6833      	ldr	r3, [r6, #0]
 8007162:	1d1a      	adds	r2, r3, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6032      	str	r2, [r6, #0]
 8007168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800716c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007170:	2301      	movs	r3, #1
 8007172:	e09d      	b.n	80072b0 <_printf_i+0x1e8>
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	1d19      	adds	r1, r3, #4
 800717a:	6031      	str	r1, [r6, #0]
 800717c:	0606      	lsls	r6, r0, #24
 800717e:	d501      	bpl.n	8007184 <_printf_i+0xbc>
 8007180:	681d      	ldr	r5, [r3, #0]
 8007182:	e003      	b.n	800718c <_printf_i+0xc4>
 8007184:	0645      	lsls	r5, r0, #25
 8007186:	d5fb      	bpl.n	8007180 <_printf_i+0xb8>
 8007188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800718c:	2d00      	cmp	r5, #0
 800718e:	da03      	bge.n	8007198 <_printf_i+0xd0>
 8007190:	232d      	movs	r3, #45	@ 0x2d
 8007192:	426d      	negs	r5, r5
 8007194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007198:	4859      	ldr	r0, [pc, #356]	@ (8007300 <_printf_i+0x238>)
 800719a:	230a      	movs	r3, #10
 800719c:	e011      	b.n	80071c2 <_printf_i+0xfa>
 800719e:	6821      	ldr	r1, [r4, #0]
 80071a0:	6833      	ldr	r3, [r6, #0]
 80071a2:	0608      	lsls	r0, r1, #24
 80071a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071a8:	d402      	bmi.n	80071b0 <_printf_i+0xe8>
 80071aa:	0649      	lsls	r1, r1, #25
 80071ac:	bf48      	it	mi
 80071ae:	b2ad      	uxthmi	r5, r5
 80071b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071b2:	4853      	ldr	r0, [pc, #332]	@ (8007300 <_printf_i+0x238>)
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	bf14      	ite	ne
 80071b8:	230a      	movne	r3, #10
 80071ba:	2308      	moveq	r3, #8
 80071bc:	2100      	movs	r1, #0
 80071be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071c2:	6866      	ldr	r6, [r4, #4]
 80071c4:	60a6      	str	r6, [r4, #8]
 80071c6:	2e00      	cmp	r6, #0
 80071c8:	bfa2      	ittt	ge
 80071ca:	6821      	ldrge	r1, [r4, #0]
 80071cc:	f021 0104 	bicge.w	r1, r1, #4
 80071d0:	6021      	strge	r1, [r4, #0]
 80071d2:	b90d      	cbnz	r5, 80071d8 <_printf_i+0x110>
 80071d4:	2e00      	cmp	r6, #0
 80071d6:	d04b      	beq.n	8007270 <_printf_i+0x1a8>
 80071d8:	4616      	mov	r6, r2
 80071da:	fbb5 f1f3 	udiv	r1, r5, r3
 80071de:	fb03 5711 	mls	r7, r3, r1, r5
 80071e2:	5dc7      	ldrb	r7, [r0, r7]
 80071e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071e8:	462f      	mov	r7, r5
 80071ea:	42bb      	cmp	r3, r7
 80071ec:	460d      	mov	r5, r1
 80071ee:	d9f4      	bls.n	80071da <_printf_i+0x112>
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d10b      	bne.n	800720c <_printf_i+0x144>
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	07df      	lsls	r7, r3, #31
 80071f8:	d508      	bpl.n	800720c <_printf_i+0x144>
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	6861      	ldr	r1, [r4, #4]
 80071fe:	4299      	cmp	r1, r3
 8007200:	bfde      	ittt	le
 8007202:	2330      	movle	r3, #48	@ 0x30
 8007204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007208:	f106 36ff 	addle.w	r6, r6, #4294967295
 800720c:	1b92      	subs	r2, r2, r6
 800720e:	6122      	str	r2, [r4, #16]
 8007210:	f8cd a000 	str.w	sl, [sp]
 8007214:	464b      	mov	r3, r9
 8007216:	aa03      	add	r2, sp, #12
 8007218:	4621      	mov	r1, r4
 800721a:	4640      	mov	r0, r8
 800721c:	f7ff fee6 	bl	8006fec <_printf_common>
 8007220:	3001      	adds	r0, #1
 8007222:	d14a      	bne.n	80072ba <_printf_i+0x1f2>
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	b004      	add	sp, #16
 800722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f043 0320 	orr.w	r3, r3, #32
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	4833      	ldr	r0, [pc, #204]	@ (8007304 <_printf_i+0x23c>)
 8007238:	2778      	movs	r7, #120	@ 0x78
 800723a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	6831      	ldr	r1, [r6, #0]
 8007242:	061f      	lsls	r7, r3, #24
 8007244:	f851 5b04 	ldr.w	r5, [r1], #4
 8007248:	d402      	bmi.n	8007250 <_printf_i+0x188>
 800724a:	065f      	lsls	r7, r3, #25
 800724c:	bf48      	it	mi
 800724e:	b2ad      	uxthmi	r5, r5
 8007250:	6031      	str	r1, [r6, #0]
 8007252:	07d9      	lsls	r1, r3, #31
 8007254:	bf44      	itt	mi
 8007256:	f043 0320 	orrmi.w	r3, r3, #32
 800725a:	6023      	strmi	r3, [r4, #0]
 800725c:	b11d      	cbz	r5, 8007266 <_printf_i+0x19e>
 800725e:	2310      	movs	r3, #16
 8007260:	e7ac      	b.n	80071bc <_printf_i+0xf4>
 8007262:	4827      	ldr	r0, [pc, #156]	@ (8007300 <_printf_i+0x238>)
 8007264:	e7e9      	b.n	800723a <_printf_i+0x172>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	f023 0320 	bic.w	r3, r3, #32
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	e7f6      	b.n	800725e <_printf_i+0x196>
 8007270:	4616      	mov	r6, r2
 8007272:	e7bd      	b.n	80071f0 <_printf_i+0x128>
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	6961      	ldr	r1, [r4, #20]
 800727a:	1d18      	adds	r0, r3, #4
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	062e      	lsls	r6, r5, #24
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	d501      	bpl.n	8007288 <_printf_i+0x1c0>
 8007284:	6019      	str	r1, [r3, #0]
 8007286:	e002      	b.n	800728e <_printf_i+0x1c6>
 8007288:	0668      	lsls	r0, r5, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0x1bc>
 800728c:	8019      	strh	r1, [r3, #0]
 800728e:	2300      	movs	r3, #0
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	4616      	mov	r6, r2
 8007294:	e7bc      	b.n	8007210 <_printf_i+0x148>
 8007296:	6833      	ldr	r3, [r6, #0]
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	6032      	str	r2, [r6, #0]
 800729c:	681e      	ldr	r6, [r3, #0]
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7f8 ff94 	bl	80001d0 <memchr>
 80072a8:	b108      	cbz	r0, 80072ae <_printf_i+0x1e6>
 80072aa:	1b80      	subs	r0, r0, r6
 80072ac:	6060      	str	r0, [r4, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	2300      	movs	r3, #0
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b8:	e7aa      	b.n	8007210 <_printf_i+0x148>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	4632      	mov	r2, r6
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	47d0      	blx	sl
 80072c4:	3001      	adds	r0, #1
 80072c6:	d0ad      	beq.n	8007224 <_printf_i+0x15c>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	079b      	lsls	r3, r3, #30
 80072cc:	d413      	bmi.n	80072f6 <_printf_i+0x22e>
 80072ce:	68e0      	ldr	r0, [r4, #12]
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	4298      	cmp	r0, r3
 80072d4:	bfb8      	it	lt
 80072d6:	4618      	movlt	r0, r3
 80072d8:	e7a6      	b.n	8007228 <_printf_i+0x160>
 80072da:	2301      	movs	r3, #1
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d09d      	beq.n	8007224 <_printf_i+0x15c>
 80072e8:	3501      	adds	r5, #1
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	9903      	ldr	r1, [sp, #12]
 80072ee:	1a5b      	subs	r3, r3, r1
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	dcf2      	bgt.n	80072da <_printf_i+0x212>
 80072f4:	e7eb      	b.n	80072ce <_printf_i+0x206>
 80072f6:	2500      	movs	r5, #0
 80072f8:	f104 0619 	add.w	r6, r4, #25
 80072fc:	e7f5      	b.n	80072ea <_printf_i+0x222>
 80072fe:	bf00      	nop
 8007300:	0800a056 	.word	0x0800a056
 8007304:	0800a067 	.word	0x0800a067

08007308 <std>:
 8007308:	2300      	movs	r3, #0
 800730a:	b510      	push	{r4, lr}
 800730c:	4604      	mov	r4, r0
 800730e:	e9c0 3300 	strd	r3, r3, [r0]
 8007312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007316:	6083      	str	r3, [r0, #8]
 8007318:	8181      	strh	r1, [r0, #12]
 800731a:	6643      	str	r3, [r0, #100]	@ 0x64
 800731c:	81c2      	strh	r2, [r0, #14]
 800731e:	6183      	str	r3, [r0, #24]
 8007320:	4619      	mov	r1, r3
 8007322:	2208      	movs	r2, #8
 8007324:	305c      	adds	r0, #92	@ 0x5c
 8007326:	f000 f97b 	bl	8007620 <memset>
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <std+0x58>)
 800732c:	6263      	str	r3, [r4, #36]	@ 0x24
 800732e:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <std+0x5c>)
 8007330:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <std+0x60>)
 8007334:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007336:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <std+0x64>)
 8007338:	6323      	str	r3, [r4, #48]	@ 0x30
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <std+0x68>)
 800733c:	6224      	str	r4, [r4, #32]
 800733e:	429c      	cmp	r4, r3
 8007340:	d006      	beq.n	8007350 <std+0x48>
 8007342:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007346:	4294      	cmp	r4, r2
 8007348:	d002      	beq.n	8007350 <std+0x48>
 800734a:	33d0      	adds	r3, #208	@ 0xd0
 800734c:	429c      	cmp	r4, r3
 800734e:	d105      	bne.n	800735c <std+0x54>
 8007350:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007358:	f000 b9de 	b.w	8007718 <__retarget_lock_init_recursive>
 800735c:	bd10      	pop	{r4, pc}
 800735e:	bf00      	nop
 8007360:	080074f5 	.word	0x080074f5
 8007364:	08007517 	.word	0x08007517
 8007368:	0800754f 	.word	0x0800754f
 800736c:	08007573 	.word	0x08007573
 8007370:	20000820 	.word	0x20000820

08007374 <stdio_exit_handler>:
 8007374:	4a02      	ldr	r2, [pc, #8]	@ (8007380 <stdio_exit_handler+0xc>)
 8007376:	4903      	ldr	r1, [pc, #12]	@ (8007384 <stdio_exit_handler+0x10>)
 8007378:	4803      	ldr	r0, [pc, #12]	@ (8007388 <stdio_exit_handler+0x14>)
 800737a:	f000 b869 	b.w	8007450 <_fwalk_sglue>
 800737e:	bf00      	nop
 8007380:	20000014 	.word	0x20000014
 8007384:	08009095 	.word	0x08009095
 8007388:	20000024 	.word	0x20000024

0800738c <cleanup_stdio>:
 800738c:	6841      	ldr	r1, [r0, #4]
 800738e:	4b0c      	ldr	r3, [pc, #48]	@ (80073c0 <cleanup_stdio+0x34>)
 8007390:	4299      	cmp	r1, r3
 8007392:	b510      	push	{r4, lr}
 8007394:	4604      	mov	r4, r0
 8007396:	d001      	beq.n	800739c <cleanup_stdio+0x10>
 8007398:	f001 fe7c 	bl	8009094 <_fflush_r>
 800739c:	68a1      	ldr	r1, [r4, #8]
 800739e:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <cleanup_stdio+0x38>)
 80073a0:	4299      	cmp	r1, r3
 80073a2:	d002      	beq.n	80073aa <cleanup_stdio+0x1e>
 80073a4:	4620      	mov	r0, r4
 80073a6:	f001 fe75 	bl	8009094 <_fflush_r>
 80073aa:	68e1      	ldr	r1, [r4, #12]
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <cleanup_stdio+0x3c>)
 80073ae:	4299      	cmp	r1, r3
 80073b0:	d004      	beq.n	80073bc <cleanup_stdio+0x30>
 80073b2:	4620      	mov	r0, r4
 80073b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b8:	f001 be6c 	b.w	8009094 <_fflush_r>
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	bf00      	nop
 80073c0:	20000820 	.word	0x20000820
 80073c4:	20000888 	.word	0x20000888
 80073c8:	200008f0 	.word	0x200008f0

080073cc <global_stdio_init.part.0>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4b0b      	ldr	r3, [pc, #44]	@ (80073fc <global_stdio_init.part.0+0x30>)
 80073d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007400 <global_stdio_init.part.0+0x34>)
 80073d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007404 <global_stdio_init.part.0+0x38>)
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	4620      	mov	r0, r4
 80073d8:	2200      	movs	r2, #0
 80073da:	2104      	movs	r1, #4
 80073dc:	f7ff ff94 	bl	8007308 <std>
 80073e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073e4:	2201      	movs	r2, #1
 80073e6:	2109      	movs	r1, #9
 80073e8:	f7ff ff8e 	bl	8007308 <std>
 80073ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073f0:	2202      	movs	r2, #2
 80073f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f6:	2112      	movs	r1, #18
 80073f8:	f7ff bf86 	b.w	8007308 <std>
 80073fc:	20000958 	.word	0x20000958
 8007400:	20000820 	.word	0x20000820
 8007404:	08007375 	.word	0x08007375

08007408 <__sfp_lock_acquire>:
 8007408:	4801      	ldr	r0, [pc, #4]	@ (8007410 <__sfp_lock_acquire+0x8>)
 800740a:	f000 b986 	b.w	800771a <__retarget_lock_acquire_recursive>
 800740e:	bf00      	nop
 8007410:	20000961 	.word	0x20000961

08007414 <__sfp_lock_release>:
 8007414:	4801      	ldr	r0, [pc, #4]	@ (800741c <__sfp_lock_release+0x8>)
 8007416:	f000 b981 	b.w	800771c <__retarget_lock_release_recursive>
 800741a:	bf00      	nop
 800741c:	20000961 	.word	0x20000961

08007420 <__sinit>:
 8007420:	b510      	push	{r4, lr}
 8007422:	4604      	mov	r4, r0
 8007424:	f7ff fff0 	bl	8007408 <__sfp_lock_acquire>
 8007428:	6a23      	ldr	r3, [r4, #32]
 800742a:	b11b      	cbz	r3, 8007434 <__sinit+0x14>
 800742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007430:	f7ff bff0 	b.w	8007414 <__sfp_lock_release>
 8007434:	4b04      	ldr	r3, [pc, #16]	@ (8007448 <__sinit+0x28>)
 8007436:	6223      	str	r3, [r4, #32]
 8007438:	4b04      	ldr	r3, [pc, #16]	@ (800744c <__sinit+0x2c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f5      	bne.n	800742c <__sinit+0xc>
 8007440:	f7ff ffc4 	bl	80073cc <global_stdio_init.part.0>
 8007444:	e7f2      	b.n	800742c <__sinit+0xc>
 8007446:	bf00      	nop
 8007448:	0800738d 	.word	0x0800738d
 800744c:	20000958 	.word	0x20000958

08007450 <_fwalk_sglue>:
 8007450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007454:	4607      	mov	r7, r0
 8007456:	4688      	mov	r8, r1
 8007458:	4614      	mov	r4, r2
 800745a:	2600      	movs	r6, #0
 800745c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007460:	f1b9 0901 	subs.w	r9, r9, #1
 8007464:	d505      	bpl.n	8007472 <_fwalk_sglue+0x22>
 8007466:	6824      	ldr	r4, [r4, #0]
 8007468:	2c00      	cmp	r4, #0
 800746a:	d1f7      	bne.n	800745c <_fwalk_sglue+0xc>
 800746c:	4630      	mov	r0, r6
 800746e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d907      	bls.n	8007488 <_fwalk_sglue+0x38>
 8007478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800747c:	3301      	adds	r3, #1
 800747e:	d003      	beq.n	8007488 <_fwalk_sglue+0x38>
 8007480:	4629      	mov	r1, r5
 8007482:	4638      	mov	r0, r7
 8007484:	47c0      	blx	r8
 8007486:	4306      	orrs	r6, r0
 8007488:	3568      	adds	r5, #104	@ 0x68
 800748a:	e7e9      	b.n	8007460 <_fwalk_sglue+0x10>

0800748c <sniprintf>:
 800748c:	b40c      	push	{r2, r3}
 800748e:	b530      	push	{r4, r5, lr}
 8007490:	4b17      	ldr	r3, [pc, #92]	@ (80074f0 <sniprintf+0x64>)
 8007492:	1e0c      	subs	r4, r1, #0
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	b09d      	sub	sp, #116	@ 0x74
 8007498:	da08      	bge.n	80074ac <sniprintf+0x20>
 800749a:	238b      	movs	r3, #139	@ 0x8b
 800749c:	602b      	str	r3, [r5, #0]
 800749e:	f04f 30ff 	mov.w	r0, #4294967295
 80074a2:	b01d      	add	sp, #116	@ 0x74
 80074a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074a8:	b002      	add	sp, #8
 80074aa:	4770      	bx	lr
 80074ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074b4:	bf14      	ite	ne
 80074b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074ba:	4623      	moveq	r3, r4
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074c4:	9002      	str	r0, [sp, #8]
 80074c6:	9006      	str	r0, [sp, #24]
 80074c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074ce:	ab21      	add	r3, sp, #132	@ 0x84
 80074d0:	a902      	add	r1, sp, #8
 80074d2:	4628      	mov	r0, r5
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	f001 fc5d 	bl	8008d94 <_svfiprintf_r>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	bfbc      	itt	lt
 80074de:	238b      	movlt	r3, #139	@ 0x8b
 80074e0:	602b      	strlt	r3, [r5, #0]
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	d0dd      	beq.n	80074a2 <sniprintf+0x16>
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e7d9      	b.n	80074a2 <sniprintf+0x16>
 80074ee:	bf00      	nop
 80074f0:	20000020 	.word	0x20000020

080074f4 <__sread>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	460c      	mov	r4, r1
 80074f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fc:	f000 f8be 	bl	800767c <_read_r>
 8007500:	2800      	cmp	r0, #0
 8007502:	bfab      	itete	ge
 8007504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007506:	89a3      	ldrhlt	r3, [r4, #12]
 8007508:	181b      	addge	r3, r3, r0
 800750a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800750e:	bfac      	ite	ge
 8007510:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007512:	81a3      	strhlt	r3, [r4, #12]
 8007514:	bd10      	pop	{r4, pc}

08007516 <__swrite>:
 8007516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751a:	461f      	mov	r7, r3
 800751c:	898b      	ldrh	r3, [r1, #12]
 800751e:	05db      	lsls	r3, r3, #23
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	4616      	mov	r6, r2
 8007526:	d505      	bpl.n	8007534 <__swrite+0x1e>
 8007528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752c:	2302      	movs	r3, #2
 800752e:	2200      	movs	r2, #0
 8007530:	f000 f892 	bl	8007658 <_lseek_r>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800753a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	4632      	mov	r2, r6
 8007542:	463b      	mov	r3, r7
 8007544:	4628      	mov	r0, r5
 8007546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800754a:	f000 b8a9 	b.w	80076a0 <_write_r>

0800754e <__sseek>:
 800754e:	b510      	push	{r4, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007556:	f000 f87f 	bl	8007658 <_lseek_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	bf15      	itete	ne
 8007560:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800756a:	81a3      	strheq	r3, [r4, #12]
 800756c:	bf18      	it	ne
 800756e:	81a3      	strhne	r3, [r4, #12]
 8007570:	bd10      	pop	{r4, pc}

08007572 <__sclose>:
 8007572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007576:	f000 b85f 	b.w	8007638 <_close_r>

0800757a <_vsniprintf_r>:
 800757a:	b530      	push	{r4, r5, lr}
 800757c:	4614      	mov	r4, r2
 800757e:	2c00      	cmp	r4, #0
 8007580:	b09b      	sub	sp, #108	@ 0x6c
 8007582:	4605      	mov	r5, r0
 8007584:	461a      	mov	r2, r3
 8007586:	da05      	bge.n	8007594 <_vsniprintf_r+0x1a>
 8007588:	238b      	movs	r3, #139	@ 0x8b
 800758a:	6003      	str	r3, [r0, #0]
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	b01b      	add	sp, #108	@ 0x6c
 8007592:	bd30      	pop	{r4, r5, pc}
 8007594:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007598:	f8ad 300c 	strh.w	r3, [sp, #12]
 800759c:	bf14      	ite	ne
 800759e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075a2:	4623      	moveq	r3, r4
 80075a4:	9302      	str	r3, [sp, #8]
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075ac:	9100      	str	r1, [sp, #0]
 80075ae:	9104      	str	r1, [sp, #16]
 80075b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80075b4:	4669      	mov	r1, sp
 80075b6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80075b8:	f001 fbec 	bl	8008d94 <_svfiprintf_r>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	bfbc      	itt	lt
 80075c0:	238b      	movlt	r3, #139	@ 0x8b
 80075c2:	602b      	strlt	r3, [r5, #0]
 80075c4:	2c00      	cmp	r4, #0
 80075c6:	d0e3      	beq.n	8007590 <_vsniprintf_r+0x16>
 80075c8:	9b00      	ldr	r3, [sp, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	e7df      	b.n	8007590 <_vsniprintf_r+0x16>

080075d0 <vsniprintf>:
 80075d0:	b507      	push	{r0, r1, r2, lr}
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	460a      	mov	r2, r1
 80075d8:	4601      	mov	r1, r0
 80075da:	4803      	ldr	r0, [pc, #12]	@ (80075e8 <vsniprintf+0x18>)
 80075dc:	6800      	ldr	r0, [r0, #0]
 80075de:	f7ff ffcc 	bl	800757a <_vsniprintf_r>
 80075e2:	b003      	add	sp, #12
 80075e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80075e8:	20000020 	.word	0x20000020

080075ec <memmove>:
 80075ec:	4288      	cmp	r0, r1
 80075ee:	b510      	push	{r4, lr}
 80075f0:	eb01 0402 	add.w	r4, r1, r2
 80075f4:	d902      	bls.n	80075fc <memmove+0x10>
 80075f6:	4284      	cmp	r4, r0
 80075f8:	4623      	mov	r3, r4
 80075fa:	d807      	bhi.n	800760c <memmove+0x20>
 80075fc:	1e43      	subs	r3, r0, #1
 80075fe:	42a1      	cmp	r1, r4
 8007600:	d008      	beq.n	8007614 <memmove+0x28>
 8007602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800760a:	e7f8      	b.n	80075fe <memmove+0x12>
 800760c:	4402      	add	r2, r0
 800760e:	4601      	mov	r1, r0
 8007610:	428a      	cmp	r2, r1
 8007612:	d100      	bne.n	8007616 <memmove+0x2a>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800761a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800761e:	e7f7      	b.n	8007610 <memmove+0x24>

08007620 <memset>:
 8007620:	4402      	add	r2, r0
 8007622:	4603      	mov	r3, r0
 8007624:	4293      	cmp	r3, r2
 8007626:	d100      	bne.n	800762a <memset+0xa>
 8007628:	4770      	bx	lr
 800762a:	f803 1b01 	strb.w	r1, [r3], #1
 800762e:	e7f9      	b.n	8007624 <memset+0x4>

08007630 <_localeconv_r>:
 8007630:	4800      	ldr	r0, [pc, #0]	@ (8007634 <_localeconv_r+0x4>)
 8007632:	4770      	bx	lr
 8007634:	20000160 	.word	0x20000160

08007638 <_close_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d06      	ldr	r5, [pc, #24]	@ (8007654 <_close_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7fb fb29 	bl	8002c9a <_close>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_close_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_close_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	2000095c 	.word	0x2000095c

08007658 <_lseek_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d07      	ldr	r5, [pc, #28]	@ (8007678 <_lseek_r+0x20>)
 800765c:	4604      	mov	r4, r0
 800765e:	4608      	mov	r0, r1
 8007660:	4611      	mov	r1, r2
 8007662:	2200      	movs	r2, #0
 8007664:	602a      	str	r2, [r5, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	f7fb fb3e 	bl	8002ce8 <_lseek>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_lseek_r+0x1e>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_lseek_r+0x1e>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	2000095c 	.word	0x2000095c

0800767c <_read_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d07      	ldr	r5, [pc, #28]	@ (800769c <_read_r+0x20>)
 8007680:	4604      	mov	r4, r0
 8007682:	4608      	mov	r0, r1
 8007684:	4611      	mov	r1, r2
 8007686:	2200      	movs	r2, #0
 8007688:	602a      	str	r2, [r5, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f7fb fae8 	bl	8002c60 <_read>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_read_r+0x1e>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_read_r+0x1e>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	2000095c 	.word	0x2000095c

080076a0 <_write_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d07      	ldr	r5, [pc, #28]	@ (80076c0 <_write_r+0x20>)
 80076a4:	4604      	mov	r4, r0
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	602a      	str	r2, [r5, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f7fa fb50 	bl	8001d54 <_write>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_write_r+0x1e>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_write_r+0x1e>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	2000095c 	.word	0x2000095c

080076c4 <__errno>:
 80076c4:	4b01      	ldr	r3, [pc, #4]	@ (80076cc <__errno+0x8>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000020 	.word	0x20000020

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007708 <__libc_init_array+0x38>)
 80076d4:	4c0d      	ldr	r4, [pc, #52]	@ (800770c <__libc_init_array+0x3c>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	2600      	movs	r6, #0
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007710 <__libc_init_array+0x40>)
 80076e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007714 <__libc_init_array+0x44>)
 80076e4:	f002 f84c 	bl	8009780 <_init>
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	2600      	movs	r6, #0
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	0800a3c0 	.word	0x0800a3c0
 800770c:	0800a3c0 	.word	0x0800a3c0
 8007710:	0800a3c0 	.word	0x0800a3c0
 8007714:	0800a3c4 	.word	0x0800a3c4

08007718 <__retarget_lock_init_recursive>:
 8007718:	4770      	bx	lr

0800771a <__retarget_lock_acquire_recursive>:
 800771a:	4770      	bx	lr

0800771c <__retarget_lock_release_recursive>:
 800771c:	4770      	bx	lr

0800771e <memcpy>:
 800771e:	440a      	add	r2, r1
 8007720:	4291      	cmp	r1, r2
 8007722:	f100 33ff 	add.w	r3, r0, #4294967295
 8007726:	d100      	bne.n	800772a <memcpy+0xc>
 8007728:	4770      	bx	lr
 800772a:	b510      	push	{r4, lr}
 800772c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007734:	4291      	cmp	r1, r2
 8007736:	d1f9      	bne.n	800772c <memcpy+0xe>
 8007738:	bd10      	pop	{r4, pc}

0800773a <quorem>:
 800773a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773e:	6903      	ldr	r3, [r0, #16]
 8007740:	690c      	ldr	r4, [r1, #16]
 8007742:	42a3      	cmp	r3, r4
 8007744:	4607      	mov	r7, r0
 8007746:	db7e      	blt.n	8007846 <quorem+0x10c>
 8007748:	3c01      	subs	r4, #1
 800774a:	f101 0814 	add.w	r8, r1, #20
 800774e:	00a3      	lsls	r3, r4, #2
 8007750:	f100 0514 	add.w	r5, r0, #20
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007764:	3301      	adds	r3, #1
 8007766:	429a      	cmp	r2, r3
 8007768:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800776c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007770:	d32e      	bcc.n	80077d0 <quorem+0x96>
 8007772:	f04f 0a00 	mov.w	sl, #0
 8007776:	46c4      	mov	ip, r8
 8007778:	46ae      	mov	lr, r5
 800777a:	46d3      	mov	fp, sl
 800777c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007780:	b298      	uxth	r0, r3
 8007782:	fb06 a000 	mla	r0, r6, r0, sl
 8007786:	0c02      	lsrs	r2, r0, #16
 8007788:	0c1b      	lsrs	r3, r3, #16
 800778a:	fb06 2303 	mla	r3, r6, r3, r2
 800778e:	f8de 2000 	ldr.w	r2, [lr]
 8007792:	b280      	uxth	r0, r0
 8007794:	b292      	uxth	r2, r2
 8007796:	1a12      	subs	r2, r2, r0
 8007798:	445a      	add	r2, fp
 800779a:	f8de 0000 	ldr.w	r0, [lr]
 800779e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077ac:	b292      	uxth	r2, r2
 80077ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077b2:	45e1      	cmp	r9, ip
 80077b4:	f84e 2b04 	str.w	r2, [lr], #4
 80077b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077bc:	d2de      	bcs.n	800777c <quorem+0x42>
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	58eb      	ldr	r3, [r5, r3]
 80077c2:	b92b      	cbnz	r3, 80077d0 <quorem+0x96>
 80077c4:	9b01      	ldr	r3, [sp, #4]
 80077c6:	3b04      	subs	r3, #4
 80077c8:	429d      	cmp	r5, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	d32f      	bcc.n	800782e <quorem+0xf4>
 80077ce:	613c      	str	r4, [r7, #16]
 80077d0:	4638      	mov	r0, r7
 80077d2:	f001 f97b 	bl	8008acc <__mcmp>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	db25      	blt.n	8007826 <quorem+0xec>
 80077da:	4629      	mov	r1, r5
 80077dc:	2000      	movs	r0, #0
 80077de:	f858 2b04 	ldr.w	r2, [r8], #4
 80077e2:	f8d1 c000 	ldr.w	ip, [r1]
 80077e6:	fa1f fe82 	uxth.w	lr, r2
 80077ea:	fa1f f38c 	uxth.w	r3, ip
 80077ee:	eba3 030e 	sub.w	r3, r3, lr
 80077f2:	4403      	add	r3, r0
 80077f4:	0c12      	lsrs	r2, r2, #16
 80077f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80077fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80077fe:	b29b      	uxth	r3, r3
 8007800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007804:	45c1      	cmp	r9, r8
 8007806:	f841 3b04 	str.w	r3, [r1], #4
 800780a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800780e:	d2e6      	bcs.n	80077de <quorem+0xa4>
 8007810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007818:	b922      	cbnz	r2, 8007824 <quorem+0xea>
 800781a:	3b04      	subs	r3, #4
 800781c:	429d      	cmp	r5, r3
 800781e:	461a      	mov	r2, r3
 8007820:	d30b      	bcc.n	800783a <quorem+0x100>
 8007822:	613c      	str	r4, [r7, #16]
 8007824:	3601      	adds	r6, #1
 8007826:	4630      	mov	r0, r6
 8007828:	b003      	add	sp, #12
 800782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	3b04      	subs	r3, #4
 8007832:	2a00      	cmp	r2, #0
 8007834:	d1cb      	bne.n	80077ce <quorem+0x94>
 8007836:	3c01      	subs	r4, #1
 8007838:	e7c6      	b.n	80077c8 <quorem+0x8e>
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	3b04      	subs	r3, #4
 800783e:	2a00      	cmp	r2, #0
 8007840:	d1ef      	bne.n	8007822 <quorem+0xe8>
 8007842:	3c01      	subs	r4, #1
 8007844:	e7ea      	b.n	800781c <quorem+0xe2>
 8007846:	2000      	movs	r0, #0
 8007848:	e7ee      	b.n	8007828 <quorem+0xee>
 800784a:	0000      	movs	r0, r0
 800784c:	0000      	movs	r0, r0
	...

08007850 <_dtoa_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	69c7      	ldr	r7, [r0, #28]
 8007856:	b099      	sub	sp, #100	@ 0x64
 8007858:	ed8d 0b02 	vstr	d0, [sp, #8]
 800785c:	ec55 4b10 	vmov	r4, r5, d0
 8007860:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007862:	9109      	str	r1, [sp, #36]	@ 0x24
 8007864:	4683      	mov	fp, r0
 8007866:	920e      	str	r2, [sp, #56]	@ 0x38
 8007868:	9313      	str	r3, [sp, #76]	@ 0x4c
 800786a:	b97f      	cbnz	r7, 800788c <_dtoa_r+0x3c>
 800786c:	2010      	movs	r0, #16
 800786e:	f000 fdfd 	bl	800846c <malloc>
 8007872:	4602      	mov	r2, r0
 8007874:	f8cb 001c 	str.w	r0, [fp, #28]
 8007878:	b920      	cbnz	r0, 8007884 <_dtoa_r+0x34>
 800787a:	4ba7      	ldr	r3, [pc, #668]	@ (8007b18 <_dtoa_r+0x2c8>)
 800787c:	21ef      	movs	r1, #239	@ 0xef
 800787e:	48a7      	ldr	r0, [pc, #668]	@ (8007b1c <_dtoa_r+0x2cc>)
 8007880:	f001 fc40 	bl	8009104 <__assert_func>
 8007884:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007888:	6007      	str	r7, [r0, #0]
 800788a:	60c7      	str	r7, [r0, #12]
 800788c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007890:	6819      	ldr	r1, [r3, #0]
 8007892:	b159      	cbz	r1, 80078ac <_dtoa_r+0x5c>
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	604a      	str	r2, [r1, #4]
 8007898:	2301      	movs	r3, #1
 800789a:	4093      	lsls	r3, r2
 800789c:	608b      	str	r3, [r1, #8]
 800789e:	4658      	mov	r0, fp
 80078a0:	f000 feda 	bl	8008658 <_Bfree>
 80078a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	1e2b      	subs	r3, r5, #0
 80078ae:	bfb9      	ittee	lt
 80078b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078b4:	9303      	strlt	r3, [sp, #12]
 80078b6:	2300      	movge	r3, #0
 80078b8:	6033      	strge	r3, [r6, #0]
 80078ba:	9f03      	ldr	r7, [sp, #12]
 80078bc:	4b98      	ldr	r3, [pc, #608]	@ (8007b20 <_dtoa_r+0x2d0>)
 80078be:	bfbc      	itt	lt
 80078c0:	2201      	movlt	r2, #1
 80078c2:	6032      	strlt	r2, [r6, #0]
 80078c4:	43bb      	bics	r3, r7
 80078c6:	d112      	bne.n	80078ee <_dtoa_r+0x9e>
 80078c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078d4:	4323      	orrs	r3, r4
 80078d6:	f000 854d 	beq.w	8008374 <_dtoa_r+0xb24>
 80078da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b34 <_dtoa_r+0x2e4>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 854f 	beq.w	8008384 <_dtoa_r+0xb34>
 80078e6:	f10a 0303 	add.w	r3, sl, #3
 80078ea:	f000 bd49 	b.w	8008380 <_dtoa_r+0xb30>
 80078ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	ec51 0b17 	vmov	r0, r1, d7
 80078f8:	2300      	movs	r3, #0
 80078fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80078fe:	f7f9 f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007902:	4680      	mov	r8, r0
 8007904:	b158      	cbz	r0, 800791e <_dtoa_r+0xce>
 8007906:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007908:	2301      	movs	r3, #1
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800790e:	b113      	cbz	r3, 8007916 <_dtoa_r+0xc6>
 8007910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007912:	4b84      	ldr	r3, [pc, #528]	@ (8007b24 <_dtoa_r+0x2d4>)
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b38 <_dtoa_r+0x2e8>
 800791a:	f000 bd33 	b.w	8008384 <_dtoa_r+0xb34>
 800791e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007922:	aa16      	add	r2, sp, #88	@ 0x58
 8007924:	a917      	add	r1, sp, #92	@ 0x5c
 8007926:	4658      	mov	r0, fp
 8007928:	f001 f980 	bl	8008c2c <__d2b>
 800792c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007930:	4681      	mov	r9, r0
 8007932:	2e00      	cmp	r6, #0
 8007934:	d077      	beq.n	8007a26 <_dtoa_r+0x1d6>
 8007936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007938:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800793c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007944:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007948:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800794c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007950:	4619      	mov	r1, r3
 8007952:	2200      	movs	r2, #0
 8007954:	4b74      	ldr	r3, [pc, #464]	@ (8007b28 <_dtoa_r+0x2d8>)
 8007956:	f7f8 fc97 	bl	8000288 <__aeabi_dsub>
 800795a:	a369      	add	r3, pc, #420	@ (adr r3, 8007b00 <_dtoa_r+0x2b0>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fe4a 	bl	80005f8 <__aeabi_dmul>
 8007964:	a368      	add	r3, pc, #416	@ (adr r3, 8007b08 <_dtoa_r+0x2b8>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 fc8f 	bl	800028c <__adddf3>
 800796e:	4604      	mov	r4, r0
 8007970:	4630      	mov	r0, r6
 8007972:	460d      	mov	r5, r1
 8007974:	f7f8 fdd6 	bl	8000524 <__aeabi_i2d>
 8007978:	a365      	add	r3, pc, #404	@ (adr r3, 8007b10 <_dtoa_r+0x2c0>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fe3b 	bl	80005f8 <__aeabi_dmul>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4620      	mov	r0, r4
 8007988:	4629      	mov	r1, r5
 800798a:	f7f8 fc7f 	bl	800028c <__adddf3>
 800798e:	4604      	mov	r4, r0
 8007990:	460d      	mov	r5, r1
 8007992:	f7f9 f8e1 	bl	8000b58 <__aeabi_d2iz>
 8007996:	2200      	movs	r2, #0
 8007998:	4607      	mov	r7, r0
 800799a:	2300      	movs	r3, #0
 800799c:	4620      	mov	r0, r4
 800799e:	4629      	mov	r1, r5
 80079a0:	f7f9 f89c 	bl	8000adc <__aeabi_dcmplt>
 80079a4:	b140      	cbz	r0, 80079b8 <_dtoa_r+0x168>
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7f8 fdbc 	bl	8000524 <__aeabi_i2d>
 80079ac:	4622      	mov	r2, r4
 80079ae:	462b      	mov	r3, r5
 80079b0:	f7f9 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80079b4:	b900      	cbnz	r0, 80079b8 <_dtoa_r+0x168>
 80079b6:	3f01      	subs	r7, #1
 80079b8:	2f16      	cmp	r7, #22
 80079ba:	d851      	bhi.n	8007a60 <_dtoa_r+0x210>
 80079bc:	4b5b      	ldr	r3, [pc, #364]	@ (8007b2c <_dtoa_r+0x2dc>)
 80079be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ca:	f7f9 f887 	bl	8000adc <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d048      	beq.n	8007a64 <_dtoa_r+0x214>
 80079d2:	3f01      	subs	r7, #1
 80079d4:	2300      	movs	r3, #0
 80079d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80079d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079da:	1b9b      	subs	r3, r3, r6
 80079dc:	1e5a      	subs	r2, r3, #1
 80079de:	bf44      	itt	mi
 80079e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80079e4:	2300      	movmi	r3, #0
 80079e6:	9208      	str	r2, [sp, #32]
 80079e8:	bf54      	ite	pl
 80079ea:	f04f 0800 	movpl.w	r8, #0
 80079ee:	9308      	strmi	r3, [sp, #32]
 80079f0:	2f00      	cmp	r7, #0
 80079f2:	db39      	blt.n	8007a68 <_dtoa_r+0x218>
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80079f8:	443b      	add	r3, r7
 80079fa:	9308      	str	r3, [sp, #32]
 80079fc:	2300      	movs	r3, #0
 80079fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a02:	2b09      	cmp	r3, #9
 8007a04:	d864      	bhi.n	8007ad0 <_dtoa_r+0x280>
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	bfc4      	itt	gt
 8007a0a:	3b04      	subgt	r3, #4
 8007a0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a10:	f1a3 0302 	sub.w	r3, r3, #2
 8007a14:	bfcc      	ite	gt
 8007a16:	2400      	movgt	r4, #0
 8007a18:	2401      	movle	r4, #1
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d863      	bhi.n	8007ae6 <_dtoa_r+0x296>
 8007a1e:	e8df f003 	tbb	[pc, r3]
 8007a22:	372a      	.short	0x372a
 8007a24:	5535      	.short	0x5535
 8007a26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a2a:	441e      	add	r6, r3
 8007a2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	bfc1      	itttt	gt
 8007a34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a38:	409f      	lslgt	r7, r3
 8007a3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a42:	bfd6      	itet	le
 8007a44:	f1c3 0320 	rsble	r3, r3, #32
 8007a48:	ea47 0003 	orrgt.w	r0, r7, r3
 8007a4c:	fa04 f003 	lslle.w	r0, r4, r3
 8007a50:	f7f8 fd58 	bl	8000504 <__aeabi_ui2d>
 8007a54:	2201      	movs	r2, #1
 8007a56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a5a:	3e01      	subs	r6, #1
 8007a5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007a5e:	e777      	b.n	8007950 <_dtoa_r+0x100>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e7b8      	b.n	80079d6 <_dtoa_r+0x186>
 8007a64:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a66:	e7b7      	b.n	80079d8 <_dtoa_r+0x188>
 8007a68:	427b      	negs	r3, r7
 8007a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	eba8 0807 	sub.w	r8, r8, r7
 8007a72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a74:	e7c4      	b.n	8007a00 <_dtoa_r+0x1b0>
 8007a76:	2300      	movs	r3, #0
 8007a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dc35      	bgt.n	8007aec <_dtoa_r+0x29c>
 8007a80:	2301      	movs	r3, #1
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	9307      	str	r3, [sp, #28]
 8007a86:	461a      	mov	r2, r3
 8007a88:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a8a:	e00b      	b.n	8007aa4 <_dtoa_r+0x254>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e7f3      	b.n	8007a78 <_dtoa_r+0x228>
 8007a90:	2300      	movs	r3, #0
 8007a92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a96:	18fb      	adds	r3, r7, r3
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	9307      	str	r3, [sp, #28]
 8007aa0:	bfb8      	it	lt
 8007aa2:	2301      	movlt	r3, #1
 8007aa4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	2204      	movs	r2, #4
 8007aac:	f102 0514 	add.w	r5, r2, #20
 8007ab0:	429d      	cmp	r5, r3
 8007ab2:	d91f      	bls.n	8007af4 <_dtoa_r+0x2a4>
 8007ab4:	6041      	str	r1, [r0, #4]
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f000 fd8e 	bl	80085d8 <_Balloc>
 8007abc:	4682      	mov	sl, r0
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d13c      	bne.n	8007b3c <_dtoa_r+0x2ec>
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b30 <_dtoa_r+0x2e0>)
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007aca:	e6d8      	b.n	800787e <_dtoa_r+0x2e>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e7e0      	b.n	8007a92 <_dtoa_r+0x242>
 8007ad0:	2401      	movs	r4, #1
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2312      	movs	r3, #18
 8007ae4:	e7d0      	b.n	8007a88 <_dtoa_r+0x238>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aea:	e7f5      	b.n	8007ad8 <_dtoa_r+0x288>
 8007aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	9307      	str	r3, [sp, #28]
 8007af2:	e7d7      	b.n	8007aa4 <_dtoa_r+0x254>
 8007af4:	3101      	adds	r1, #1
 8007af6:	0052      	lsls	r2, r2, #1
 8007af8:	e7d8      	b.n	8007aac <_dtoa_r+0x25c>
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w
 8007b00:	636f4361 	.word	0x636f4361
 8007b04:	3fd287a7 	.word	0x3fd287a7
 8007b08:	8b60c8b3 	.word	0x8b60c8b3
 8007b0c:	3fc68a28 	.word	0x3fc68a28
 8007b10:	509f79fb 	.word	0x509f79fb
 8007b14:	3fd34413 	.word	0x3fd34413
 8007b18:	0800a085 	.word	0x0800a085
 8007b1c:	0800a09c 	.word	0x0800a09c
 8007b20:	7ff00000 	.word	0x7ff00000
 8007b24:	0800a055 	.word	0x0800a055
 8007b28:	3ff80000 	.word	0x3ff80000
 8007b2c:	0800a198 	.word	0x0800a198
 8007b30:	0800a0f4 	.word	0x0800a0f4
 8007b34:	0800a081 	.word	0x0800a081
 8007b38:	0800a054 	.word	0x0800a054
 8007b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b40:	6018      	str	r0, [r3, #0]
 8007b42:	9b07      	ldr	r3, [sp, #28]
 8007b44:	2b0e      	cmp	r3, #14
 8007b46:	f200 80a4 	bhi.w	8007c92 <_dtoa_r+0x442>
 8007b4a:	2c00      	cmp	r4, #0
 8007b4c:	f000 80a1 	beq.w	8007c92 <_dtoa_r+0x442>
 8007b50:	2f00      	cmp	r7, #0
 8007b52:	dd33      	ble.n	8007bbc <_dtoa_r+0x36c>
 8007b54:	4bad      	ldr	r3, [pc, #692]	@ (8007e0c <_dtoa_r+0x5bc>)
 8007b56:	f007 020f 	and.w	r2, r7, #15
 8007b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b5e:	ed93 7b00 	vldr	d7, [r3]
 8007b62:	05f8      	lsls	r0, r7, #23
 8007b64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b6c:	d516      	bpl.n	8007b9c <_dtoa_r+0x34c>
 8007b6e:	4ba8      	ldr	r3, [pc, #672]	@ (8007e10 <_dtoa_r+0x5c0>)
 8007b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b78:	f7f8 fe68 	bl	800084c <__aeabi_ddiv>
 8007b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b80:	f004 040f 	and.w	r4, r4, #15
 8007b84:	2603      	movs	r6, #3
 8007b86:	4da2      	ldr	r5, [pc, #648]	@ (8007e10 <_dtoa_r+0x5c0>)
 8007b88:	b954      	cbnz	r4, 8007ba0 <_dtoa_r+0x350>
 8007b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b92:	f7f8 fe5b 	bl	800084c <__aeabi_ddiv>
 8007b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b9a:	e028      	b.n	8007bee <_dtoa_r+0x39e>
 8007b9c:	2602      	movs	r6, #2
 8007b9e:	e7f2      	b.n	8007b86 <_dtoa_r+0x336>
 8007ba0:	07e1      	lsls	r1, r4, #31
 8007ba2:	d508      	bpl.n	8007bb6 <_dtoa_r+0x366>
 8007ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bac:	f7f8 fd24 	bl	80005f8 <__aeabi_dmul>
 8007bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb4:	3601      	adds	r6, #1
 8007bb6:	1064      	asrs	r4, r4, #1
 8007bb8:	3508      	adds	r5, #8
 8007bba:	e7e5      	b.n	8007b88 <_dtoa_r+0x338>
 8007bbc:	f000 80d2 	beq.w	8007d64 <_dtoa_r+0x514>
 8007bc0:	427c      	negs	r4, r7
 8007bc2:	4b92      	ldr	r3, [pc, #584]	@ (8007e0c <_dtoa_r+0x5bc>)
 8007bc4:	4d92      	ldr	r5, [pc, #584]	@ (8007e10 <_dtoa_r+0x5c0>)
 8007bc6:	f004 020f 	and.w	r2, r4, #15
 8007bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bde:	1124      	asrs	r4, r4, #4
 8007be0:	2300      	movs	r3, #0
 8007be2:	2602      	movs	r6, #2
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	f040 80b2 	bne.w	8007d4e <_dtoa_r+0x4fe>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1d3      	bne.n	8007b96 <_dtoa_r+0x346>
 8007bee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 80b7 	beq.w	8007d68 <_dtoa_r+0x518>
 8007bfa:	4b86      	ldr	r3, [pc, #536]	@ (8007e14 <_dtoa_r+0x5c4>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4620      	mov	r0, r4
 8007c00:	4629      	mov	r1, r5
 8007c02:	f7f8 ff6b 	bl	8000adc <__aeabi_dcmplt>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f000 80ae 	beq.w	8007d68 <_dtoa_r+0x518>
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80aa 	beq.w	8007d68 <_dtoa_r+0x518>
 8007c14:	9b00      	ldr	r3, [sp, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	dd37      	ble.n	8007c8a <_dtoa_r+0x43a>
 8007c1a:	1e7b      	subs	r3, r7, #1
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4b7d      	ldr	r3, [pc, #500]	@ (8007e18 <_dtoa_r+0x5c8>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	4629      	mov	r1, r5
 8007c26:	f7f8 fce7 	bl	80005f8 <__aeabi_dmul>
 8007c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c2e:	9c00      	ldr	r4, [sp, #0]
 8007c30:	3601      	adds	r6, #1
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7f8 fc76 	bl	8000524 <__aeabi_i2d>
 8007c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c3c:	f7f8 fcdc 	bl	80005f8 <__aeabi_dmul>
 8007c40:	4b76      	ldr	r3, [pc, #472]	@ (8007e1c <_dtoa_r+0x5cc>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	f7f8 fb22 	bl	800028c <__adddf3>
 8007c48:	4605      	mov	r5, r0
 8007c4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	f040 808d 	bne.w	8007d6e <_dtoa_r+0x51e>
 8007c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c58:	4b71      	ldr	r3, [pc, #452]	@ (8007e20 <_dtoa_r+0x5d0>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f7f8 fb14 	bl	8000288 <__aeabi_dsub>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c68:	462a      	mov	r2, r5
 8007c6a:	4633      	mov	r3, r6
 8007c6c:	f7f8 ff54 	bl	8000b18 <__aeabi_dcmpgt>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	f040 828b 	bne.w	800818c <_dtoa_r+0x93c>
 8007c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c80:	f7f8 ff2c 	bl	8000adc <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f040 8128 	bne.w	8007eda <_dtoa_r+0x68a>
 8007c8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f2c0 815a 	blt.w	8007f4e <_dtoa_r+0x6fe>
 8007c9a:	2f0e      	cmp	r7, #14
 8007c9c:	f300 8157 	bgt.w	8007f4e <_dtoa_r+0x6fe>
 8007ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8007e0c <_dtoa_r+0x5bc>)
 8007ca2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ca6:	ed93 7b00 	vldr	d7, [r3]
 8007caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	ed8d 7b00 	vstr	d7, [sp]
 8007cb2:	da03      	bge.n	8007cbc <_dtoa_r+0x46c>
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f340 8101 	ble.w	8007ebe <_dtoa_r+0x66e>
 8007cbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cc0:	4656      	mov	r6, sl
 8007cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 fdbf 	bl	800084c <__aeabi_ddiv>
 8007cce:	f7f8 ff43 	bl	8000b58 <__aeabi_d2iz>
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	f7f8 fc26 	bl	8000524 <__aeabi_i2d>
 8007cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cdc:	f7f8 fc8c 	bl	80005f8 <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007cec:	f7f8 facc 	bl	8000288 <__aeabi_dsub>
 8007cf0:	f806 4b01 	strb.w	r4, [r6], #1
 8007cf4:	9d07      	ldr	r5, [sp, #28]
 8007cf6:	eba6 040a 	sub.w	r4, r6, sl
 8007cfa:	42a5      	cmp	r5, r4
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	f040 8117 	bne.w	8007f32 <_dtoa_r+0x6e2>
 8007d04:	f7f8 fac2 	bl	800028c <__adddf3>
 8007d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	460d      	mov	r5, r1
 8007d10:	f7f8 ff02 	bl	8000b18 <__aeabi_dcmpgt>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f040 80f9 	bne.w	8007f0c <_dtoa_r+0x6bc>
 8007d1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d1e:	4620      	mov	r0, r4
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d26:	b118      	cbz	r0, 8007d30 <_dtoa_r+0x4e0>
 8007d28:	f018 0f01 	tst.w	r8, #1
 8007d2c:	f040 80ee 	bne.w	8007f0c <_dtoa_r+0x6bc>
 8007d30:	4649      	mov	r1, r9
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 fc90 	bl	8008658 <_Bfree>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	7033      	strb	r3, [r6, #0]
 8007d3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d3e:	3701      	adds	r7, #1
 8007d40:	601f      	str	r7, [r3, #0]
 8007d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 831d 	beq.w	8008384 <_dtoa_r+0xb34>
 8007d4a:	601e      	str	r6, [r3, #0]
 8007d4c:	e31a      	b.n	8008384 <_dtoa_r+0xb34>
 8007d4e:	07e2      	lsls	r2, r4, #31
 8007d50:	d505      	bpl.n	8007d5e <_dtoa_r+0x50e>
 8007d52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d56:	f7f8 fc4f 	bl	80005f8 <__aeabi_dmul>
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	1064      	asrs	r4, r4, #1
 8007d60:	3508      	adds	r5, #8
 8007d62:	e73f      	b.n	8007be4 <_dtoa_r+0x394>
 8007d64:	2602      	movs	r6, #2
 8007d66:	e742      	b.n	8007bee <_dtoa_r+0x39e>
 8007d68:	9c07      	ldr	r4, [sp, #28]
 8007d6a:	9704      	str	r7, [sp, #16]
 8007d6c:	e761      	b.n	8007c32 <_dtoa_r+0x3e2>
 8007d6e:	4b27      	ldr	r3, [pc, #156]	@ (8007e0c <_dtoa_r+0x5bc>)
 8007d70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d7a:	4454      	add	r4, sl
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	d053      	beq.n	8007e28 <_dtoa_r+0x5d8>
 8007d80:	4928      	ldr	r1, [pc, #160]	@ (8007e24 <_dtoa_r+0x5d4>)
 8007d82:	2000      	movs	r0, #0
 8007d84:	f7f8 fd62 	bl	800084c <__aeabi_ddiv>
 8007d88:	4633      	mov	r3, r6
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	f7f8 fa7c 	bl	8000288 <__aeabi_dsub>
 8007d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d94:	4656      	mov	r6, sl
 8007d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9a:	f7f8 fedd 	bl	8000b58 <__aeabi_d2iz>
 8007d9e:	4605      	mov	r5, r0
 8007da0:	f7f8 fbc0 	bl	8000524 <__aeabi_i2d>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dac:	f7f8 fa6c 	bl	8000288 <__aeabi_dsub>
 8007db0:	3530      	adds	r5, #48	@ 0x30
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dba:	f806 5b01 	strb.w	r5, [r6], #1
 8007dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dc2:	f7f8 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d171      	bne.n	8007eae <_dtoa_r+0x65e>
 8007dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dce:	4911      	ldr	r1, [pc, #68]	@ (8007e14 <_dtoa_r+0x5c4>)
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f7f8 fa59 	bl	8000288 <__aeabi_dsub>
 8007dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dda:	f7f8 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	f040 8095 	bne.w	8007f0e <_dtoa_r+0x6be>
 8007de4:	42a6      	cmp	r6, r4
 8007de6:	f43f af50 	beq.w	8007c8a <_dtoa_r+0x43a>
 8007dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007dee:	4b0a      	ldr	r3, [pc, #40]	@ (8007e18 <_dtoa_r+0x5c8>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	f7f8 fc01 	bl	80005f8 <__aeabi_dmul>
 8007df6:	4b08      	ldr	r3, [pc, #32]	@ (8007e18 <_dtoa_r+0x5c8>)
 8007df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e02:	f7f8 fbf9 	bl	80005f8 <__aeabi_dmul>
 8007e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0a:	e7c4      	b.n	8007d96 <_dtoa_r+0x546>
 8007e0c:	0800a198 	.word	0x0800a198
 8007e10:	0800a170 	.word	0x0800a170
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	40240000 	.word	0x40240000
 8007e1c:	401c0000 	.word	0x401c0000
 8007e20:	40140000 	.word	0x40140000
 8007e24:	3fe00000 	.word	0x3fe00000
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f7f8 fbe4 	bl	80005f8 <__aeabi_dmul>
 8007e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e34:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e36:	4656      	mov	r6, sl
 8007e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e3c:	f7f8 fe8c 	bl	8000b58 <__aeabi_d2iz>
 8007e40:	4605      	mov	r5, r0
 8007e42:	f7f8 fb6f 	bl	8000524 <__aeabi_i2d>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e4e:	f7f8 fa1b 	bl	8000288 <__aeabi_dsub>
 8007e52:	3530      	adds	r5, #48	@ 0x30
 8007e54:	f806 5b01 	strb.w	r5, [r6], #1
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	42a6      	cmp	r6, r4
 8007e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	d124      	bne.n	8007eb2 <_dtoa_r+0x662>
 8007e68:	4bac      	ldr	r3, [pc, #688]	@ (800811c <_dtoa_r+0x8cc>)
 8007e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e6e:	f7f8 fa0d 	bl	800028c <__adddf3>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e7a:	f7f8 fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d145      	bne.n	8007f0e <_dtoa_r+0x6be>
 8007e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e86:	49a5      	ldr	r1, [pc, #660]	@ (800811c <_dtoa_r+0x8cc>)
 8007e88:	2000      	movs	r0, #0
 8007e8a:	f7f8 f9fd 	bl	8000288 <__aeabi_dsub>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e96:	f7f8 fe21 	bl	8000adc <__aeabi_dcmplt>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	f43f aef5 	beq.w	8007c8a <_dtoa_r+0x43a>
 8007ea0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007ea2:	1e73      	subs	r3, r6, #1
 8007ea4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ea6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007eaa:	2b30      	cmp	r3, #48	@ 0x30
 8007eac:	d0f8      	beq.n	8007ea0 <_dtoa_r+0x650>
 8007eae:	9f04      	ldr	r7, [sp, #16]
 8007eb0:	e73e      	b.n	8007d30 <_dtoa_r+0x4e0>
 8007eb2:	4b9b      	ldr	r3, [pc, #620]	@ (8008120 <_dtoa_r+0x8d0>)
 8007eb4:	f7f8 fba0 	bl	80005f8 <__aeabi_dmul>
 8007eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ebc:	e7bc      	b.n	8007e38 <_dtoa_r+0x5e8>
 8007ebe:	d10c      	bne.n	8007eda <_dtoa_r+0x68a>
 8007ec0:	4b98      	ldr	r3, [pc, #608]	@ (8008124 <_dtoa_r+0x8d4>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ec8:	f7f8 fb96 	bl	80005f8 <__aeabi_dmul>
 8007ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ed0:	f7f8 fe18 	bl	8000b04 <__aeabi_dcmpge>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f000 8157 	beq.w	8008188 <_dtoa_r+0x938>
 8007eda:	2400      	movs	r4, #0
 8007edc:	4625      	mov	r5, r4
 8007ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	4656      	mov	r6, sl
 8007ee6:	2700      	movs	r7, #0
 8007ee8:	4621      	mov	r1, r4
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 fbb4 	bl	8008658 <_Bfree>
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	d0dc      	beq.n	8007eae <_dtoa_r+0x65e>
 8007ef4:	b12f      	cbz	r7, 8007f02 <_dtoa_r+0x6b2>
 8007ef6:	42af      	cmp	r7, r5
 8007ef8:	d003      	beq.n	8007f02 <_dtoa_r+0x6b2>
 8007efa:	4639      	mov	r1, r7
 8007efc:	4658      	mov	r0, fp
 8007efe:	f000 fbab 	bl	8008658 <_Bfree>
 8007f02:	4629      	mov	r1, r5
 8007f04:	4658      	mov	r0, fp
 8007f06:	f000 fba7 	bl	8008658 <_Bfree>
 8007f0a:	e7d0      	b.n	8007eae <_dtoa_r+0x65e>
 8007f0c:	9704      	str	r7, [sp, #16]
 8007f0e:	4633      	mov	r3, r6
 8007f10:	461e      	mov	r6, r3
 8007f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f16:	2a39      	cmp	r2, #57	@ 0x39
 8007f18:	d107      	bne.n	8007f2a <_dtoa_r+0x6da>
 8007f1a:	459a      	cmp	sl, r3
 8007f1c:	d1f8      	bne.n	8007f10 <_dtoa_r+0x6c0>
 8007f1e:	9a04      	ldr	r2, [sp, #16]
 8007f20:	3201      	adds	r2, #1
 8007f22:	9204      	str	r2, [sp, #16]
 8007f24:	2230      	movs	r2, #48	@ 0x30
 8007f26:	f88a 2000 	strb.w	r2, [sl]
 8007f2a:	781a      	ldrb	r2, [r3, #0]
 8007f2c:	3201      	adds	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e7bd      	b.n	8007eae <_dtoa_r+0x65e>
 8007f32:	4b7b      	ldr	r3, [pc, #492]	@ (8008120 <_dtoa_r+0x8d0>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	f7f8 fb5f 	bl	80005f8 <__aeabi_dmul>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	460d      	mov	r5, r1
 8007f42:	f7f8 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f43f aebb 	beq.w	8007cc2 <_dtoa_r+0x472>
 8007f4c:	e6f0      	b.n	8007d30 <_dtoa_r+0x4e0>
 8007f4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	f000 80db 	beq.w	800810c <_dtoa_r+0x8bc>
 8007f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f58:	2a01      	cmp	r2, #1
 8007f5a:	f300 80bf 	bgt.w	80080dc <_dtoa_r+0x88c>
 8007f5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	f000 80b7 	beq.w	80080d4 <_dtoa_r+0x884>
 8007f66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f6c:	4646      	mov	r6, r8
 8007f6e:	9a08      	ldr	r2, [sp, #32]
 8007f70:	2101      	movs	r1, #1
 8007f72:	441a      	add	r2, r3
 8007f74:	4658      	mov	r0, fp
 8007f76:	4498      	add	r8, r3
 8007f78:	9208      	str	r2, [sp, #32]
 8007f7a:	f000 fc21 	bl	80087c0 <__i2b>
 8007f7e:	4605      	mov	r5, r0
 8007f80:	b15e      	cbz	r6, 8007f9a <_dtoa_r+0x74a>
 8007f82:	9b08      	ldr	r3, [sp, #32]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dd08      	ble.n	8007f9a <_dtoa_r+0x74a>
 8007f88:	42b3      	cmp	r3, r6
 8007f8a:	9a08      	ldr	r2, [sp, #32]
 8007f8c:	bfa8      	it	ge
 8007f8e:	4633      	movge	r3, r6
 8007f90:	eba8 0803 	sub.w	r8, r8, r3
 8007f94:	1af6      	subs	r6, r6, r3
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	9308      	str	r3, [sp, #32]
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f9c:	b1f3      	cbz	r3, 8007fdc <_dtoa_r+0x78c>
 8007f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 80b7 	beq.w	8008114 <_dtoa_r+0x8c4>
 8007fa6:	b18c      	cbz	r4, 8007fcc <_dtoa_r+0x77c>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4622      	mov	r2, r4
 8007fac:	4658      	mov	r0, fp
 8007fae:	f000 fcc7 	bl	8008940 <__pow5mult>
 8007fb2:	464a      	mov	r2, r9
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	4658      	mov	r0, fp
 8007fba:	f000 fc17 	bl	80087ec <__multiply>
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	9004      	str	r0, [sp, #16]
 8007fc2:	4658      	mov	r0, fp
 8007fc4:	f000 fb48 	bl	8008658 <_Bfree>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	4699      	mov	r9, r3
 8007fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fce:	1b1a      	subs	r2, r3, r4
 8007fd0:	d004      	beq.n	8007fdc <_dtoa_r+0x78c>
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f000 fcb3 	bl	8008940 <__pow5mult>
 8007fda:	4681      	mov	r9, r0
 8007fdc:	2101      	movs	r1, #1
 8007fde:	4658      	mov	r0, fp
 8007fe0:	f000 fbee 	bl	80087c0 <__i2b>
 8007fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 81cf 	beq.w	800838c <_dtoa_r+0xb3c>
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f000 fca4 	bl	8008940 <__pow5mult>
 8007ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	f300 8095 	bgt.w	800812c <_dtoa_r+0x8dc>
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f040 8087 	bne.w	8008118 <_dtoa_r+0x8c8>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008010:	2b00      	cmp	r3, #0
 8008012:	f040 8089 	bne.w	8008128 <_dtoa_r+0x8d8>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800801c:	0d1b      	lsrs	r3, r3, #20
 800801e:	051b      	lsls	r3, r3, #20
 8008020:	b12b      	cbz	r3, 800802e <_dtoa_r+0x7de>
 8008022:	9b08      	ldr	r3, [sp, #32]
 8008024:	3301      	adds	r3, #1
 8008026:	9308      	str	r3, [sp, #32]
 8008028:	f108 0801 	add.w	r8, r8, #1
 800802c:	2301      	movs	r3, #1
 800802e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 81b0 	beq.w	8008398 <_dtoa_r+0xb48>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800803e:	6918      	ldr	r0, [r3, #16]
 8008040:	f000 fb72 	bl	8008728 <__hi0bits>
 8008044:	f1c0 0020 	rsb	r0, r0, #32
 8008048:	9b08      	ldr	r3, [sp, #32]
 800804a:	4418      	add	r0, r3
 800804c:	f010 001f 	ands.w	r0, r0, #31
 8008050:	d077      	beq.n	8008142 <_dtoa_r+0x8f2>
 8008052:	f1c0 0320 	rsb	r3, r0, #32
 8008056:	2b04      	cmp	r3, #4
 8008058:	dd6b      	ble.n	8008132 <_dtoa_r+0x8e2>
 800805a:	9b08      	ldr	r3, [sp, #32]
 800805c:	f1c0 001c 	rsb	r0, r0, #28
 8008060:	4403      	add	r3, r0
 8008062:	4480      	add	r8, r0
 8008064:	4406      	add	r6, r0
 8008066:	9308      	str	r3, [sp, #32]
 8008068:	f1b8 0f00 	cmp.w	r8, #0
 800806c:	dd05      	ble.n	800807a <_dtoa_r+0x82a>
 800806e:	4649      	mov	r1, r9
 8008070:	4642      	mov	r2, r8
 8008072:	4658      	mov	r0, fp
 8008074:	f000 fcbe 	bl	80089f4 <__lshift>
 8008078:	4681      	mov	r9, r0
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	2b00      	cmp	r3, #0
 800807e:	dd05      	ble.n	800808c <_dtoa_r+0x83c>
 8008080:	4621      	mov	r1, r4
 8008082:	461a      	mov	r2, r3
 8008084:	4658      	mov	r0, fp
 8008086:	f000 fcb5 	bl	80089f4 <__lshift>
 800808a:	4604      	mov	r4, r0
 800808c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800808e:	2b00      	cmp	r3, #0
 8008090:	d059      	beq.n	8008146 <_dtoa_r+0x8f6>
 8008092:	4621      	mov	r1, r4
 8008094:	4648      	mov	r0, r9
 8008096:	f000 fd19 	bl	8008acc <__mcmp>
 800809a:	2800      	cmp	r0, #0
 800809c:	da53      	bge.n	8008146 <_dtoa_r+0x8f6>
 800809e:	1e7b      	subs	r3, r7, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	4649      	mov	r1, r9
 80080a4:	2300      	movs	r3, #0
 80080a6:	220a      	movs	r2, #10
 80080a8:	4658      	mov	r0, fp
 80080aa:	f000 faf7 	bl	800869c <__multadd>
 80080ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080b0:	4681      	mov	r9, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 8172 	beq.w	800839c <_dtoa_r+0xb4c>
 80080b8:	2300      	movs	r3, #0
 80080ba:	4629      	mov	r1, r5
 80080bc:	220a      	movs	r2, #10
 80080be:	4658      	mov	r0, fp
 80080c0:	f000 faec 	bl	800869c <__multadd>
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	4605      	mov	r5, r0
 80080ca:	dc67      	bgt.n	800819c <_dtoa_r+0x94c>
 80080cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	dc41      	bgt.n	8008156 <_dtoa_r+0x906>
 80080d2:	e063      	b.n	800819c <_dtoa_r+0x94c>
 80080d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80080da:	e746      	b.n	8007f6a <_dtoa_r+0x71a>
 80080dc:	9b07      	ldr	r3, [sp, #28]
 80080de:	1e5c      	subs	r4, r3, #1
 80080e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e2:	42a3      	cmp	r3, r4
 80080e4:	bfbf      	itttt	lt
 80080e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80080e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80080ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80080ec:	1ae3      	sublt	r3, r4, r3
 80080ee:	bfb4      	ite	lt
 80080f0:	18d2      	addlt	r2, r2, r3
 80080f2:	1b1c      	subge	r4, r3, r4
 80080f4:	9b07      	ldr	r3, [sp, #28]
 80080f6:	bfbc      	itt	lt
 80080f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80080fa:	2400      	movlt	r4, #0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bfb5      	itete	lt
 8008100:	eba8 0603 	sublt.w	r6, r8, r3
 8008104:	9b07      	ldrge	r3, [sp, #28]
 8008106:	2300      	movlt	r3, #0
 8008108:	4646      	movge	r6, r8
 800810a:	e730      	b.n	8007f6e <_dtoa_r+0x71e>
 800810c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800810e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008110:	4646      	mov	r6, r8
 8008112:	e735      	b.n	8007f80 <_dtoa_r+0x730>
 8008114:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008116:	e75c      	b.n	8007fd2 <_dtoa_r+0x782>
 8008118:	2300      	movs	r3, #0
 800811a:	e788      	b.n	800802e <_dtoa_r+0x7de>
 800811c:	3fe00000 	.word	0x3fe00000
 8008120:	40240000 	.word	0x40240000
 8008124:	40140000 	.word	0x40140000
 8008128:	9b02      	ldr	r3, [sp, #8]
 800812a:	e780      	b.n	800802e <_dtoa_r+0x7de>
 800812c:	2300      	movs	r3, #0
 800812e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008130:	e782      	b.n	8008038 <_dtoa_r+0x7e8>
 8008132:	d099      	beq.n	8008068 <_dtoa_r+0x818>
 8008134:	9a08      	ldr	r2, [sp, #32]
 8008136:	331c      	adds	r3, #28
 8008138:	441a      	add	r2, r3
 800813a:	4498      	add	r8, r3
 800813c:	441e      	add	r6, r3
 800813e:	9208      	str	r2, [sp, #32]
 8008140:	e792      	b.n	8008068 <_dtoa_r+0x818>
 8008142:	4603      	mov	r3, r0
 8008144:	e7f6      	b.n	8008134 <_dtoa_r+0x8e4>
 8008146:	9b07      	ldr	r3, [sp, #28]
 8008148:	9704      	str	r7, [sp, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	dc20      	bgt.n	8008190 <_dtoa_r+0x940>
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008152:	2b02      	cmp	r3, #2
 8008154:	dd1e      	ble.n	8008194 <_dtoa_r+0x944>
 8008156:	9b00      	ldr	r3, [sp, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f47f aec0 	bne.w	8007ede <_dtoa_r+0x68e>
 800815e:	4621      	mov	r1, r4
 8008160:	2205      	movs	r2, #5
 8008162:	4658      	mov	r0, fp
 8008164:	f000 fa9a 	bl	800869c <__multadd>
 8008168:	4601      	mov	r1, r0
 800816a:	4604      	mov	r4, r0
 800816c:	4648      	mov	r0, r9
 800816e:	f000 fcad 	bl	8008acc <__mcmp>
 8008172:	2800      	cmp	r0, #0
 8008174:	f77f aeb3 	ble.w	8007ede <_dtoa_r+0x68e>
 8008178:	4656      	mov	r6, sl
 800817a:	2331      	movs	r3, #49	@ 0x31
 800817c:	f806 3b01 	strb.w	r3, [r6], #1
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	3301      	adds	r3, #1
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	e6ae      	b.n	8007ee6 <_dtoa_r+0x696>
 8008188:	9c07      	ldr	r4, [sp, #28]
 800818a:	9704      	str	r7, [sp, #16]
 800818c:	4625      	mov	r5, r4
 800818e:	e7f3      	b.n	8008178 <_dtoa_r+0x928>
 8008190:	9b07      	ldr	r3, [sp, #28]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8104 	beq.w	80083a4 <_dtoa_r+0xb54>
 800819c:	2e00      	cmp	r6, #0
 800819e:	dd05      	ble.n	80081ac <_dtoa_r+0x95c>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4632      	mov	r2, r6
 80081a4:	4658      	mov	r0, fp
 80081a6:	f000 fc25 	bl	80089f4 <__lshift>
 80081aa:	4605      	mov	r5, r0
 80081ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d05a      	beq.n	8008268 <_dtoa_r+0xa18>
 80081b2:	6869      	ldr	r1, [r5, #4]
 80081b4:	4658      	mov	r0, fp
 80081b6:	f000 fa0f 	bl	80085d8 <_Balloc>
 80081ba:	4606      	mov	r6, r0
 80081bc:	b928      	cbnz	r0, 80081ca <_dtoa_r+0x97a>
 80081be:	4b84      	ldr	r3, [pc, #528]	@ (80083d0 <_dtoa_r+0xb80>)
 80081c0:	4602      	mov	r2, r0
 80081c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081c6:	f7ff bb5a 	b.w	800787e <_dtoa_r+0x2e>
 80081ca:	692a      	ldr	r2, [r5, #16]
 80081cc:	3202      	adds	r2, #2
 80081ce:	0092      	lsls	r2, r2, #2
 80081d0:	f105 010c 	add.w	r1, r5, #12
 80081d4:	300c      	adds	r0, #12
 80081d6:	f7ff faa2 	bl	800771e <memcpy>
 80081da:	2201      	movs	r2, #1
 80081dc:	4631      	mov	r1, r6
 80081de:	4658      	mov	r0, fp
 80081e0:	f000 fc08 	bl	80089f4 <__lshift>
 80081e4:	f10a 0301 	add.w	r3, sl, #1
 80081e8:	9307      	str	r3, [sp, #28]
 80081ea:	9b00      	ldr	r3, [sp, #0]
 80081ec:	4453      	add	r3, sl
 80081ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	462f      	mov	r7, r5
 80081f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80081fa:	4605      	mov	r5, r0
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	4621      	mov	r1, r4
 8008200:	3b01      	subs	r3, #1
 8008202:	4648      	mov	r0, r9
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	f7ff fa98 	bl	800773a <quorem>
 800820a:	4639      	mov	r1, r7
 800820c:	9002      	str	r0, [sp, #8]
 800820e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008212:	4648      	mov	r0, r9
 8008214:	f000 fc5a 	bl	8008acc <__mcmp>
 8008218:	462a      	mov	r2, r5
 800821a:	9008      	str	r0, [sp, #32]
 800821c:	4621      	mov	r1, r4
 800821e:	4658      	mov	r0, fp
 8008220:	f000 fc70 	bl	8008b04 <__mdiff>
 8008224:	68c2      	ldr	r2, [r0, #12]
 8008226:	4606      	mov	r6, r0
 8008228:	bb02      	cbnz	r2, 800826c <_dtoa_r+0xa1c>
 800822a:	4601      	mov	r1, r0
 800822c:	4648      	mov	r0, r9
 800822e:	f000 fc4d 	bl	8008acc <__mcmp>
 8008232:	4602      	mov	r2, r0
 8008234:	4631      	mov	r1, r6
 8008236:	4658      	mov	r0, fp
 8008238:	920e      	str	r2, [sp, #56]	@ 0x38
 800823a:	f000 fa0d 	bl	8008658 <_Bfree>
 800823e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008240:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008242:	9e07      	ldr	r6, [sp, #28]
 8008244:	ea43 0102 	orr.w	r1, r3, r2
 8008248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800824a:	4319      	orrs	r1, r3
 800824c:	d110      	bne.n	8008270 <_dtoa_r+0xa20>
 800824e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008252:	d029      	beq.n	80082a8 <_dtoa_r+0xa58>
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dd02      	ble.n	8008260 <_dtoa_r+0xa10>
 800825a:	9b02      	ldr	r3, [sp, #8]
 800825c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	f883 8000 	strb.w	r8, [r3]
 8008266:	e63f      	b.n	8007ee8 <_dtoa_r+0x698>
 8008268:	4628      	mov	r0, r5
 800826a:	e7bb      	b.n	80081e4 <_dtoa_r+0x994>
 800826c:	2201      	movs	r2, #1
 800826e:	e7e1      	b.n	8008234 <_dtoa_r+0x9e4>
 8008270:	9b08      	ldr	r3, [sp, #32]
 8008272:	2b00      	cmp	r3, #0
 8008274:	db04      	blt.n	8008280 <_dtoa_r+0xa30>
 8008276:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008278:	430b      	orrs	r3, r1
 800827a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800827c:	430b      	orrs	r3, r1
 800827e:	d120      	bne.n	80082c2 <_dtoa_r+0xa72>
 8008280:	2a00      	cmp	r2, #0
 8008282:	dded      	ble.n	8008260 <_dtoa_r+0xa10>
 8008284:	4649      	mov	r1, r9
 8008286:	2201      	movs	r2, #1
 8008288:	4658      	mov	r0, fp
 800828a:	f000 fbb3 	bl	80089f4 <__lshift>
 800828e:	4621      	mov	r1, r4
 8008290:	4681      	mov	r9, r0
 8008292:	f000 fc1b 	bl	8008acc <__mcmp>
 8008296:	2800      	cmp	r0, #0
 8008298:	dc03      	bgt.n	80082a2 <_dtoa_r+0xa52>
 800829a:	d1e1      	bne.n	8008260 <_dtoa_r+0xa10>
 800829c:	f018 0f01 	tst.w	r8, #1
 80082a0:	d0de      	beq.n	8008260 <_dtoa_r+0xa10>
 80082a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082a6:	d1d8      	bne.n	800825a <_dtoa_r+0xa0a>
 80082a8:	9a00      	ldr	r2, [sp, #0]
 80082aa:	2339      	movs	r3, #57	@ 0x39
 80082ac:	7013      	strb	r3, [r2, #0]
 80082ae:	4633      	mov	r3, r6
 80082b0:	461e      	mov	r6, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082b8:	2a39      	cmp	r2, #57	@ 0x39
 80082ba:	d052      	beq.n	8008362 <_dtoa_r+0xb12>
 80082bc:	3201      	adds	r2, #1
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	e612      	b.n	8007ee8 <_dtoa_r+0x698>
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	dd07      	ble.n	80082d6 <_dtoa_r+0xa86>
 80082c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082ca:	d0ed      	beq.n	80082a8 <_dtoa_r+0xa58>
 80082cc:	9a00      	ldr	r2, [sp, #0]
 80082ce:	f108 0301 	add.w	r3, r8, #1
 80082d2:	7013      	strb	r3, [r2, #0]
 80082d4:	e608      	b.n	8007ee8 <_dtoa_r+0x698>
 80082d6:	9b07      	ldr	r3, [sp, #28]
 80082d8:	9a07      	ldr	r2, [sp, #28]
 80082da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80082de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d028      	beq.n	8008336 <_dtoa_r+0xae6>
 80082e4:	4649      	mov	r1, r9
 80082e6:	2300      	movs	r3, #0
 80082e8:	220a      	movs	r2, #10
 80082ea:	4658      	mov	r0, fp
 80082ec:	f000 f9d6 	bl	800869c <__multadd>
 80082f0:	42af      	cmp	r7, r5
 80082f2:	4681      	mov	r9, r0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	f04f 020a 	mov.w	r2, #10
 80082fc:	4639      	mov	r1, r7
 80082fe:	4658      	mov	r0, fp
 8008300:	d107      	bne.n	8008312 <_dtoa_r+0xac2>
 8008302:	f000 f9cb 	bl	800869c <__multadd>
 8008306:	4607      	mov	r7, r0
 8008308:	4605      	mov	r5, r0
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	3301      	adds	r3, #1
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	e774      	b.n	80081fc <_dtoa_r+0x9ac>
 8008312:	f000 f9c3 	bl	800869c <__multadd>
 8008316:	4629      	mov	r1, r5
 8008318:	4607      	mov	r7, r0
 800831a:	2300      	movs	r3, #0
 800831c:	220a      	movs	r2, #10
 800831e:	4658      	mov	r0, fp
 8008320:	f000 f9bc 	bl	800869c <__multadd>
 8008324:	4605      	mov	r5, r0
 8008326:	e7f0      	b.n	800830a <_dtoa_r+0xaba>
 8008328:	9b00      	ldr	r3, [sp, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfcc      	ite	gt
 800832e:	461e      	movgt	r6, r3
 8008330:	2601      	movle	r6, #1
 8008332:	4456      	add	r6, sl
 8008334:	2700      	movs	r7, #0
 8008336:	4649      	mov	r1, r9
 8008338:	2201      	movs	r2, #1
 800833a:	4658      	mov	r0, fp
 800833c:	f000 fb5a 	bl	80089f4 <__lshift>
 8008340:	4621      	mov	r1, r4
 8008342:	4681      	mov	r9, r0
 8008344:	f000 fbc2 	bl	8008acc <__mcmp>
 8008348:	2800      	cmp	r0, #0
 800834a:	dcb0      	bgt.n	80082ae <_dtoa_r+0xa5e>
 800834c:	d102      	bne.n	8008354 <_dtoa_r+0xb04>
 800834e:	f018 0f01 	tst.w	r8, #1
 8008352:	d1ac      	bne.n	80082ae <_dtoa_r+0xa5e>
 8008354:	4633      	mov	r3, r6
 8008356:	461e      	mov	r6, r3
 8008358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800835c:	2a30      	cmp	r2, #48	@ 0x30
 800835e:	d0fa      	beq.n	8008356 <_dtoa_r+0xb06>
 8008360:	e5c2      	b.n	8007ee8 <_dtoa_r+0x698>
 8008362:	459a      	cmp	sl, r3
 8008364:	d1a4      	bne.n	80082b0 <_dtoa_r+0xa60>
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	3301      	adds	r3, #1
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	2331      	movs	r3, #49	@ 0x31
 800836e:	f88a 3000 	strb.w	r3, [sl]
 8008372:	e5b9      	b.n	8007ee8 <_dtoa_r+0x698>
 8008374:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008376:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80083d4 <_dtoa_r+0xb84>
 800837a:	b11b      	cbz	r3, 8008384 <_dtoa_r+0xb34>
 800837c:	f10a 0308 	add.w	r3, sl, #8
 8008380:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	4650      	mov	r0, sl
 8008386:	b019      	add	sp, #100	@ 0x64
 8008388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838e:	2b01      	cmp	r3, #1
 8008390:	f77f ae37 	ble.w	8008002 <_dtoa_r+0x7b2>
 8008394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008396:	930a      	str	r3, [sp, #40]	@ 0x28
 8008398:	2001      	movs	r0, #1
 800839a:	e655      	b.n	8008048 <_dtoa_r+0x7f8>
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f77f aed6 	ble.w	8008150 <_dtoa_r+0x900>
 80083a4:	4656      	mov	r6, sl
 80083a6:	4621      	mov	r1, r4
 80083a8:	4648      	mov	r0, r9
 80083aa:	f7ff f9c6 	bl	800773a <quorem>
 80083ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083b2:	f806 8b01 	strb.w	r8, [r6], #1
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	eba6 020a 	sub.w	r2, r6, sl
 80083bc:	4293      	cmp	r3, r2
 80083be:	ddb3      	ble.n	8008328 <_dtoa_r+0xad8>
 80083c0:	4649      	mov	r1, r9
 80083c2:	2300      	movs	r3, #0
 80083c4:	220a      	movs	r2, #10
 80083c6:	4658      	mov	r0, fp
 80083c8:	f000 f968 	bl	800869c <__multadd>
 80083cc:	4681      	mov	r9, r0
 80083ce:	e7ea      	b.n	80083a6 <_dtoa_r+0xb56>
 80083d0:	0800a0f4 	.word	0x0800a0f4
 80083d4:	0800a078 	.word	0x0800a078

080083d8 <_free_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4605      	mov	r5, r0
 80083dc:	2900      	cmp	r1, #0
 80083de:	d041      	beq.n	8008464 <_free_r+0x8c>
 80083e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e4:	1f0c      	subs	r4, r1, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfb8      	it	lt
 80083ea:	18e4      	addlt	r4, r4, r3
 80083ec:	f000 f8e8 	bl	80085c0 <__malloc_lock>
 80083f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008468 <_free_r+0x90>)
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	b933      	cbnz	r3, 8008404 <_free_r+0x2c>
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	6014      	str	r4, [r2, #0]
 80083fa:	4628      	mov	r0, r5
 80083fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008400:	f000 b8e4 	b.w	80085cc <__malloc_unlock>
 8008404:	42a3      	cmp	r3, r4
 8008406:	d908      	bls.n	800841a <_free_r+0x42>
 8008408:	6820      	ldr	r0, [r4, #0]
 800840a:	1821      	adds	r1, r4, r0
 800840c:	428b      	cmp	r3, r1
 800840e:	bf01      	itttt	eq
 8008410:	6819      	ldreq	r1, [r3, #0]
 8008412:	685b      	ldreq	r3, [r3, #4]
 8008414:	1809      	addeq	r1, r1, r0
 8008416:	6021      	streq	r1, [r4, #0]
 8008418:	e7ed      	b.n	80083f6 <_free_r+0x1e>
 800841a:	461a      	mov	r2, r3
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	b10b      	cbz	r3, 8008424 <_free_r+0x4c>
 8008420:	42a3      	cmp	r3, r4
 8008422:	d9fa      	bls.n	800841a <_free_r+0x42>
 8008424:	6811      	ldr	r1, [r2, #0]
 8008426:	1850      	adds	r0, r2, r1
 8008428:	42a0      	cmp	r0, r4
 800842a:	d10b      	bne.n	8008444 <_free_r+0x6c>
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	4401      	add	r1, r0
 8008430:	1850      	adds	r0, r2, r1
 8008432:	4283      	cmp	r3, r0
 8008434:	6011      	str	r1, [r2, #0]
 8008436:	d1e0      	bne.n	80083fa <_free_r+0x22>
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	6053      	str	r3, [r2, #4]
 800843e:	4408      	add	r0, r1
 8008440:	6010      	str	r0, [r2, #0]
 8008442:	e7da      	b.n	80083fa <_free_r+0x22>
 8008444:	d902      	bls.n	800844c <_free_r+0x74>
 8008446:	230c      	movs	r3, #12
 8008448:	602b      	str	r3, [r5, #0]
 800844a:	e7d6      	b.n	80083fa <_free_r+0x22>
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	1821      	adds	r1, r4, r0
 8008450:	428b      	cmp	r3, r1
 8008452:	bf04      	itt	eq
 8008454:	6819      	ldreq	r1, [r3, #0]
 8008456:	685b      	ldreq	r3, [r3, #4]
 8008458:	6063      	str	r3, [r4, #4]
 800845a:	bf04      	itt	eq
 800845c:	1809      	addeq	r1, r1, r0
 800845e:	6021      	streq	r1, [r4, #0]
 8008460:	6054      	str	r4, [r2, #4]
 8008462:	e7ca      	b.n	80083fa <_free_r+0x22>
 8008464:	bd38      	pop	{r3, r4, r5, pc}
 8008466:	bf00      	nop
 8008468:	20000968 	.word	0x20000968

0800846c <malloc>:
 800846c:	4b02      	ldr	r3, [pc, #8]	@ (8008478 <malloc+0xc>)
 800846e:	4601      	mov	r1, r0
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	f000 b825 	b.w	80084c0 <_malloc_r>
 8008476:	bf00      	nop
 8008478:	20000020 	.word	0x20000020

0800847c <sbrk_aligned>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4e0f      	ldr	r6, [pc, #60]	@ (80084bc <sbrk_aligned+0x40>)
 8008480:	460c      	mov	r4, r1
 8008482:	6831      	ldr	r1, [r6, #0]
 8008484:	4605      	mov	r5, r0
 8008486:	b911      	cbnz	r1, 800848e <sbrk_aligned+0x12>
 8008488:	f000 fe2c 	bl	80090e4 <_sbrk_r>
 800848c:	6030      	str	r0, [r6, #0]
 800848e:	4621      	mov	r1, r4
 8008490:	4628      	mov	r0, r5
 8008492:	f000 fe27 	bl	80090e4 <_sbrk_r>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	d103      	bne.n	80084a2 <sbrk_aligned+0x26>
 800849a:	f04f 34ff 	mov.w	r4, #4294967295
 800849e:	4620      	mov	r0, r4
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	1cc4      	adds	r4, r0, #3
 80084a4:	f024 0403 	bic.w	r4, r4, #3
 80084a8:	42a0      	cmp	r0, r4
 80084aa:	d0f8      	beq.n	800849e <sbrk_aligned+0x22>
 80084ac:	1a21      	subs	r1, r4, r0
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fe18 	bl	80090e4 <_sbrk_r>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d1f2      	bne.n	800849e <sbrk_aligned+0x22>
 80084b8:	e7ef      	b.n	800849a <sbrk_aligned+0x1e>
 80084ba:	bf00      	nop
 80084bc:	20000964 	.word	0x20000964

080084c0 <_malloc_r>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	1ccd      	adds	r5, r1, #3
 80084c6:	f025 0503 	bic.w	r5, r5, #3
 80084ca:	3508      	adds	r5, #8
 80084cc:	2d0c      	cmp	r5, #12
 80084ce:	bf38      	it	cc
 80084d0:	250c      	movcc	r5, #12
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	4606      	mov	r6, r0
 80084d6:	db01      	blt.n	80084dc <_malloc_r+0x1c>
 80084d8:	42a9      	cmp	r1, r5
 80084da:	d904      	bls.n	80084e6 <_malloc_r+0x26>
 80084dc:	230c      	movs	r3, #12
 80084de:	6033      	str	r3, [r6, #0]
 80084e0:	2000      	movs	r0, #0
 80084e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085bc <_malloc_r+0xfc>
 80084ea:	f000 f869 	bl	80085c0 <__malloc_lock>
 80084ee:	f8d8 3000 	ldr.w	r3, [r8]
 80084f2:	461c      	mov	r4, r3
 80084f4:	bb44      	cbnz	r4, 8008548 <_malloc_r+0x88>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff ffbf 	bl	800847c <sbrk_aligned>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	4604      	mov	r4, r0
 8008502:	d158      	bne.n	80085b6 <_malloc_r+0xf6>
 8008504:	f8d8 4000 	ldr.w	r4, [r8]
 8008508:	4627      	mov	r7, r4
 800850a:	2f00      	cmp	r7, #0
 800850c:	d143      	bne.n	8008596 <_malloc_r+0xd6>
 800850e:	2c00      	cmp	r4, #0
 8008510:	d04b      	beq.n	80085aa <_malloc_r+0xea>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	4639      	mov	r1, r7
 8008516:	4630      	mov	r0, r6
 8008518:	eb04 0903 	add.w	r9, r4, r3
 800851c:	f000 fde2 	bl	80090e4 <_sbrk_r>
 8008520:	4581      	cmp	r9, r0
 8008522:	d142      	bne.n	80085aa <_malloc_r+0xea>
 8008524:	6821      	ldr	r1, [r4, #0]
 8008526:	1a6d      	subs	r5, r5, r1
 8008528:	4629      	mov	r1, r5
 800852a:	4630      	mov	r0, r6
 800852c:	f7ff ffa6 	bl	800847c <sbrk_aligned>
 8008530:	3001      	adds	r0, #1
 8008532:	d03a      	beq.n	80085aa <_malloc_r+0xea>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	442b      	add	r3, r5
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	f8d8 3000 	ldr.w	r3, [r8]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	bb62      	cbnz	r2, 800859c <_malloc_r+0xdc>
 8008542:	f8c8 7000 	str.w	r7, [r8]
 8008546:	e00f      	b.n	8008568 <_malloc_r+0xa8>
 8008548:	6822      	ldr	r2, [r4, #0]
 800854a:	1b52      	subs	r2, r2, r5
 800854c:	d420      	bmi.n	8008590 <_malloc_r+0xd0>
 800854e:	2a0b      	cmp	r2, #11
 8008550:	d917      	bls.n	8008582 <_malloc_r+0xc2>
 8008552:	1961      	adds	r1, r4, r5
 8008554:	42a3      	cmp	r3, r4
 8008556:	6025      	str	r5, [r4, #0]
 8008558:	bf18      	it	ne
 800855a:	6059      	strne	r1, [r3, #4]
 800855c:	6863      	ldr	r3, [r4, #4]
 800855e:	bf08      	it	eq
 8008560:	f8c8 1000 	streq.w	r1, [r8]
 8008564:	5162      	str	r2, [r4, r5]
 8008566:	604b      	str	r3, [r1, #4]
 8008568:	4630      	mov	r0, r6
 800856a:	f000 f82f 	bl	80085cc <__malloc_unlock>
 800856e:	f104 000b 	add.w	r0, r4, #11
 8008572:	1d23      	adds	r3, r4, #4
 8008574:	f020 0007 	bic.w	r0, r0, #7
 8008578:	1ac2      	subs	r2, r0, r3
 800857a:	bf1c      	itt	ne
 800857c:	1a1b      	subne	r3, r3, r0
 800857e:	50a3      	strne	r3, [r4, r2]
 8008580:	e7af      	b.n	80084e2 <_malloc_r+0x22>
 8008582:	6862      	ldr	r2, [r4, #4]
 8008584:	42a3      	cmp	r3, r4
 8008586:	bf0c      	ite	eq
 8008588:	f8c8 2000 	streq.w	r2, [r8]
 800858c:	605a      	strne	r2, [r3, #4]
 800858e:	e7eb      	b.n	8008568 <_malloc_r+0xa8>
 8008590:	4623      	mov	r3, r4
 8008592:	6864      	ldr	r4, [r4, #4]
 8008594:	e7ae      	b.n	80084f4 <_malloc_r+0x34>
 8008596:	463c      	mov	r4, r7
 8008598:	687f      	ldr	r7, [r7, #4]
 800859a:	e7b6      	b.n	800850a <_malloc_r+0x4a>
 800859c:	461a      	mov	r2, r3
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d1fb      	bne.n	800859c <_malloc_r+0xdc>
 80085a4:	2300      	movs	r3, #0
 80085a6:	6053      	str	r3, [r2, #4]
 80085a8:	e7de      	b.n	8008568 <_malloc_r+0xa8>
 80085aa:	230c      	movs	r3, #12
 80085ac:	6033      	str	r3, [r6, #0]
 80085ae:	4630      	mov	r0, r6
 80085b0:	f000 f80c 	bl	80085cc <__malloc_unlock>
 80085b4:	e794      	b.n	80084e0 <_malloc_r+0x20>
 80085b6:	6005      	str	r5, [r0, #0]
 80085b8:	e7d6      	b.n	8008568 <_malloc_r+0xa8>
 80085ba:	bf00      	nop
 80085bc:	20000968 	.word	0x20000968

080085c0 <__malloc_lock>:
 80085c0:	4801      	ldr	r0, [pc, #4]	@ (80085c8 <__malloc_lock+0x8>)
 80085c2:	f7ff b8aa 	b.w	800771a <__retarget_lock_acquire_recursive>
 80085c6:	bf00      	nop
 80085c8:	20000960 	.word	0x20000960

080085cc <__malloc_unlock>:
 80085cc:	4801      	ldr	r0, [pc, #4]	@ (80085d4 <__malloc_unlock+0x8>)
 80085ce:	f7ff b8a5 	b.w	800771c <__retarget_lock_release_recursive>
 80085d2:	bf00      	nop
 80085d4:	20000960 	.word	0x20000960

080085d8 <_Balloc>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	69c6      	ldr	r6, [r0, #28]
 80085dc:	4604      	mov	r4, r0
 80085de:	460d      	mov	r5, r1
 80085e0:	b976      	cbnz	r6, 8008600 <_Balloc+0x28>
 80085e2:	2010      	movs	r0, #16
 80085e4:	f7ff ff42 	bl	800846c <malloc>
 80085e8:	4602      	mov	r2, r0
 80085ea:	61e0      	str	r0, [r4, #28]
 80085ec:	b920      	cbnz	r0, 80085f8 <_Balloc+0x20>
 80085ee:	4b18      	ldr	r3, [pc, #96]	@ (8008650 <_Balloc+0x78>)
 80085f0:	4818      	ldr	r0, [pc, #96]	@ (8008654 <_Balloc+0x7c>)
 80085f2:	216b      	movs	r1, #107	@ 0x6b
 80085f4:	f000 fd86 	bl	8009104 <__assert_func>
 80085f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085fc:	6006      	str	r6, [r0, #0]
 80085fe:	60c6      	str	r6, [r0, #12]
 8008600:	69e6      	ldr	r6, [r4, #28]
 8008602:	68f3      	ldr	r3, [r6, #12]
 8008604:	b183      	cbz	r3, 8008628 <_Balloc+0x50>
 8008606:	69e3      	ldr	r3, [r4, #28]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800860e:	b9b8      	cbnz	r0, 8008640 <_Balloc+0x68>
 8008610:	2101      	movs	r1, #1
 8008612:	fa01 f605 	lsl.w	r6, r1, r5
 8008616:	1d72      	adds	r2, r6, #5
 8008618:	0092      	lsls	r2, r2, #2
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fd90 	bl	8009140 <_calloc_r>
 8008620:	b160      	cbz	r0, 800863c <_Balloc+0x64>
 8008622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008626:	e00e      	b.n	8008646 <_Balloc+0x6e>
 8008628:	2221      	movs	r2, #33	@ 0x21
 800862a:	2104      	movs	r1, #4
 800862c:	4620      	mov	r0, r4
 800862e:	f000 fd87 	bl	8009140 <_calloc_r>
 8008632:	69e3      	ldr	r3, [r4, #28]
 8008634:	60f0      	str	r0, [r6, #12]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e4      	bne.n	8008606 <_Balloc+0x2e>
 800863c:	2000      	movs	r0, #0
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	6802      	ldr	r2, [r0, #0]
 8008642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008646:	2300      	movs	r3, #0
 8008648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800864c:	e7f7      	b.n	800863e <_Balloc+0x66>
 800864e:	bf00      	nop
 8008650:	0800a085 	.word	0x0800a085
 8008654:	0800a105 	.word	0x0800a105

08008658 <_Bfree>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	69c6      	ldr	r6, [r0, #28]
 800865c:	4605      	mov	r5, r0
 800865e:	460c      	mov	r4, r1
 8008660:	b976      	cbnz	r6, 8008680 <_Bfree+0x28>
 8008662:	2010      	movs	r0, #16
 8008664:	f7ff ff02 	bl	800846c <malloc>
 8008668:	4602      	mov	r2, r0
 800866a:	61e8      	str	r0, [r5, #28]
 800866c:	b920      	cbnz	r0, 8008678 <_Bfree+0x20>
 800866e:	4b09      	ldr	r3, [pc, #36]	@ (8008694 <_Bfree+0x3c>)
 8008670:	4809      	ldr	r0, [pc, #36]	@ (8008698 <_Bfree+0x40>)
 8008672:	218f      	movs	r1, #143	@ 0x8f
 8008674:	f000 fd46 	bl	8009104 <__assert_func>
 8008678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800867c:	6006      	str	r6, [r0, #0]
 800867e:	60c6      	str	r6, [r0, #12]
 8008680:	b13c      	cbz	r4, 8008692 <_Bfree+0x3a>
 8008682:	69eb      	ldr	r3, [r5, #28]
 8008684:	6862      	ldr	r2, [r4, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800868c:	6021      	str	r1, [r4, #0]
 800868e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	0800a085 	.word	0x0800a085
 8008698:	0800a105 	.word	0x0800a105

0800869c <__multadd>:
 800869c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a0:	690d      	ldr	r5, [r1, #16]
 80086a2:	4607      	mov	r7, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	461e      	mov	r6, r3
 80086a8:	f101 0c14 	add.w	ip, r1, #20
 80086ac:	2000      	movs	r0, #0
 80086ae:	f8dc 3000 	ldr.w	r3, [ip]
 80086b2:	b299      	uxth	r1, r3
 80086b4:	fb02 6101 	mla	r1, r2, r1, r6
 80086b8:	0c1e      	lsrs	r6, r3, #16
 80086ba:	0c0b      	lsrs	r3, r1, #16
 80086bc:	fb02 3306 	mla	r3, r2, r6, r3
 80086c0:	b289      	uxth	r1, r1
 80086c2:	3001      	adds	r0, #1
 80086c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086c8:	4285      	cmp	r5, r0
 80086ca:	f84c 1b04 	str.w	r1, [ip], #4
 80086ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086d2:	dcec      	bgt.n	80086ae <__multadd+0x12>
 80086d4:	b30e      	cbz	r6, 800871a <__multadd+0x7e>
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	42ab      	cmp	r3, r5
 80086da:	dc19      	bgt.n	8008710 <__multadd+0x74>
 80086dc:	6861      	ldr	r1, [r4, #4]
 80086de:	4638      	mov	r0, r7
 80086e0:	3101      	adds	r1, #1
 80086e2:	f7ff ff79 	bl	80085d8 <_Balloc>
 80086e6:	4680      	mov	r8, r0
 80086e8:	b928      	cbnz	r0, 80086f6 <__multadd+0x5a>
 80086ea:	4602      	mov	r2, r0
 80086ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008720 <__multadd+0x84>)
 80086ee:	480d      	ldr	r0, [pc, #52]	@ (8008724 <__multadd+0x88>)
 80086f0:	21ba      	movs	r1, #186	@ 0xba
 80086f2:	f000 fd07 	bl	8009104 <__assert_func>
 80086f6:	6922      	ldr	r2, [r4, #16]
 80086f8:	3202      	adds	r2, #2
 80086fa:	f104 010c 	add.w	r1, r4, #12
 80086fe:	0092      	lsls	r2, r2, #2
 8008700:	300c      	adds	r0, #12
 8008702:	f7ff f80c 	bl	800771e <memcpy>
 8008706:	4621      	mov	r1, r4
 8008708:	4638      	mov	r0, r7
 800870a:	f7ff ffa5 	bl	8008658 <_Bfree>
 800870e:	4644      	mov	r4, r8
 8008710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008714:	3501      	adds	r5, #1
 8008716:	615e      	str	r6, [r3, #20]
 8008718:	6125      	str	r5, [r4, #16]
 800871a:	4620      	mov	r0, r4
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	0800a0f4 	.word	0x0800a0f4
 8008724:	0800a105 	.word	0x0800a105

08008728 <__hi0bits>:
 8008728:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800872c:	4603      	mov	r3, r0
 800872e:	bf36      	itet	cc
 8008730:	0403      	lslcc	r3, r0, #16
 8008732:	2000      	movcs	r0, #0
 8008734:	2010      	movcc	r0, #16
 8008736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800873a:	bf3c      	itt	cc
 800873c:	021b      	lslcc	r3, r3, #8
 800873e:	3008      	addcc	r0, #8
 8008740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008744:	bf3c      	itt	cc
 8008746:	011b      	lslcc	r3, r3, #4
 8008748:	3004      	addcc	r0, #4
 800874a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800874e:	bf3c      	itt	cc
 8008750:	009b      	lslcc	r3, r3, #2
 8008752:	3002      	addcc	r0, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	db05      	blt.n	8008764 <__hi0bits+0x3c>
 8008758:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800875c:	f100 0001 	add.w	r0, r0, #1
 8008760:	bf08      	it	eq
 8008762:	2020      	moveq	r0, #32
 8008764:	4770      	bx	lr

08008766 <__lo0bits>:
 8008766:	6803      	ldr	r3, [r0, #0]
 8008768:	4602      	mov	r2, r0
 800876a:	f013 0007 	ands.w	r0, r3, #7
 800876e:	d00b      	beq.n	8008788 <__lo0bits+0x22>
 8008770:	07d9      	lsls	r1, r3, #31
 8008772:	d421      	bmi.n	80087b8 <__lo0bits+0x52>
 8008774:	0798      	lsls	r0, r3, #30
 8008776:	bf49      	itett	mi
 8008778:	085b      	lsrmi	r3, r3, #1
 800877a:	089b      	lsrpl	r3, r3, #2
 800877c:	2001      	movmi	r0, #1
 800877e:	6013      	strmi	r3, [r2, #0]
 8008780:	bf5c      	itt	pl
 8008782:	6013      	strpl	r3, [r2, #0]
 8008784:	2002      	movpl	r0, #2
 8008786:	4770      	bx	lr
 8008788:	b299      	uxth	r1, r3
 800878a:	b909      	cbnz	r1, 8008790 <__lo0bits+0x2a>
 800878c:	0c1b      	lsrs	r3, r3, #16
 800878e:	2010      	movs	r0, #16
 8008790:	b2d9      	uxtb	r1, r3
 8008792:	b909      	cbnz	r1, 8008798 <__lo0bits+0x32>
 8008794:	3008      	adds	r0, #8
 8008796:	0a1b      	lsrs	r3, r3, #8
 8008798:	0719      	lsls	r1, r3, #28
 800879a:	bf04      	itt	eq
 800879c:	091b      	lsreq	r3, r3, #4
 800879e:	3004      	addeq	r0, #4
 80087a0:	0799      	lsls	r1, r3, #30
 80087a2:	bf04      	itt	eq
 80087a4:	089b      	lsreq	r3, r3, #2
 80087a6:	3002      	addeq	r0, #2
 80087a8:	07d9      	lsls	r1, r3, #31
 80087aa:	d403      	bmi.n	80087b4 <__lo0bits+0x4e>
 80087ac:	085b      	lsrs	r3, r3, #1
 80087ae:	f100 0001 	add.w	r0, r0, #1
 80087b2:	d003      	beq.n	80087bc <__lo0bits+0x56>
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	4770      	bx	lr
 80087b8:	2000      	movs	r0, #0
 80087ba:	4770      	bx	lr
 80087bc:	2020      	movs	r0, #32
 80087be:	4770      	bx	lr

080087c0 <__i2b>:
 80087c0:	b510      	push	{r4, lr}
 80087c2:	460c      	mov	r4, r1
 80087c4:	2101      	movs	r1, #1
 80087c6:	f7ff ff07 	bl	80085d8 <_Balloc>
 80087ca:	4602      	mov	r2, r0
 80087cc:	b928      	cbnz	r0, 80087da <__i2b+0x1a>
 80087ce:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <__i2b+0x24>)
 80087d0:	4805      	ldr	r0, [pc, #20]	@ (80087e8 <__i2b+0x28>)
 80087d2:	f240 1145 	movw	r1, #325	@ 0x145
 80087d6:	f000 fc95 	bl	8009104 <__assert_func>
 80087da:	2301      	movs	r3, #1
 80087dc:	6144      	str	r4, [r0, #20]
 80087de:	6103      	str	r3, [r0, #16]
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	bf00      	nop
 80087e4:	0800a0f4 	.word	0x0800a0f4
 80087e8:	0800a105 	.word	0x0800a105

080087ec <__multiply>:
 80087ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	4614      	mov	r4, r2
 80087f2:	690a      	ldr	r2, [r1, #16]
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	bfa8      	it	ge
 80087fa:	4623      	movge	r3, r4
 80087fc:	460f      	mov	r7, r1
 80087fe:	bfa4      	itt	ge
 8008800:	460c      	movge	r4, r1
 8008802:	461f      	movge	r7, r3
 8008804:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008808:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	6861      	ldr	r1, [r4, #4]
 8008810:	eb0a 0609 	add.w	r6, sl, r9
 8008814:	42b3      	cmp	r3, r6
 8008816:	b085      	sub	sp, #20
 8008818:	bfb8      	it	lt
 800881a:	3101      	addlt	r1, #1
 800881c:	f7ff fedc 	bl	80085d8 <_Balloc>
 8008820:	b930      	cbnz	r0, 8008830 <__multiply+0x44>
 8008822:	4602      	mov	r2, r0
 8008824:	4b44      	ldr	r3, [pc, #272]	@ (8008938 <__multiply+0x14c>)
 8008826:	4845      	ldr	r0, [pc, #276]	@ (800893c <__multiply+0x150>)
 8008828:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800882c:	f000 fc6a 	bl	8009104 <__assert_func>
 8008830:	f100 0514 	add.w	r5, r0, #20
 8008834:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008838:	462b      	mov	r3, r5
 800883a:	2200      	movs	r2, #0
 800883c:	4543      	cmp	r3, r8
 800883e:	d321      	bcc.n	8008884 <__multiply+0x98>
 8008840:	f107 0114 	add.w	r1, r7, #20
 8008844:	f104 0214 	add.w	r2, r4, #20
 8008848:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800884c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008850:	9302      	str	r3, [sp, #8]
 8008852:	1b13      	subs	r3, r2, r4
 8008854:	3b15      	subs	r3, #21
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	3304      	adds	r3, #4
 800885c:	f104 0715 	add.w	r7, r4, #21
 8008860:	42ba      	cmp	r2, r7
 8008862:	bf38      	it	cc
 8008864:	2304      	movcc	r3, #4
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	9103      	str	r1, [sp, #12]
 800886c:	428b      	cmp	r3, r1
 800886e:	d80c      	bhi.n	800888a <__multiply+0x9e>
 8008870:	2e00      	cmp	r6, #0
 8008872:	dd03      	ble.n	800887c <__multiply+0x90>
 8008874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008878:	2b00      	cmp	r3, #0
 800887a:	d05b      	beq.n	8008934 <__multiply+0x148>
 800887c:	6106      	str	r6, [r0, #16]
 800887e:	b005      	add	sp, #20
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	f843 2b04 	str.w	r2, [r3], #4
 8008888:	e7d8      	b.n	800883c <__multiply+0x50>
 800888a:	f8b1 a000 	ldrh.w	sl, [r1]
 800888e:	f1ba 0f00 	cmp.w	sl, #0
 8008892:	d024      	beq.n	80088de <__multiply+0xf2>
 8008894:	f104 0e14 	add.w	lr, r4, #20
 8008898:	46a9      	mov	r9, r5
 800889a:	f04f 0c00 	mov.w	ip, #0
 800889e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088a2:	f8d9 3000 	ldr.w	r3, [r9]
 80088a6:	fa1f fb87 	uxth.w	fp, r7
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80088b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088b4:	f8d9 7000 	ldr.w	r7, [r9]
 80088b8:	4463      	add	r3, ip
 80088ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088be:	fb0a c70b 	mla	r7, sl, fp, ip
 80088c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088cc:	4572      	cmp	r2, lr
 80088ce:	f849 3b04 	str.w	r3, [r9], #4
 80088d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088d6:	d8e2      	bhi.n	800889e <__multiply+0xb2>
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	f845 c003 	str.w	ip, [r5, r3]
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088e4:	3104      	adds	r1, #4
 80088e6:	f1b9 0f00 	cmp.w	r9, #0
 80088ea:	d021      	beq.n	8008930 <__multiply+0x144>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	f104 0c14 	add.w	ip, r4, #20
 80088f2:	46ae      	mov	lr, r5
 80088f4:	f04f 0a00 	mov.w	sl, #0
 80088f8:	f8bc b000 	ldrh.w	fp, [ip]
 80088fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008900:	fb09 770b 	mla	r7, r9, fp, r7
 8008904:	4457      	add	r7, sl
 8008906:	b29b      	uxth	r3, r3
 8008908:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800890c:	f84e 3b04 	str.w	r3, [lr], #4
 8008910:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008914:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008918:	f8be 3000 	ldrh.w	r3, [lr]
 800891c:	fb09 330a 	mla	r3, r9, sl, r3
 8008920:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008924:	4562      	cmp	r2, ip
 8008926:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800892a:	d8e5      	bhi.n	80088f8 <__multiply+0x10c>
 800892c:	9f01      	ldr	r7, [sp, #4]
 800892e:	51eb      	str	r3, [r5, r7]
 8008930:	3504      	adds	r5, #4
 8008932:	e799      	b.n	8008868 <__multiply+0x7c>
 8008934:	3e01      	subs	r6, #1
 8008936:	e79b      	b.n	8008870 <__multiply+0x84>
 8008938:	0800a0f4 	.word	0x0800a0f4
 800893c:	0800a105 	.word	0x0800a105

08008940 <__pow5mult>:
 8008940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008944:	4615      	mov	r5, r2
 8008946:	f012 0203 	ands.w	r2, r2, #3
 800894a:	4607      	mov	r7, r0
 800894c:	460e      	mov	r6, r1
 800894e:	d007      	beq.n	8008960 <__pow5mult+0x20>
 8008950:	4c25      	ldr	r4, [pc, #148]	@ (80089e8 <__pow5mult+0xa8>)
 8008952:	3a01      	subs	r2, #1
 8008954:	2300      	movs	r3, #0
 8008956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800895a:	f7ff fe9f 	bl	800869c <__multadd>
 800895e:	4606      	mov	r6, r0
 8008960:	10ad      	asrs	r5, r5, #2
 8008962:	d03d      	beq.n	80089e0 <__pow5mult+0xa0>
 8008964:	69fc      	ldr	r4, [r7, #28]
 8008966:	b97c      	cbnz	r4, 8008988 <__pow5mult+0x48>
 8008968:	2010      	movs	r0, #16
 800896a:	f7ff fd7f 	bl	800846c <malloc>
 800896e:	4602      	mov	r2, r0
 8008970:	61f8      	str	r0, [r7, #28]
 8008972:	b928      	cbnz	r0, 8008980 <__pow5mult+0x40>
 8008974:	4b1d      	ldr	r3, [pc, #116]	@ (80089ec <__pow5mult+0xac>)
 8008976:	481e      	ldr	r0, [pc, #120]	@ (80089f0 <__pow5mult+0xb0>)
 8008978:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800897c:	f000 fbc2 	bl	8009104 <__assert_func>
 8008980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008984:	6004      	str	r4, [r0, #0]
 8008986:	60c4      	str	r4, [r0, #12]
 8008988:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800898c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008990:	b94c      	cbnz	r4, 80089a6 <__pow5mult+0x66>
 8008992:	f240 2171 	movw	r1, #625	@ 0x271
 8008996:	4638      	mov	r0, r7
 8008998:	f7ff ff12 	bl	80087c0 <__i2b>
 800899c:	2300      	movs	r3, #0
 800899e:	f8c8 0008 	str.w	r0, [r8, #8]
 80089a2:	4604      	mov	r4, r0
 80089a4:	6003      	str	r3, [r0, #0]
 80089a6:	f04f 0900 	mov.w	r9, #0
 80089aa:	07eb      	lsls	r3, r5, #31
 80089ac:	d50a      	bpl.n	80089c4 <__pow5mult+0x84>
 80089ae:	4631      	mov	r1, r6
 80089b0:	4622      	mov	r2, r4
 80089b2:	4638      	mov	r0, r7
 80089b4:	f7ff ff1a 	bl	80087ec <__multiply>
 80089b8:	4631      	mov	r1, r6
 80089ba:	4680      	mov	r8, r0
 80089bc:	4638      	mov	r0, r7
 80089be:	f7ff fe4b 	bl	8008658 <_Bfree>
 80089c2:	4646      	mov	r6, r8
 80089c4:	106d      	asrs	r5, r5, #1
 80089c6:	d00b      	beq.n	80089e0 <__pow5mult+0xa0>
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	b938      	cbnz	r0, 80089dc <__pow5mult+0x9c>
 80089cc:	4622      	mov	r2, r4
 80089ce:	4621      	mov	r1, r4
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ff0b 	bl	80087ec <__multiply>
 80089d6:	6020      	str	r0, [r4, #0]
 80089d8:	f8c0 9000 	str.w	r9, [r0]
 80089dc:	4604      	mov	r4, r0
 80089de:	e7e4      	b.n	80089aa <__pow5mult+0x6a>
 80089e0:	4630      	mov	r0, r6
 80089e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e6:	bf00      	nop
 80089e8:	0800a160 	.word	0x0800a160
 80089ec:	0800a085 	.word	0x0800a085
 80089f0:	0800a105 	.word	0x0800a105

080089f4 <__lshift>:
 80089f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	6849      	ldr	r1, [r1, #4]
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a02:	68a3      	ldr	r3, [r4, #8]
 8008a04:	4607      	mov	r7, r0
 8008a06:	4691      	mov	r9, r2
 8008a08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a0c:	f108 0601 	add.w	r6, r8, #1
 8008a10:	42b3      	cmp	r3, r6
 8008a12:	db0b      	blt.n	8008a2c <__lshift+0x38>
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff fddf 	bl	80085d8 <_Balloc>
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	b948      	cbnz	r0, 8008a32 <__lshift+0x3e>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b28      	ldr	r3, [pc, #160]	@ (8008ac4 <__lshift+0xd0>)
 8008a22:	4829      	ldr	r0, [pc, #164]	@ (8008ac8 <__lshift+0xd4>)
 8008a24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a28:	f000 fb6c 	bl	8009104 <__assert_func>
 8008a2c:	3101      	adds	r1, #1
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	e7ee      	b.n	8008a10 <__lshift+0x1c>
 8008a32:	2300      	movs	r3, #0
 8008a34:	f100 0114 	add.w	r1, r0, #20
 8008a38:	f100 0210 	add.w	r2, r0, #16
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	4553      	cmp	r3, sl
 8008a40:	db33      	blt.n	8008aaa <__lshift+0xb6>
 8008a42:	6920      	ldr	r0, [r4, #16]
 8008a44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a48:	f104 0314 	add.w	r3, r4, #20
 8008a4c:	f019 091f 	ands.w	r9, r9, #31
 8008a50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a58:	d02b      	beq.n	8008ab2 <__lshift+0xbe>
 8008a5a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a5e:	468a      	mov	sl, r1
 8008a60:	2200      	movs	r2, #0
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	fa00 f009 	lsl.w	r0, r0, r9
 8008a68:	4310      	orrs	r0, r2
 8008a6a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a72:	459c      	cmp	ip, r3
 8008a74:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a78:	d8f3      	bhi.n	8008a62 <__lshift+0x6e>
 8008a7a:	ebac 0304 	sub.w	r3, ip, r4
 8008a7e:	3b15      	subs	r3, #21
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	3304      	adds	r3, #4
 8008a86:	f104 0015 	add.w	r0, r4, #21
 8008a8a:	4584      	cmp	ip, r0
 8008a8c:	bf38      	it	cc
 8008a8e:	2304      	movcc	r3, #4
 8008a90:	50ca      	str	r2, [r1, r3]
 8008a92:	b10a      	cbz	r2, 8008a98 <__lshift+0xa4>
 8008a94:	f108 0602 	add.w	r6, r8, #2
 8008a98:	3e01      	subs	r6, #1
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	612e      	str	r6, [r5, #16]
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	f7ff fdda 	bl	8008658 <_Bfree>
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aae:	3301      	adds	r3, #1
 8008ab0:	e7c5      	b.n	8008a3e <__lshift+0x4a>
 8008ab2:	3904      	subs	r1, #4
 8008ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008abc:	459c      	cmp	ip, r3
 8008abe:	d8f9      	bhi.n	8008ab4 <__lshift+0xc0>
 8008ac0:	e7ea      	b.n	8008a98 <__lshift+0xa4>
 8008ac2:	bf00      	nop
 8008ac4:	0800a0f4 	.word	0x0800a0f4
 8008ac8:	0800a105 	.word	0x0800a105

08008acc <__mcmp>:
 8008acc:	690a      	ldr	r2, [r1, #16]
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6900      	ldr	r0, [r0, #16]
 8008ad2:	1a80      	subs	r0, r0, r2
 8008ad4:	b530      	push	{r4, r5, lr}
 8008ad6:	d10e      	bne.n	8008af6 <__mcmp+0x2a>
 8008ad8:	3314      	adds	r3, #20
 8008ada:	3114      	adds	r1, #20
 8008adc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ae0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ae4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008aec:	4295      	cmp	r5, r2
 8008aee:	d003      	beq.n	8008af8 <__mcmp+0x2c>
 8008af0:	d205      	bcs.n	8008afe <__mcmp+0x32>
 8008af2:	f04f 30ff 	mov.w	r0, #4294967295
 8008af6:	bd30      	pop	{r4, r5, pc}
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	d3f3      	bcc.n	8008ae4 <__mcmp+0x18>
 8008afc:	e7fb      	b.n	8008af6 <__mcmp+0x2a>
 8008afe:	2001      	movs	r0, #1
 8008b00:	e7f9      	b.n	8008af6 <__mcmp+0x2a>
	...

08008b04 <__mdiff>:
 8008b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	4689      	mov	r9, r1
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4648      	mov	r0, r9
 8008b10:	4614      	mov	r4, r2
 8008b12:	f7ff ffdb 	bl	8008acc <__mcmp>
 8008b16:	1e05      	subs	r5, r0, #0
 8008b18:	d112      	bne.n	8008b40 <__mdiff+0x3c>
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff fd5b 	bl	80085d8 <_Balloc>
 8008b22:	4602      	mov	r2, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <__mdiff+0x2e>
 8008b26:	4b3f      	ldr	r3, [pc, #252]	@ (8008c24 <__mdiff+0x120>)
 8008b28:	f240 2137 	movw	r1, #567	@ 0x237
 8008b2c:	483e      	ldr	r0, [pc, #248]	@ (8008c28 <__mdiff+0x124>)
 8008b2e:	f000 fae9 	bl	8009104 <__assert_func>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	b003      	add	sp, #12
 8008b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b40:	bfbc      	itt	lt
 8008b42:	464b      	movlt	r3, r9
 8008b44:	46a1      	movlt	r9, r4
 8008b46:	4630      	mov	r0, r6
 8008b48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b4c:	bfba      	itte	lt
 8008b4e:	461c      	movlt	r4, r3
 8008b50:	2501      	movlt	r5, #1
 8008b52:	2500      	movge	r5, #0
 8008b54:	f7ff fd40 	bl	80085d8 <_Balloc>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	b918      	cbnz	r0, 8008b64 <__mdiff+0x60>
 8008b5c:	4b31      	ldr	r3, [pc, #196]	@ (8008c24 <__mdiff+0x120>)
 8008b5e:	f240 2145 	movw	r1, #581	@ 0x245
 8008b62:	e7e3      	b.n	8008b2c <__mdiff+0x28>
 8008b64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b68:	6926      	ldr	r6, [r4, #16]
 8008b6a:	60c5      	str	r5, [r0, #12]
 8008b6c:	f109 0310 	add.w	r3, r9, #16
 8008b70:	f109 0514 	add.w	r5, r9, #20
 8008b74:	f104 0e14 	add.w	lr, r4, #20
 8008b78:	f100 0b14 	add.w	fp, r0, #20
 8008b7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	46d9      	mov	r9, fp
 8008b88:	f04f 0c00 	mov.w	ip, #0
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	fa1f f38a 	uxth.w	r3, sl
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	b283      	uxth	r3, r0
 8008ba0:	1acb      	subs	r3, r1, r3
 8008ba2:	0c00      	lsrs	r0, r0, #16
 8008ba4:	4463      	add	r3, ip
 8008ba6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008baa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bb4:	4576      	cmp	r6, lr
 8008bb6:	f849 3b04 	str.w	r3, [r9], #4
 8008bba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bbe:	d8e5      	bhi.n	8008b8c <__mdiff+0x88>
 8008bc0:	1b33      	subs	r3, r6, r4
 8008bc2:	3b15      	subs	r3, #21
 8008bc4:	f023 0303 	bic.w	r3, r3, #3
 8008bc8:	3415      	adds	r4, #21
 8008bca:	3304      	adds	r3, #4
 8008bcc:	42a6      	cmp	r6, r4
 8008bce:	bf38      	it	cc
 8008bd0:	2304      	movcc	r3, #4
 8008bd2:	441d      	add	r5, r3
 8008bd4:	445b      	add	r3, fp
 8008bd6:	461e      	mov	r6, r3
 8008bd8:	462c      	mov	r4, r5
 8008bda:	4544      	cmp	r4, r8
 8008bdc:	d30e      	bcc.n	8008bfc <__mdiff+0xf8>
 8008bde:	f108 0103 	add.w	r1, r8, #3
 8008be2:	1b49      	subs	r1, r1, r5
 8008be4:	f021 0103 	bic.w	r1, r1, #3
 8008be8:	3d03      	subs	r5, #3
 8008bea:	45a8      	cmp	r8, r5
 8008bec:	bf38      	it	cc
 8008bee:	2100      	movcc	r1, #0
 8008bf0:	440b      	add	r3, r1
 8008bf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bf6:	b191      	cbz	r1, 8008c1e <__mdiff+0x11a>
 8008bf8:	6117      	str	r7, [r2, #16]
 8008bfa:	e79d      	b.n	8008b38 <__mdiff+0x34>
 8008bfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c00:	46e6      	mov	lr, ip
 8008c02:	0c08      	lsrs	r0, r1, #16
 8008c04:	fa1c fc81 	uxtah	ip, ip, r1
 8008c08:	4471      	add	r1, lr
 8008c0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c0e:	b289      	uxth	r1, r1
 8008c10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c14:	f846 1b04 	str.w	r1, [r6], #4
 8008c18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c1c:	e7dd      	b.n	8008bda <__mdiff+0xd6>
 8008c1e:	3f01      	subs	r7, #1
 8008c20:	e7e7      	b.n	8008bf2 <__mdiff+0xee>
 8008c22:	bf00      	nop
 8008c24:	0800a0f4 	.word	0x0800a0f4
 8008c28:	0800a105 	.word	0x0800a105

08008c2c <__d2b>:
 8008c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c30:	460f      	mov	r7, r1
 8008c32:	2101      	movs	r1, #1
 8008c34:	ec59 8b10 	vmov	r8, r9, d0
 8008c38:	4616      	mov	r6, r2
 8008c3a:	f7ff fccd 	bl	80085d8 <_Balloc>
 8008c3e:	4604      	mov	r4, r0
 8008c40:	b930      	cbnz	r0, 8008c50 <__d2b+0x24>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4b23      	ldr	r3, [pc, #140]	@ (8008cd4 <__d2b+0xa8>)
 8008c46:	4824      	ldr	r0, [pc, #144]	@ (8008cd8 <__d2b+0xac>)
 8008c48:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c4c:	f000 fa5a 	bl	8009104 <__assert_func>
 8008c50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c58:	b10d      	cbz	r5, 8008c5e <__d2b+0x32>
 8008c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	f1b8 0300 	subs.w	r3, r8, #0
 8008c64:	d023      	beq.n	8008cae <__d2b+0x82>
 8008c66:	4668      	mov	r0, sp
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	f7ff fd7c 	bl	8008766 <__lo0bits>
 8008c6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c72:	b1d0      	cbz	r0, 8008caa <__d2b+0x7e>
 8008c74:	f1c0 0320 	rsb	r3, r0, #32
 8008c78:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	40c2      	lsrs	r2, r0
 8008c80:	6163      	str	r3, [r4, #20]
 8008c82:	9201      	str	r2, [sp, #4]
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	61a3      	str	r3, [r4, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bf0c      	ite	eq
 8008c8c:	2201      	moveq	r2, #1
 8008c8e:	2202      	movne	r2, #2
 8008c90:	6122      	str	r2, [r4, #16]
 8008c92:	b1a5      	cbz	r5, 8008cbe <__d2b+0x92>
 8008c94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c98:	4405      	add	r5, r0
 8008c9a:	603d      	str	r5, [r7, #0]
 8008c9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ca0:	6030      	str	r0, [r6, #0]
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	b003      	add	sp, #12
 8008ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008caa:	6161      	str	r1, [r4, #20]
 8008cac:	e7ea      	b.n	8008c84 <__d2b+0x58>
 8008cae:	a801      	add	r0, sp, #4
 8008cb0:	f7ff fd59 	bl	8008766 <__lo0bits>
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	6163      	str	r3, [r4, #20]
 8008cb8:	3020      	adds	r0, #32
 8008cba:	2201      	movs	r2, #1
 8008cbc:	e7e8      	b.n	8008c90 <__d2b+0x64>
 8008cbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008cc6:	6038      	str	r0, [r7, #0]
 8008cc8:	6918      	ldr	r0, [r3, #16]
 8008cca:	f7ff fd2d 	bl	8008728 <__hi0bits>
 8008cce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cd2:	e7e5      	b.n	8008ca0 <__d2b+0x74>
 8008cd4:	0800a0f4 	.word	0x0800a0f4
 8008cd8:	0800a105 	.word	0x0800a105

08008cdc <__ssputs_r>:
 8008cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce0:	688e      	ldr	r6, [r1, #8]
 8008ce2:	461f      	mov	r7, r3
 8008ce4:	42be      	cmp	r6, r7
 8008ce6:	680b      	ldr	r3, [r1, #0]
 8008ce8:	4682      	mov	sl, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	4690      	mov	r8, r2
 8008cee:	d82d      	bhi.n	8008d4c <__ssputs_r+0x70>
 8008cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cf8:	d026      	beq.n	8008d48 <__ssputs_r+0x6c>
 8008cfa:	6965      	ldr	r5, [r4, #20]
 8008cfc:	6909      	ldr	r1, [r1, #16]
 8008cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d02:	eba3 0901 	sub.w	r9, r3, r1
 8008d06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d0a:	1c7b      	adds	r3, r7, #1
 8008d0c:	444b      	add	r3, r9
 8008d0e:	106d      	asrs	r5, r5, #1
 8008d10:	429d      	cmp	r5, r3
 8008d12:	bf38      	it	cc
 8008d14:	461d      	movcc	r5, r3
 8008d16:	0553      	lsls	r3, r2, #21
 8008d18:	d527      	bpl.n	8008d6a <__ssputs_r+0x8e>
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	f7ff fbd0 	bl	80084c0 <_malloc_r>
 8008d20:	4606      	mov	r6, r0
 8008d22:	b360      	cbz	r0, 8008d7e <__ssputs_r+0xa2>
 8008d24:	6921      	ldr	r1, [r4, #16]
 8008d26:	464a      	mov	r2, r9
 8008d28:	f7fe fcf9 	bl	800771e <memcpy>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	6126      	str	r6, [r4, #16]
 8008d3a:	6165      	str	r5, [r4, #20]
 8008d3c:	444e      	add	r6, r9
 8008d3e:	eba5 0509 	sub.w	r5, r5, r9
 8008d42:	6026      	str	r6, [r4, #0]
 8008d44:	60a5      	str	r5, [r4, #8]
 8008d46:	463e      	mov	r6, r7
 8008d48:	42be      	cmp	r6, r7
 8008d4a:	d900      	bls.n	8008d4e <__ssputs_r+0x72>
 8008d4c:	463e      	mov	r6, r7
 8008d4e:	6820      	ldr	r0, [r4, #0]
 8008d50:	4632      	mov	r2, r6
 8008d52:	4641      	mov	r1, r8
 8008d54:	f7fe fc4a 	bl	80075ec <memmove>
 8008d58:	68a3      	ldr	r3, [r4, #8]
 8008d5a:	1b9b      	subs	r3, r3, r6
 8008d5c:	60a3      	str	r3, [r4, #8]
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	4433      	add	r3, r6
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	2000      	movs	r0, #0
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	f000 fa0e 	bl	800918c <_realloc_r>
 8008d70:	4606      	mov	r6, r0
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d1e0      	bne.n	8008d38 <__ssputs_r+0x5c>
 8008d76:	6921      	ldr	r1, [r4, #16]
 8008d78:	4650      	mov	r0, sl
 8008d7a:	f7ff fb2d 	bl	80083d8 <_free_r>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	f8ca 3000 	str.w	r3, [sl]
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	e7e9      	b.n	8008d66 <__ssputs_r+0x8a>
	...

08008d94 <_svfiprintf_r>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	4698      	mov	r8, r3
 8008d9a:	898b      	ldrh	r3, [r1, #12]
 8008d9c:	061b      	lsls	r3, r3, #24
 8008d9e:	b09d      	sub	sp, #116	@ 0x74
 8008da0:	4607      	mov	r7, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	4614      	mov	r4, r2
 8008da6:	d510      	bpl.n	8008dca <_svfiprintf_r+0x36>
 8008da8:	690b      	ldr	r3, [r1, #16]
 8008daa:	b973      	cbnz	r3, 8008dca <_svfiprintf_r+0x36>
 8008dac:	2140      	movs	r1, #64	@ 0x40
 8008dae:	f7ff fb87 	bl	80084c0 <_malloc_r>
 8008db2:	6028      	str	r0, [r5, #0]
 8008db4:	6128      	str	r0, [r5, #16]
 8008db6:	b930      	cbnz	r0, 8008dc6 <_svfiprintf_r+0x32>
 8008db8:	230c      	movs	r3, #12
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc0:	b01d      	add	sp, #116	@ 0x74
 8008dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc6:	2340      	movs	r3, #64	@ 0x40
 8008dc8:	616b      	str	r3, [r5, #20]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dce:	2320      	movs	r3, #32
 8008dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dd8:	2330      	movs	r3, #48	@ 0x30
 8008dda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f78 <_svfiprintf_r+0x1e4>
 8008dde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008de2:	f04f 0901 	mov.w	r9, #1
 8008de6:	4623      	mov	r3, r4
 8008de8:	469a      	mov	sl, r3
 8008dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dee:	b10a      	cbz	r2, 8008df4 <_svfiprintf_r+0x60>
 8008df0:	2a25      	cmp	r2, #37	@ 0x25
 8008df2:	d1f9      	bne.n	8008de8 <_svfiprintf_r+0x54>
 8008df4:	ebba 0b04 	subs.w	fp, sl, r4
 8008df8:	d00b      	beq.n	8008e12 <_svfiprintf_r+0x7e>
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4638      	mov	r0, r7
 8008e02:	f7ff ff6b 	bl	8008cdc <__ssputs_r>
 8008e06:	3001      	adds	r0, #1
 8008e08:	f000 80a7 	beq.w	8008f5a <_svfiprintf_r+0x1c6>
 8008e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e0e:	445a      	add	r2, fp
 8008e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e12:	f89a 3000 	ldrb.w	r3, [sl]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 809f 	beq.w	8008f5a <_svfiprintf_r+0x1c6>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e26:	f10a 0a01 	add.w	sl, sl, #1
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	9307      	str	r3, [sp, #28]
 8008e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e34:	4654      	mov	r4, sl
 8008e36:	2205      	movs	r2, #5
 8008e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3c:	484e      	ldr	r0, [pc, #312]	@ (8008f78 <_svfiprintf_r+0x1e4>)
 8008e3e:	f7f7 f9c7 	bl	80001d0 <memchr>
 8008e42:	9a04      	ldr	r2, [sp, #16]
 8008e44:	b9d8      	cbnz	r0, 8008e7e <_svfiprintf_r+0xea>
 8008e46:	06d0      	lsls	r0, r2, #27
 8008e48:	bf44      	itt	mi
 8008e4a:	2320      	movmi	r3, #32
 8008e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e50:	0711      	lsls	r1, r2, #28
 8008e52:	bf44      	itt	mi
 8008e54:	232b      	movmi	r3, #43	@ 0x2b
 8008e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e60:	d015      	beq.n	8008e8e <_svfiprintf_r+0xfa>
 8008e62:	9a07      	ldr	r2, [sp, #28]
 8008e64:	4654      	mov	r4, sl
 8008e66:	2000      	movs	r0, #0
 8008e68:	f04f 0c0a 	mov.w	ip, #10
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e72:	3b30      	subs	r3, #48	@ 0x30
 8008e74:	2b09      	cmp	r3, #9
 8008e76:	d94b      	bls.n	8008f10 <_svfiprintf_r+0x17c>
 8008e78:	b1b0      	cbz	r0, 8008ea8 <_svfiprintf_r+0x114>
 8008e7a:	9207      	str	r2, [sp, #28]
 8008e7c:	e014      	b.n	8008ea8 <_svfiprintf_r+0x114>
 8008e7e:	eba0 0308 	sub.w	r3, r0, r8
 8008e82:	fa09 f303 	lsl.w	r3, r9, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	46a2      	mov	sl, r4
 8008e8c:	e7d2      	b.n	8008e34 <_svfiprintf_r+0xa0>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	1d19      	adds	r1, r3, #4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	9103      	str	r1, [sp, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfbb      	ittet	lt
 8008e9a:	425b      	neglt	r3, r3
 8008e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008ea0:	9307      	strge	r3, [sp, #28]
 8008ea2:	9307      	strlt	r3, [sp, #28]
 8008ea4:	bfb8      	it	lt
 8008ea6:	9204      	strlt	r2, [sp, #16]
 8008ea8:	7823      	ldrb	r3, [r4, #0]
 8008eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eac:	d10a      	bne.n	8008ec4 <_svfiprintf_r+0x130>
 8008eae:	7863      	ldrb	r3, [r4, #1]
 8008eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eb2:	d132      	bne.n	8008f1a <_svfiprintf_r+0x186>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	1d1a      	adds	r2, r3, #4
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	9203      	str	r2, [sp, #12]
 8008ebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ec0:	3402      	adds	r4, #2
 8008ec2:	9305      	str	r3, [sp, #20]
 8008ec4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f88 <_svfiprintf_r+0x1f4>
 8008ec8:	7821      	ldrb	r1, [r4, #0]
 8008eca:	2203      	movs	r2, #3
 8008ecc:	4650      	mov	r0, sl
 8008ece:	f7f7 f97f 	bl	80001d0 <memchr>
 8008ed2:	b138      	cbz	r0, 8008ee4 <_svfiprintf_r+0x150>
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	eba0 000a 	sub.w	r0, r0, sl
 8008eda:	2240      	movs	r2, #64	@ 0x40
 8008edc:	4082      	lsls	r2, r0
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	3401      	adds	r4, #1
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee8:	4824      	ldr	r0, [pc, #144]	@ (8008f7c <_svfiprintf_r+0x1e8>)
 8008eea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eee:	2206      	movs	r2, #6
 8008ef0:	f7f7 f96e 	bl	80001d0 <memchr>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d036      	beq.n	8008f66 <_svfiprintf_r+0x1d2>
 8008ef8:	4b21      	ldr	r3, [pc, #132]	@ (8008f80 <_svfiprintf_r+0x1ec>)
 8008efa:	bb1b      	cbnz	r3, 8008f44 <_svfiprintf_r+0x1b0>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	3307      	adds	r3, #7
 8008f00:	f023 0307 	bic.w	r3, r3, #7
 8008f04:	3308      	adds	r3, #8
 8008f06:	9303      	str	r3, [sp, #12]
 8008f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0a:	4433      	add	r3, r6
 8008f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f0e:	e76a      	b.n	8008de6 <_svfiprintf_r+0x52>
 8008f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f14:	460c      	mov	r4, r1
 8008f16:	2001      	movs	r0, #1
 8008f18:	e7a8      	b.n	8008e6c <_svfiprintf_r+0xd8>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	3401      	adds	r4, #1
 8008f1e:	9305      	str	r3, [sp, #20]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f04f 0c0a 	mov.w	ip, #10
 8008f26:	4620      	mov	r0, r4
 8008f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f2c:	3a30      	subs	r2, #48	@ 0x30
 8008f2e:	2a09      	cmp	r2, #9
 8008f30:	d903      	bls.n	8008f3a <_svfiprintf_r+0x1a6>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0c6      	beq.n	8008ec4 <_svfiprintf_r+0x130>
 8008f36:	9105      	str	r1, [sp, #20]
 8008f38:	e7c4      	b.n	8008ec4 <_svfiprintf_r+0x130>
 8008f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3e:	4604      	mov	r4, r0
 8008f40:	2301      	movs	r3, #1
 8008f42:	e7f0      	b.n	8008f26 <_svfiprintf_r+0x192>
 8008f44:	ab03      	add	r3, sp, #12
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f84 <_svfiprintf_r+0x1f0>)
 8008f4c:	a904      	add	r1, sp, #16
 8008f4e:	4638      	mov	r0, r7
 8008f50:	f7fd fe22 	bl	8006b98 <_printf_float>
 8008f54:	1c42      	adds	r2, r0, #1
 8008f56:	4606      	mov	r6, r0
 8008f58:	d1d6      	bne.n	8008f08 <_svfiprintf_r+0x174>
 8008f5a:	89ab      	ldrh	r3, [r5, #12]
 8008f5c:	065b      	lsls	r3, r3, #25
 8008f5e:	f53f af2d 	bmi.w	8008dbc <_svfiprintf_r+0x28>
 8008f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f64:	e72c      	b.n	8008dc0 <_svfiprintf_r+0x2c>
 8008f66:	ab03      	add	r3, sp, #12
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <_svfiprintf_r+0x1f0>)
 8008f6e:	a904      	add	r1, sp, #16
 8008f70:	4638      	mov	r0, r7
 8008f72:	f7fe f8a9 	bl	80070c8 <_printf_i>
 8008f76:	e7ed      	b.n	8008f54 <_svfiprintf_r+0x1c0>
 8008f78:	0800a260 	.word	0x0800a260
 8008f7c:	0800a26a 	.word	0x0800a26a
 8008f80:	08006b99 	.word	0x08006b99
 8008f84:	08008cdd 	.word	0x08008cdd
 8008f88:	0800a266 	.word	0x0800a266

08008f8c <__sflush_r>:
 8008f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f94:	0716      	lsls	r6, r2, #28
 8008f96:	4605      	mov	r5, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	d454      	bmi.n	8009046 <__sflush_r+0xba>
 8008f9c:	684b      	ldr	r3, [r1, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dc02      	bgt.n	8008fa8 <__sflush_r+0x1c>
 8008fa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dd48      	ble.n	800903a <__sflush_r+0xae>
 8008fa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	d045      	beq.n	800903a <__sflush_r+0xae>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fb4:	682f      	ldr	r7, [r5, #0]
 8008fb6:	6a21      	ldr	r1, [r4, #32]
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	d030      	beq.n	800901e <__sflush_r+0x92>
 8008fbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	0759      	lsls	r1, r3, #29
 8008fc2:	d505      	bpl.n	8008fd0 <__sflush_r+0x44>
 8008fc4:	6863      	ldr	r3, [r4, #4]
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fca:	b10b      	cbz	r3, 8008fd0 <__sflush_r+0x44>
 8008fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fce:	1ad2      	subs	r2, r2, r3
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fd4:	6a21      	ldr	r1, [r4, #32]
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b0      	blx	r6
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	d106      	bne.n	8008fee <__sflush_r+0x62>
 8008fe0:	6829      	ldr	r1, [r5, #0]
 8008fe2:	291d      	cmp	r1, #29
 8008fe4:	d82b      	bhi.n	800903e <__sflush_r+0xb2>
 8008fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8009090 <__sflush_r+0x104>)
 8008fe8:	410a      	asrs	r2, r1
 8008fea:	07d6      	lsls	r6, r2, #31
 8008fec:	d427      	bmi.n	800903e <__sflush_r+0xb2>
 8008fee:	2200      	movs	r2, #0
 8008ff0:	6062      	str	r2, [r4, #4]
 8008ff2:	04d9      	lsls	r1, r3, #19
 8008ff4:	6922      	ldr	r2, [r4, #16]
 8008ff6:	6022      	str	r2, [r4, #0]
 8008ff8:	d504      	bpl.n	8009004 <__sflush_r+0x78>
 8008ffa:	1c42      	adds	r2, r0, #1
 8008ffc:	d101      	bne.n	8009002 <__sflush_r+0x76>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	b903      	cbnz	r3, 8009004 <__sflush_r+0x78>
 8009002:	6560      	str	r0, [r4, #84]	@ 0x54
 8009004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009006:	602f      	str	r7, [r5, #0]
 8009008:	b1b9      	cbz	r1, 800903a <__sflush_r+0xae>
 800900a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800900e:	4299      	cmp	r1, r3
 8009010:	d002      	beq.n	8009018 <__sflush_r+0x8c>
 8009012:	4628      	mov	r0, r5
 8009014:	f7ff f9e0 	bl	80083d8 <_free_r>
 8009018:	2300      	movs	r3, #0
 800901a:	6363      	str	r3, [r4, #52]	@ 0x34
 800901c:	e00d      	b.n	800903a <__sflush_r+0xae>
 800901e:	2301      	movs	r3, #1
 8009020:	4628      	mov	r0, r5
 8009022:	47b0      	blx	r6
 8009024:	4602      	mov	r2, r0
 8009026:	1c50      	adds	r0, r2, #1
 8009028:	d1c9      	bne.n	8008fbe <__sflush_r+0x32>
 800902a:	682b      	ldr	r3, [r5, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0c6      	beq.n	8008fbe <__sflush_r+0x32>
 8009030:	2b1d      	cmp	r3, #29
 8009032:	d001      	beq.n	8009038 <__sflush_r+0xac>
 8009034:	2b16      	cmp	r3, #22
 8009036:	d11e      	bne.n	8009076 <__sflush_r+0xea>
 8009038:	602f      	str	r7, [r5, #0]
 800903a:	2000      	movs	r0, #0
 800903c:	e022      	b.n	8009084 <__sflush_r+0xf8>
 800903e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009042:	b21b      	sxth	r3, r3
 8009044:	e01b      	b.n	800907e <__sflush_r+0xf2>
 8009046:	690f      	ldr	r7, [r1, #16]
 8009048:	2f00      	cmp	r7, #0
 800904a:	d0f6      	beq.n	800903a <__sflush_r+0xae>
 800904c:	0793      	lsls	r3, r2, #30
 800904e:	680e      	ldr	r6, [r1, #0]
 8009050:	bf08      	it	eq
 8009052:	694b      	ldreq	r3, [r1, #20]
 8009054:	600f      	str	r7, [r1, #0]
 8009056:	bf18      	it	ne
 8009058:	2300      	movne	r3, #0
 800905a:	eba6 0807 	sub.w	r8, r6, r7
 800905e:	608b      	str	r3, [r1, #8]
 8009060:	f1b8 0f00 	cmp.w	r8, #0
 8009064:	dde9      	ble.n	800903a <__sflush_r+0xae>
 8009066:	6a21      	ldr	r1, [r4, #32]
 8009068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800906a:	4643      	mov	r3, r8
 800906c:	463a      	mov	r2, r7
 800906e:	4628      	mov	r0, r5
 8009070:	47b0      	blx	r6
 8009072:	2800      	cmp	r0, #0
 8009074:	dc08      	bgt.n	8009088 <__sflush_r+0xfc>
 8009076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009088:	4407      	add	r7, r0
 800908a:	eba8 0800 	sub.w	r8, r8, r0
 800908e:	e7e7      	b.n	8009060 <__sflush_r+0xd4>
 8009090:	dfbffffe 	.word	0xdfbffffe

08009094 <_fflush_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	690b      	ldr	r3, [r1, #16]
 8009098:	4605      	mov	r5, r0
 800909a:	460c      	mov	r4, r1
 800909c:	b913      	cbnz	r3, 80090a4 <_fflush_r+0x10>
 800909e:	2500      	movs	r5, #0
 80090a0:	4628      	mov	r0, r5
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	b118      	cbz	r0, 80090ae <_fflush_r+0x1a>
 80090a6:	6a03      	ldr	r3, [r0, #32]
 80090a8:	b90b      	cbnz	r3, 80090ae <_fflush_r+0x1a>
 80090aa:	f7fe f9b9 	bl	8007420 <__sinit>
 80090ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f3      	beq.n	800909e <_fflush_r+0xa>
 80090b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090b8:	07d0      	lsls	r0, r2, #31
 80090ba:	d404      	bmi.n	80090c6 <_fflush_r+0x32>
 80090bc:	0599      	lsls	r1, r3, #22
 80090be:	d402      	bmi.n	80090c6 <_fflush_r+0x32>
 80090c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090c2:	f7fe fb2a 	bl	800771a <__retarget_lock_acquire_recursive>
 80090c6:	4628      	mov	r0, r5
 80090c8:	4621      	mov	r1, r4
 80090ca:	f7ff ff5f 	bl	8008f8c <__sflush_r>
 80090ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090d0:	07da      	lsls	r2, r3, #31
 80090d2:	4605      	mov	r5, r0
 80090d4:	d4e4      	bmi.n	80090a0 <_fflush_r+0xc>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	059b      	lsls	r3, r3, #22
 80090da:	d4e1      	bmi.n	80090a0 <_fflush_r+0xc>
 80090dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090de:	f7fe fb1d 	bl	800771c <__retarget_lock_release_recursive>
 80090e2:	e7dd      	b.n	80090a0 <_fflush_r+0xc>

080090e4 <_sbrk_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d06      	ldr	r5, [pc, #24]	@ (8009100 <_sbrk_r+0x1c>)
 80090e8:	2300      	movs	r3, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	4608      	mov	r0, r1
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	f7f9 fe08 	bl	8002d04 <_sbrk>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_sbrk_r+0x1a>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_sbrk_r+0x1a>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	2000095c 	.word	0x2000095c

08009104 <__assert_func>:
 8009104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009106:	4614      	mov	r4, r2
 8009108:	461a      	mov	r2, r3
 800910a:	4b09      	ldr	r3, [pc, #36]	@ (8009130 <__assert_func+0x2c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4605      	mov	r5, r0
 8009110:	68d8      	ldr	r0, [r3, #12]
 8009112:	b954      	cbnz	r4, 800912a <__assert_func+0x26>
 8009114:	4b07      	ldr	r3, [pc, #28]	@ (8009134 <__assert_func+0x30>)
 8009116:	461c      	mov	r4, r3
 8009118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800911c:	9100      	str	r1, [sp, #0]
 800911e:	462b      	mov	r3, r5
 8009120:	4905      	ldr	r1, [pc, #20]	@ (8009138 <__assert_func+0x34>)
 8009122:	f000 f86f 	bl	8009204 <fiprintf>
 8009126:	f000 f87f 	bl	8009228 <abort>
 800912a:	4b04      	ldr	r3, [pc, #16]	@ (800913c <__assert_func+0x38>)
 800912c:	e7f4      	b.n	8009118 <__assert_func+0x14>
 800912e:	bf00      	nop
 8009130:	20000020 	.word	0x20000020
 8009134:	0800a2b6 	.word	0x0800a2b6
 8009138:	0800a288 	.word	0x0800a288
 800913c:	0800a27b 	.word	0x0800a27b

08009140 <_calloc_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	fba1 5402 	umull	r5, r4, r1, r2
 8009146:	b93c      	cbnz	r4, 8009158 <_calloc_r+0x18>
 8009148:	4629      	mov	r1, r5
 800914a:	f7ff f9b9 	bl	80084c0 <_malloc_r>
 800914e:	4606      	mov	r6, r0
 8009150:	b928      	cbnz	r0, 800915e <_calloc_r+0x1e>
 8009152:	2600      	movs	r6, #0
 8009154:	4630      	mov	r0, r6
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	220c      	movs	r2, #12
 800915a:	6002      	str	r2, [r0, #0]
 800915c:	e7f9      	b.n	8009152 <_calloc_r+0x12>
 800915e:	462a      	mov	r2, r5
 8009160:	4621      	mov	r1, r4
 8009162:	f7fe fa5d 	bl	8007620 <memset>
 8009166:	e7f5      	b.n	8009154 <_calloc_r+0x14>

08009168 <__ascii_mbtowc>:
 8009168:	b082      	sub	sp, #8
 800916a:	b901      	cbnz	r1, 800916e <__ascii_mbtowc+0x6>
 800916c:	a901      	add	r1, sp, #4
 800916e:	b142      	cbz	r2, 8009182 <__ascii_mbtowc+0x1a>
 8009170:	b14b      	cbz	r3, 8009186 <__ascii_mbtowc+0x1e>
 8009172:	7813      	ldrb	r3, [r2, #0]
 8009174:	600b      	str	r3, [r1, #0]
 8009176:	7812      	ldrb	r2, [r2, #0]
 8009178:	1e10      	subs	r0, r2, #0
 800917a:	bf18      	it	ne
 800917c:	2001      	movne	r0, #1
 800917e:	b002      	add	sp, #8
 8009180:	4770      	bx	lr
 8009182:	4610      	mov	r0, r2
 8009184:	e7fb      	b.n	800917e <__ascii_mbtowc+0x16>
 8009186:	f06f 0001 	mvn.w	r0, #1
 800918a:	e7f8      	b.n	800917e <__ascii_mbtowc+0x16>

0800918c <_realloc_r>:
 800918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	4680      	mov	r8, r0
 8009192:	4615      	mov	r5, r2
 8009194:	460c      	mov	r4, r1
 8009196:	b921      	cbnz	r1, 80091a2 <_realloc_r+0x16>
 8009198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	4611      	mov	r1, r2
 800919e:	f7ff b98f 	b.w	80084c0 <_malloc_r>
 80091a2:	b92a      	cbnz	r2, 80091b0 <_realloc_r+0x24>
 80091a4:	f7ff f918 	bl	80083d8 <_free_r>
 80091a8:	2400      	movs	r4, #0
 80091aa:	4620      	mov	r0, r4
 80091ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b0:	f000 f841 	bl	8009236 <_malloc_usable_size_r>
 80091b4:	4285      	cmp	r5, r0
 80091b6:	4606      	mov	r6, r0
 80091b8:	d802      	bhi.n	80091c0 <_realloc_r+0x34>
 80091ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091be:	d8f4      	bhi.n	80091aa <_realloc_r+0x1e>
 80091c0:	4629      	mov	r1, r5
 80091c2:	4640      	mov	r0, r8
 80091c4:	f7ff f97c 	bl	80084c0 <_malloc_r>
 80091c8:	4607      	mov	r7, r0
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d0ec      	beq.n	80091a8 <_realloc_r+0x1c>
 80091ce:	42b5      	cmp	r5, r6
 80091d0:	462a      	mov	r2, r5
 80091d2:	4621      	mov	r1, r4
 80091d4:	bf28      	it	cs
 80091d6:	4632      	movcs	r2, r6
 80091d8:	f7fe faa1 	bl	800771e <memcpy>
 80091dc:	4621      	mov	r1, r4
 80091de:	4640      	mov	r0, r8
 80091e0:	f7ff f8fa 	bl	80083d8 <_free_r>
 80091e4:	463c      	mov	r4, r7
 80091e6:	e7e0      	b.n	80091aa <_realloc_r+0x1e>

080091e8 <__ascii_wctomb>:
 80091e8:	4603      	mov	r3, r0
 80091ea:	4608      	mov	r0, r1
 80091ec:	b141      	cbz	r1, 8009200 <__ascii_wctomb+0x18>
 80091ee:	2aff      	cmp	r2, #255	@ 0xff
 80091f0:	d904      	bls.n	80091fc <__ascii_wctomb+0x14>
 80091f2:	228a      	movs	r2, #138	@ 0x8a
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	4770      	bx	lr
 80091fc:	700a      	strb	r2, [r1, #0]
 80091fe:	2001      	movs	r0, #1
 8009200:	4770      	bx	lr
	...

08009204 <fiprintf>:
 8009204:	b40e      	push	{r1, r2, r3}
 8009206:	b503      	push	{r0, r1, lr}
 8009208:	4601      	mov	r1, r0
 800920a:	ab03      	add	r3, sp, #12
 800920c:	4805      	ldr	r0, [pc, #20]	@ (8009224 <fiprintf+0x20>)
 800920e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009212:	6800      	ldr	r0, [r0, #0]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	f000 f83f 	bl	8009298 <_vfiprintf_r>
 800921a:	b002      	add	sp, #8
 800921c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009220:	b003      	add	sp, #12
 8009222:	4770      	bx	lr
 8009224:	20000020 	.word	0x20000020

08009228 <abort>:
 8009228:	b508      	push	{r3, lr}
 800922a:	2006      	movs	r0, #6
 800922c:	f000 fa08 	bl	8009640 <raise>
 8009230:	2001      	movs	r0, #1
 8009232:	f7f9 fd0a 	bl	8002c4a <_exit>

08009236 <_malloc_usable_size_r>:
 8009236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800923a:	1f18      	subs	r0, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	bfbc      	itt	lt
 8009240:	580b      	ldrlt	r3, [r1, r0]
 8009242:	18c0      	addlt	r0, r0, r3
 8009244:	4770      	bx	lr

08009246 <__sfputc_r>:
 8009246:	6893      	ldr	r3, [r2, #8]
 8009248:	3b01      	subs	r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	b410      	push	{r4}
 800924e:	6093      	str	r3, [r2, #8]
 8009250:	da08      	bge.n	8009264 <__sfputc_r+0x1e>
 8009252:	6994      	ldr	r4, [r2, #24]
 8009254:	42a3      	cmp	r3, r4
 8009256:	db01      	blt.n	800925c <__sfputc_r+0x16>
 8009258:	290a      	cmp	r1, #10
 800925a:	d103      	bne.n	8009264 <__sfputc_r+0x1e>
 800925c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009260:	f000 b932 	b.w	80094c8 <__swbuf_r>
 8009264:	6813      	ldr	r3, [r2, #0]
 8009266:	1c58      	adds	r0, r3, #1
 8009268:	6010      	str	r0, [r2, #0]
 800926a:	7019      	strb	r1, [r3, #0]
 800926c:	4608      	mov	r0, r1
 800926e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009272:	4770      	bx	lr

08009274 <__sfputs_r>:
 8009274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009276:	4606      	mov	r6, r0
 8009278:	460f      	mov	r7, r1
 800927a:	4614      	mov	r4, r2
 800927c:	18d5      	adds	r5, r2, r3
 800927e:	42ac      	cmp	r4, r5
 8009280:	d101      	bne.n	8009286 <__sfputs_r+0x12>
 8009282:	2000      	movs	r0, #0
 8009284:	e007      	b.n	8009296 <__sfputs_r+0x22>
 8009286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928a:	463a      	mov	r2, r7
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff ffda 	bl	8009246 <__sfputc_r>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d1f3      	bne.n	800927e <__sfputs_r+0xa>
 8009296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009298 <_vfiprintf_r>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	460d      	mov	r5, r1
 800929e:	b09d      	sub	sp, #116	@ 0x74
 80092a0:	4614      	mov	r4, r2
 80092a2:	4698      	mov	r8, r3
 80092a4:	4606      	mov	r6, r0
 80092a6:	b118      	cbz	r0, 80092b0 <_vfiprintf_r+0x18>
 80092a8:	6a03      	ldr	r3, [r0, #32]
 80092aa:	b90b      	cbnz	r3, 80092b0 <_vfiprintf_r+0x18>
 80092ac:	f7fe f8b8 	bl	8007420 <__sinit>
 80092b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092b2:	07d9      	lsls	r1, r3, #31
 80092b4:	d405      	bmi.n	80092c2 <_vfiprintf_r+0x2a>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	059a      	lsls	r2, r3, #22
 80092ba:	d402      	bmi.n	80092c2 <_vfiprintf_r+0x2a>
 80092bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092be:	f7fe fa2c 	bl	800771a <__retarget_lock_acquire_recursive>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	071b      	lsls	r3, r3, #28
 80092c6:	d501      	bpl.n	80092cc <_vfiprintf_r+0x34>
 80092c8:	692b      	ldr	r3, [r5, #16]
 80092ca:	b99b      	cbnz	r3, 80092f4 <_vfiprintf_r+0x5c>
 80092cc:	4629      	mov	r1, r5
 80092ce:	4630      	mov	r0, r6
 80092d0:	f000 f938 	bl	8009544 <__swsetup_r>
 80092d4:	b170      	cbz	r0, 80092f4 <_vfiprintf_r+0x5c>
 80092d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092d8:	07dc      	lsls	r4, r3, #31
 80092da:	d504      	bpl.n	80092e6 <_vfiprintf_r+0x4e>
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	b01d      	add	sp, #116	@ 0x74
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	0598      	lsls	r0, r3, #22
 80092ea:	d4f7      	bmi.n	80092dc <_vfiprintf_r+0x44>
 80092ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ee:	f7fe fa15 	bl	800771c <__retarget_lock_release_recursive>
 80092f2:	e7f3      	b.n	80092dc <_vfiprintf_r+0x44>
 80092f4:	2300      	movs	r3, #0
 80092f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f8:	2320      	movs	r3, #32
 80092fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009302:	2330      	movs	r3, #48	@ 0x30
 8009304:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094b4 <_vfiprintf_r+0x21c>
 8009308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800930c:	f04f 0901 	mov.w	r9, #1
 8009310:	4623      	mov	r3, r4
 8009312:	469a      	mov	sl, r3
 8009314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009318:	b10a      	cbz	r2, 800931e <_vfiprintf_r+0x86>
 800931a:	2a25      	cmp	r2, #37	@ 0x25
 800931c:	d1f9      	bne.n	8009312 <_vfiprintf_r+0x7a>
 800931e:	ebba 0b04 	subs.w	fp, sl, r4
 8009322:	d00b      	beq.n	800933c <_vfiprintf_r+0xa4>
 8009324:	465b      	mov	r3, fp
 8009326:	4622      	mov	r2, r4
 8009328:	4629      	mov	r1, r5
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ffa2 	bl	8009274 <__sfputs_r>
 8009330:	3001      	adds	r0, #1
 8009332:	f000 80a7 	beq.w	8009484 <_vfiprintf_r+0x1ec>
 8009336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009338:	445a      	add	r2, fp
 800933a:	9209      	str	r2, [sp, #36]	@ 0x24
 800933c:	f89a 3000 	ldrb.w	r3, [sl]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 809f 	beq.w	8009484 <_vfiprintf_r+0x1ec>
 8009346:	2300      	movs	r3, #0
 8009348:	f04f 32ff 	mov.w	r2, #4294967295
 800934c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009350:	f10a 0a01 	add.w	sl, sl, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800935c:	931a      	str	r3, [sp, #104]	@ 0x68
 800935e:	4654      	mov	r4, sl
 8009360:	2205      	movs	r2, #5
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	4853      	ldr	r0, [pc, #332]	@ (80094b4 <_vfiprintf_r+0x21c>)
 8009368:	f7f6 ff32 	bl	80001d0 <memchr>
 800936c:	9a04      	ldr	r2, [sp, #16]
 800936e:	b9d8      	cbnz	r0, 80093a8 <_vfiprintf_r+0x110>
 8009370:	06d1      	lsls	r1, r2, #27
 8009372:	bf44      	itt	mi
 8009374:	2320      	movmi	r3, #32
 8009376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800937a:	0713      	lsls	r3, r2, #28
 800937c:	bf44      	itt	mi
 800937e:	232b      	movmi	r3, #43	@ 0x2b
 8009380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009384:	f89a 3000 	ldrb.w	r3, [sl]
 8009388:	2b2a      	cmp	r3, #42	@ 0x2a
 800938a:	d015      	beq.n	80093b8 <_vfiprintf_r+0x120>
 800938c:	9a07      	ldr	r2, [sp, #28]
 800938e:	4654      	mov	r4, sl
 8009390:	2000      	movs	r0, #0
 8009392:	f04f 0c0a 	mov.w	ip, #10
 8009396:	4621      	mov	r1, r4
 8009398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800939c:	3b30      	subs	r3, #48	@ 0x30
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d94b      	bls.n	800943a <_vfiprintf_r+0x1a2>
 80093a2:	b1b0      	cbz	r0, 80093d2 <_vfiprintf_r+0x13a>
 80093a4:	9207      	str	r2, [sp, #28]
 80093a6:	e014      	b.n	80093d2 <_vfiprintf_r+0x13a>
 80093a8:	eba0 0308 	sub.w	r3, r0, r8
 80093ac:	fa09 f303 	lsl.w	r3, r9, r3
 80093b0:	4313      	orrs	r3, r2
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	46a2      	mov	sl, r4
 80093b6:	e7d2      	b.n	800935e <_vfiprintf_r+0xc6>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	1d19      	adds	r1, r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	9103      	str	r1, [sp, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bfbb      	ittet	lt
 80093c4:	425b      	neglt	r3, r3
 80093c6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ca:	9307      	strge	r3, [sp, #28]
 80093cc:	9307      	strlt	r3, [sp, #28]
 80093ce:	bfb8      	it	lt
 80093d0:	9204      	strlt	r2, [sp, #16]
 80093d2:	7823      	ldrb	r3, [r4, #0]
 80093d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80093d6:	d10a      	bne.n	80093ee <_vfiprintf_r+0x156>
 80093d8:	7863      	ldrb	r3, [r4, #1]
 80093da:	2b2a      	cmp	r3, #42	@ 0x2a
 80093dc:	d132      	bne.n	8009444 <_vfiprintf_r+0x1ac>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	1d1a      	adds	r2, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9203      	str	r2, [sp, #12]
 80093e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093ea:	3402      	adds	r4, #2
 80093ec:	9305      	str	r3, [sp, #20]
 80093ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094c4 <_vfiprintf_r+0x22c>
 80093f2:	7821      	ldrb	r1, [r4, #0]
 80093f4:	2203      	movs	r2, #3
 80093f6:	4650      	mov	r0, sl
 80093f8:	f7f6 feea 	bl	80001d0 <memchr>
 80093fc:	b138      	cbz	r0, 800940e <_vfiprintf_r+0x176>
 80093fe:	9b04      	ldr	r3, [sp, #16]
 8009400:	eba0 000a 	sub.w	r0, r0, sl
 8009404:	2240      	movs	r2, #64	@ 0x40
 8009406:	4082      	lsls	r2, r0
 8009408:	4313      	orrs	r3, r2
 800940a:	3401      	adds	r4, #1
 800940c:	9304      	str	r3, [sp, #16]
 800940e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009412:	4829      	ldr	r0, [pc, #164]	@ (80094b8 <_vfiprintf_r+0x220>)
 8009414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009418:	2206      	movs	r2, #6
 800941a:	f7f6 fed9 	bl	80001d0 <memchr>
 800941e:	2800      	cmp	r0, #0
 8009420:	d03f      	beq.n	80094a2 <_vfiprintf_r+0x20a>
 8009422:	4b26      	ldr	r3, [pc, #152]	@ (80094bc <_vfiprintf_r+0x224>)
 8009424:	bb1b      	cbnz	r3, 800946e <_vfiprintf_r+0x1d6>
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	3307      	adds	r3, #7
 800942a:	f023 0307 	bic.w	r3, r3, #7
 800942e:	3308      	adds	r3, #8
 8009430:	9303      	str	r3, [sp, #12]
 8009432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009434:	443b      	add	r3, r7
 8009436:	9309      	str	r3, [sp, #36]	@ 0x24
 8009438:	e76a      	b.n	8009310 <_vfiprintf_r+0x78>
 800943a:	fb0c 3202 	mla	r2, ip, r2, r3
 800943e:	460c      	mov	r4, r1
 8009440:	2001      	movs	r0, #1
 8009442:	e7a8      	b.n	8009396 <_vfiprintf_r+0xfe>
 8009444:	2300      	movs	r3, #0
 8009446:	3401      	adds	r4, #1
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	4619      	mov	r1, r3
 800944c:	f04f 0c0a 	mov.w	ip, #10
 8009450:	4620      	mov	r0, r4
 8009452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009456:	3a30      	subs	r2, #48	@ 0x30
 8009458:	2a09      	cmp	r2, #9
 800945a:	d903      	bls.n	8009464 <_vfiprintf_r+0x1cc>
 800945c:	2b00      	cmp	r3, #0
 800945e:	d0c6      	beq.n	80093ee <_vfiprintf_r+0x156>
 8009460:	9105      	str	r1, [sp, #20]
 8009462:	e7c4      	b.n	80093ee <_vfiprintf_r+0x156>
 8009464:	fb0c 2101 	mla	r1, ip, r1, r2
 8009468:	4604      	mov	r4, r0
 800946a:	2301      	movs	r3, #1
 800946c:	e7f0      	b.n	8009450 <_vfiprintf_r+0x1b8>
 800946e:	ab03      	add	r3, sp, #12
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	462a      	mov	r2, r5
 8009474:	4b12      	ldr	r3, [pc, #72]	@ (80094c0 <_vfiprintf_r+0x228>)
 8009476:	a904      	add	r1, sp, #16
 8009478:	4630      	mov	r0, r6
 800947a:	f7fd fb8d 	bl	8006b98 <_printf_float>
 800947e:	4607      	mov	r7, r0
 8009480:	1c78      	adds	r0, r7, #1
 8009482:	d1d6      	bne.n	8009432 <_vfiprintf_r+0x19a>
 8009484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009486:	07d9      	lsls	r1, r3, #31
 8009488:	d405      	bmi.n	8009496 <_vfiprintf_r+0x1fe>
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	059a      	lsls	r2, r3, #22
 800948e:	d402      	bmi.n	8009496 <_vfiprintf_r+0x1fe>
 8009490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009492:	f7fe f943 	bl	800771c <__retarget_lock_release_recursive>
 8009496:	89ab      	ldrh	r3, [r5, #12]
 8009498:	065b      	lsls	r3, r3, #25
 800949a:	f53f af1f 	bmi.w	80092dc <_vfiprintf_r+0x44>
 800949e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094a0:	e71e      	b.n	80092e0 <_vfiprintf_r+0x48>
 80094a2:	ab03      	add	r3, sp, #12
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	462a      	mov	r2, r5
 80094a8:	4b05      	ldr	r3, [pc, #20]	@ (80094c0 <_vfiprintf_r+0x228>)
 80094aa:	a904      	add	r1, sp, #16
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7fd fe0b 	bl	80070c8 <_printf_i>
 80094b2:	e7e4      	b.n	800947e <_vfiprintf_r+0x1e6>
 80094b4:	0800a260 	.word	0x0800a260
 80094b8:	0800a26a 	.word	0x0800a26a
 80094bc:	08006b99 	.word	0x08006b99
 80094c0:	08009275 	.word	0x08009275
 80094c4:	0800a266 	.word	0x0800a266

080094c8 <__swbuf_r>:
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	460e      	mov	r6, r1
 80094cc:	4614      	mov	r4, r2
 80094ce:	4605      	mov	r5, r0
 80094d0:	b118      	cbz	r0, 80094da <__swbuf_r+0x12>
 80094d2:	6a03      	ldr	r3, [r0, #32]
 80094d4:	b90b      	cbnz	r3, 80094da <__swbuf_r+0x12>
 80094d6:	f7fd ffa3 	bl	8007420 <__sinit>
 80094da:	69a3      	ldr	r3, [r4, #24]
 80094dc:	60a3      	str	r3, [r4, #8]
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	071a      	lsls	r2, r3, #28
 80094e2:	d501      	bpl.n	80094e8 <__swbuf_r+0x20>
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	b943      	cbnz	r3, 80094fa <__swbuf_r+0x32>
 80094e8:	4621      	mov	r1, r4
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 f82a 	bl	8009544 <__swsetup_r>
 80094f0:	b118      	cbz	r0, 80094fa <__swbuf_r+0x32>
 80094f2:	f04f 37ff 	mov.w	r7, #4294967295
 80094f6:	4638      	mov	r0, r7
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	6922      	ldr	r2, [r4, #16]
 80094fe:	1a98      	subs	r0, r3, r2
 8009500:	6963      	ldr	r3, [r4, #20]
 8009502:	b2f6      	uxtb	r6, r6
 8009504:	4283      	cmp	r3, r0
 8009506:	4637      	mov	r7, r6
 8009508:	dc05      	bgt.n	8009516 <__swbuf_r+0x4e>
 800950a:	4621      	mov	r1, r4
 800950c:	4628      	mov	r0, r5
 800950e:	f7ff fdc1 	bl	8009094 <_fflush_r>
 8009512:	2800      	cmp	r0, #0
 8009514:	d1ed      	bne.n	80094f2 <__swbuf_r+0x2a>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	3b01      	subs	r3, #1
 800951a:	60a3      	str	r3, [r4, #8]
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	6022      	str	r2, [r4, #0]
 8009522:	701e      	strb	r6, [r3, #0]
 8009524:	6962      	ldr	r2, [r4, #20]
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	429a      	cmp	r2, r3
 800952a:	d004      	beq.n	8009536 <__swbuf_r+0x6e>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	07db      	lsls	r3, r3, #31
 8009530:	d5e1      	bpl.n	80094f6 <__swbuf_r+0x2e>
 8009532:	2e0a      	cmp	r6, #10
 8009534:	d1df      	bne.n	80094f6 <__swbuf_r+0x2e>
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f7ff fdab 	bl	8009094 <_fflush_r>
 800953e:	2800      	cmp	r0, #0
 8009540:	d0d9      	beq.n	80094f6 <__swbuf_r+0x2e>
 8009542:	e7d6      	b.n	80094f2 <__swbuf_r+0x2a>

08009544 <__swsetup_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4b29      	ldr	r3, [pc, #164]	@ (80095ec <__swsetup_r+0xa8>)
 8009548:	4605      	mov	r5, r0
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	460c      	mov	r4, r1
 800954e:	b118      	cbz	r0, 8009558 <__swsetup_r+0x14>
 8009550:	6a03      	ldr	r3, [r0, #32]
 8009552:	b90b      	cbnz	r3, 8009558 <__swsetup_r+0x14>
 8009554:	f7fd ff64 	bl	8007420 <__sinit>
 8009558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955c:	0719      	lsls	r1, r3, #28
 800955e:	d422      	bmi.n	80095a6 <__swsetup_r+0x62>
 8009560:	06da      	lsls	r2, r3, #27
 8009562:	d407      	bmi.n	8009574 <__swsetup_r+0x30>
 8009564:	2209      	movs	r2, #9
 8009566:	602a      	str	r2, [r5, #0]
 8009568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	e033      	b.n	80095dc <__swsetup_r+0x98>
 8009574:	0758      	lsls	r0, r3, #29
 8009576:	d512      	bpl.n	800959e <__swsetup_r+0x5a>
 8009578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800957a:	b141      	cbz	r1, 800958e <__swsetup_r+0x4a>
 800957c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009580:	4299      	cmp	r1, r3
 8009582:	d002      	beq.n	800958a <__swsetup_r+0x46>
 8009584:	4628      	mov	r0, r5
 8009586:	f7fe ff27 	bl	80083d8 <_free_r>
 800958a:	2300      	movs	r3, #0
 800958c:	6363      	str	r3, [r4, #52]	@ 0x34
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	2300      	movs	r3, #0
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f043 0308 	orr.w	r3, r3, #8
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	b94b      	cbnz	r3, 80095be <__swsetup_r+0x7a>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095b4:	d003      	beq.n	80095be <__swsetup_r+0x7a>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f000 f883 	bl	80096c4 <__smakebuf_r>
 80095be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c2:	f013 0201 	ands.w	r2, r3, #1
 80095c6:	d00a      	beq.n	80095de <__swsetup_r+0x9a>
 80095c8:	2200      	movs	r2, #0
 80095ca:	60a2      	str	r2, [r4, #8]
 80095cc:	6962      	ldr	r2, [r4, #20]
 80095ce:	4252      	negs	r2, r2
 80095d0:	61a2      	str	r2, [r4, #24]
 80095d2:	6922      	ldr	r2, [r4, #16]
 80095d4:	b942      	cbnz	r2, 80095e8 <__swsetup_r+0xa4>
 80095d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095da:	d1c5      	bne.n	8009568 <__swsetup_r+0x24>
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	0799      	lsls	r1, r3, #30
 80095e0:	bf58      	it	pl
 80095e2:	6962      	ldrpl	r2, [r4, #20]
 80095e4:	60a2      	str	r2, [r4, #8]
 80095e6:	e7f4      	b.n	80095d2 <__swsetup_r+0x8e>
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7f7      	b.n	80095dc <__swsetup_r+0x98>
 80095ec:	20000020 	.word	0x20000020

080095f0 <_raise_r>:
 80095f0:	291f      	cmp	r1, #31
 80095f2:	b538      	push	{r3, r4, r5, lr}
 80095f4:	4605      	mov	r5, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	d904      	bls.n	8009604 <_raise_r+0x14>
 80095fa:	2316      	movs	r3, #22
 80095fc:	6003      	str	r3, [r0, #0]
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009606:	b112      	cbz	r2, 800960e <_raise_r+0x1e>
 8009608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800960c:	b94b      	cbnz	r3, 8009622 <_raise_r+0x32>
 800960e:	4628      	mov	r0, r5
 8009610:	f000 f830 	bl	8009674 <_getpid_r>
 8009614:	4622      	mov	r2, r4
 8009616:	4601      	mov	r1, r0
 8009618:	4628      	mov	r0, r5
 800961a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800961e:	f000 b817 	b.w	8009650 <_kill_r>
 8009622:	2b01      	cmp	r3, #1
 8009624:	d00a      	beq.n	800963c <_raise_r+0x4c>
 8009626:	1c59      	adds	r1, r3, #1
 8009628:	d103      	bne.n	8009632 <_raise_r+0x42>
 800962a:	2316      	movs	r3, #22
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	2001      	movs	r0, #1
 8009630:	e7e7      	b.n	8009602 <_raise_r+0x12>
 8009632:	2100      	movs	r1, #0
 8009634:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009638:	4620      	mov	r0, r4
 800963a:	4798      	blx	r3
 800963c:	2000      	movs	r0, #0
 800963e:	e7e0      	b.n	8009602 <_raise_r+0x12>

08009640 <raise>:
 8009640:	4b02      	ldr	r3, [pc, #8]	@ (800964c <raise+0xc>)
 8009642:	4601      	mov	r1, r0
 8009644:	6818      	ldr	r0, [r3, #0]
 8009646:	f7ff bfd3 	b.w	80095f0 <_raise_r>
 800964a:	bf00      	nop
 800964c:	20000020 	.word	0x20000020

08009650 <_kill_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d07      	ldr	r5, [pc, #28]	@ (8009670 <_kill_r+0x20>)
 8009654:	2300      	movs	r3, #0
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	4611      	mov	r1, r2
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	f7f9 fae4 	bl	8002c2a <_kill>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	d102      	bne.n	800966c <_kill_r+0x1c>
 8009666:	682b      	ldr	r3, [r5, #0]
 8009668:	b103      	cbz	r3, 800966c <_kill_r+0x1c>
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	bd38      	pop	{r3, r4, r5, pc}
 800966e:	bf00      	nop
 8009670:	2000095c 	.word	0x2000095c

08009674 <_getpid_r>:
 8009674:	f7f9 bad1 	b.w	8002c1a <_getpid>

08009678 <__swhatbuf_r>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	460c      	mov	r4, r1
 800967c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009680:	2900      	cmp	r1, #0
 8009682:	b096      	sub	sp, #88	@ 0x58
 8009684:	4615      	mov	r5, r2
 8009686:	461e      	mov	r6, r3
 8009688:	da0d      	bge.n	80096a6 <__swhatbuf_r+0x2e>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009690:	f04f 0100 	mov.w	r1, #0
 8009694:	bf14      	ite	ne
 8009696:	2340      	movne	r3, #64	@ 0x40
 8009698:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800969c:	2000      	movs	r0, #0
 800969e:	6031      	str	r1, [r6, #0]
 80096a0:	602b      	str	r3, [r5, #0]
 80096a2:	b016      	add	sp, #88	@ 0x58
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
 80096a6:	466a      	mov	r2, sp
 80096a8:	f000 f848 	bl	800973c <_fstat_r>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	dbec      	blt.n	800968a <__swhatbuf_r+0x12>
 80096b0:	9901      	ldr	r1, [sp, #4]
 80096b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096ba:	4259      	negs	r1, r3
 80096bc:	4159      	adcs	r1, r3
 80096be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096c2:	e7eb      	b.n	800969c <__swhatbuf_r+0x24>

080096c4 <__smakebuf_r>:
 80096c4:	898b      	ldrh	r3, [r1, #12]
 80096c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096c8:	079d      	lsls	r5, r3, #30
 80096ca:	4606      	mov	r6, r0
 80096cc:	460c      	mov	r4, r1
 80096ce:	d507      	bpl.n	80096e0 <__smakebuf_r+0x1c>
 80096d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	6123      	str	r3, [r4, #16]
 80096d8:	2301      	movs	r3, #1
 80096da:	6163      	str	r3, [r4, #20]
 80096dc:	b003      	add	sp, #12
 80096de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e0:	ab01      	add	r3, sp, #4
 80096e2:	466a      	mov	r2, sp
 80096e4:	f7ff ffc8 	bl	8009678 <__swhatbuf_r>
 80096e8:	9f00      	ldr	r7, [sp, #0]
 80096ea:	4605      	mov	r5, r0
 80096ec:	4639      	mov	r1, r7
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7fe fee6 	bl	80084c0 <_malloc_r>
 80096f4:	b948      	cbnz	r0, 800970a <__smakebuf_r+0x46>
 80096f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fa:	059a      	lsls	r2, r3, #22
 80096fc:	d4ee      	bmi.n	80096dc <__smakebuf_r+0x18>
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	f043 0302 	orr.w	r3, r3, #2
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	e7e2      	b.n	80096d0 <__smakebuf_r+0xc>
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	6020      	str	r0, [r4, #0]
 800970e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800971a:	b15b      	cbz	r3, 8009734 <__smakebuf_r+0x70>
 800971c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009720:	4630      	mov	r0, r6
 8009722:	f000 f81d 	bl	8009760 <_isatty_r>
 8009726:	b128      	cbz	r0, 8009734 <__smakebuf_r+0x70>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f023 0303 	bic.w	r3, r3, #3
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	431d      	orrs	r5, r3
 8009738:	81a5      	strh	r5, [r4, #12]
 800973a:	e7cf      	b.n	80096dc <__smakebuf_r+0x18>

0800973c <_fstat_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	@ (800975c <_fstat_r+0x20>)
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	f7f9 fab2 	bl	8002cb2 <_fstat>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d102      	bne.n	8009758 <_fstat_r+0x1c>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b103      	cbz	r3, 8009758 <_fstat_r+0x1c>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	2000095c 	.word	0x2000095c

08009760 <_isatty_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	@ (800977c <_isatty_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f9 fab1 	bl	8002cd2 <_isatty>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_isatty_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_isatty_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	2000095c 	.word	0x2000095c

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
